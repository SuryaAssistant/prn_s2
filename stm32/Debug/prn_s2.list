
prn_s2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000574c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005860  08005860  00015860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005a60  08005a60  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a60  08005a60  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000018  08005a80  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08005a80  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc4f  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e47  00000000  00000000  0002dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0002fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018003  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb4e  00000000  00000000  000495ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f27e  00000000  00000000  000590f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  000e83cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005844 	.word	0x08005844

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005844 	.word	0x08005844

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__gesf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000af0:	e006      	b.n	8000b00 <__cmpsf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__lesf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpsf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpsf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b16:	d011      	beq.n	8000b3c <__cmpsf2+0x40>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b1e:	bf18      	it	ne
 8000b20:	ea90 0f01 	teqne	r0, r1
 8000b24:	bf58      	it	pl
 8000b26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b2a:	bf88      	it	hi
 8000b2c:	17c8      	asrhi	r0, r1, #31
 8000b2e:	bf38      	it	cc
 8000b30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b34:	bf18      	it	ne
 8000b36:	f040 0001 	orrne.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	d102      	bne.n	8000b48 <__cmpsf2+0x4c>
 8000b42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b46:	d105      	bne.n	8000b54 <__cmpsf2+0x58>
 8000b48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b4c:	d1e4      	bne.n	8000b18 <__cmpsf2+0x1c>
 8000b4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b52:	d0e1      	beq.n	8000b18 <__cmpsf2+0x1c>
 8000b54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_cfrcmple>:
 8000b5c:	4684      	mov	ip, r0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4661      	mov	r1, ip
 8000b62:	e7ff      	b.n	8000b64 <__aeabi_cfcmpeq>

08000b64 <__aeabi_cfcmpeq>:
 8000b64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b66:	f7ff ffc9 	bl	8000afc <__cmpsf2>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	bf48      	it	mi
 8000b6e:	f110 0f00 	cmnmi.w	r0, #0
 8000b72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b74 <__aeabi_fcmpeq>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff fff4 	bl	8000b64 <__aeabi_cfcmpeq>
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2001      	moveq	r0, #1
 8000b80:	2000      	movne	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_fcmplt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffea 	bl	8000b64 <__aeabi_cfcmpeq>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_fcmple>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffe0 	bl	8000b64 <__aeabi_cfcmpeq>
 8000ba4:	bf94      	ite	ls
 8000ba6:	2001      	movls	r0, #1
 8000ba8:	2000      	movhi	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fcmpge>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffd2 	bl	8000b5c <__aeabi_cfrcmple>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmpgt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffc8 	bl	8000b5c <__aeabi_cfrcmple>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 f88f 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 fa89 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fdcd 	bl	8001784 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bea:	f000 fc41 	bl	8001470 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bee:	f000 fcbf 	bl	8001570 <MX_TIM3_Init>
  MX_DMA_Init();
 8000bf2:	f000 fda9 	bl	8001748 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bf6:	f000 fadb 	bl	80011b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000bfa:	f000 fd2f 	bl	800165c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000bfe:	f000 fb8b 	bl	8001318 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000c02:	f000 fb5b 	bl	80012bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Create SPWM Array (DO NOT CHANGE)

  for (int i=0; i<(sinDivision/2); i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	e054      	b.n	8000cb6 <main+0xde>
  {
	  spwmArrayTemp = sin((i+0.5) * 2 * M_PI / sinDivision) * period;
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fbf1 	bl	80003f4 <__aeabi_i2d>
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	4bc0      	ldr	r3, [pc, #768]	; (8000f18 <main+0x340>)
 8000c18:	f7ff faa0 	bl	800015c <__adddf3>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	f7ff fa98 	bl	800015c <__adddf3>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	a3b4      	add	r3, pc, #720	; (adr r3, 8000f08 <main+0x330>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fc45 	bl	80004c8 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4614      	mov	r4, r2
 8000c44:	461d      	mov	r5, r3
 8000c46:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbd2 	bl	80003f4 <__aeabi_i2d>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	f7ff fd60 	bl	800071c <__aeabi_ddiv>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f003 fdee 	bl	8004844 <sin>
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	4bab      	ldr	r3, [pc, #684]	; (8000f1c <main+0x344>)
 8000c6e:	f7ff fc2b 	bl	80004c8 <__aeabi_dmul>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	4610      	mov	r0, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f7ff fee7 	bl	8000a4c <__aeabi_d2f>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4aa7      	ldr	r2, [pc, #668]	; (8000f20 <main+0x348>)
 8000c82:	6013      	str	r3, [r2, #0]
	  spwmArray[i] = (int)(spwmArrayTemp+0.5);
 8000c84:	4ba6      	ldr	r3, [pc, #664]	; (8000f20 <main+0x348>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fbc5 	bl	8000418 <__aeabi_f2d>
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4ba1      	ldr	r3, [pc, #644]	; (8000f18 <main+0x340>)
 8000c94:	f7ff fa62 	bl	800015c <__adddf3>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f7ff feac 	bl	80009fc <__aeabi_d2iz>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4a9e      	ldr	r2, [pc, #632]	; (8000f24 <main+0x34c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<(sinDivision/2); i++)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cba:	0fda      	lsrs	r2, r3, #31
 8000cbc:	4413      	add	r3, r2
 8000cbe:	105b      	asrs	r3, r3, #1
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dba1      	blt.n	8000c0c <main+0x34>
  }

  htim2.Instance->CCR2 = 70;
 8000cc8:	4b97      	ldr	r3, [pc, #604]	; (8000f28 <main+0x350>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2246      	movs	r2, #70	; 0x46
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR3 = 70;
 8000cd0:	4b95      	ldr	r3, [pc, #596]	; (8000f28 <main+0x350>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2246      	movs	r2, #70	; 0x46
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_Base_Start_IT(&htim2);
 8000cd8:	4893      	ldr	r0, [pc, #588]	; (8000f28 <main+0x350>)
 8000cda:	f002 ff65 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4891      	ldr	r0, [pc, #580]	; (8000f28 <main+0x350>)
 8000ce2:	f003 f80b 	bl	8003cfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	488f      	ldr	r0, [pc, #572]	; (8000f28 <main+0x350>)
 8000cea:	f003 f807 	bl	8003cfc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	488e      	ldr	r0, [pc, #568]	; (8000f2c <main+0x354>)
 8000cf2:	f003 f803 	bl	8003cfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	488c      	ldr	r0, [pc, #560]	; (8000f2c <main+0x354>)
 8000cfa:	f002 ffff 	bl	8003cfc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	488b      	ldr	r0, [pc, #556]	; (8000f30 <main+0x358>)
 8000d02:	f002 fffb 	bl	8003cfc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d06:	2100      	movs	r1, #0
 8000d08:	488a      	ldr	r0, [pc, #552]	; (8000f34 <main+0x35c>)
 8000d0a:	f002 fff7 	bl	8003cfc <HAL_TIM_PWM_Start>

  // Set all PWM to Zero
  TIM1->CCR1 = nowTrafoSwitchingValue;
 8000d0e:	4b8a      	ldr	r3, [pc, #552]	; (8000f38 <main+0x360>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b8a      	ldr	r3, [pc, #552]	; (8000f3c <main+0x364>)
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = nowIsolatedBuckValue;
 8000d16:	4b8a      	ldr	r3, [pc, #552]	; (8000f40 <main+0x368>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b88      	ldr	r3, [pc, #544]	; (8000f3c <main+0x364>)
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38

  TIM3->CCR1 = nowBoostValue;
 8000d1e:	4b89      	ldr	r3, [pc, #548]	; (8000f44 <main+0x36c>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b89      	ldr	r3, [pc, #548]	; (8000f48 <main+0x370>)
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34

  TIM4->CCR1 = nowInputGateValue;
 8000d26:	4b89      	ldr	r3, [pc, #548]	; (8000f4c <main+0x374>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <main+0x378>)
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // increase led counter
	  ledCounter += 1;
 8000d2e:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <main+0x37c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a87      	ldr	r2, [pc, #540]	; (8000f54 <main+0x37c>)
 8000d36:	6013      	str	r3, [r2, #0]

	  // Read Sensor
	  HAL_ADC_Start_DMA(&hadc1, adcReading, 6);
 8000d38:	2206      	movs	r2, #6
 8000d3a:	4987      	ldr	r1, [pc, #540]	; (8000f58 <main+0x380>)
 8000d3c:	4887      	ldr	r0, [pc, #540]	; (8000f5c <main+0x384>)
 8000d3e:	f001 f93d 	bl	8001fbc <HAL_ADC_Start_DMA>

	  adcValue0 = adcReading[0];
 8000d42:	4b85      	ldr	r3, [pc, #532]	; (8000f58 <main+0x380>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b85      	ldr	r3, [pc, #532]	; (8000f60 <main+0x388>)
 8000d4a:	601a      	str	r2, [r3, #0]
	  adcValue1 = adcReading[1];
 8000d4c:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <main+0x380>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <main+0x38c>)
 8000d54:	601a      	str	r2, [r3, #0]
	  adcValue2 = adcReading[2];
 8000d56:	4b80      	ldr	r3, [pc, #512]	; (8000f58 <main+0x380>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b82      	ldr	r3, [pc, #520]	; (8000f68 <main+0x390>)
 8000d5e:	601a      	str	r2, [r3, #0]
	  adcValue3 = adcReading[3];
 8000d60:	4b7d      	ldr	r3, [pc, #500]	; (8000f58 <main+0x380>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b81      	ldr	r3, [pc, #516]	; (8000f6c <main+0x394>)
 8000d68:	601a      	str	r2, [r3, #0]
	  adcValue4 = adcReading[4];
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	; (8000f58 <main+0x380>)
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <main+0x398>)
 8000d72:	601a      	str	r2, [r3, #0]
	  adcValue5 = adcReading[5];
 8000d74:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <main+0x380>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	; (8000f74 <main+0x39c>)
 8000d7c:	601a      	str	r2, [r3, #0]

	  batteryVoltage = ((adcValue0 / 4096.0) * 3.3) * 21 ;
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <main+0x388>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fb36 	bl	80003f4 <__aeabi_i2d>
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b7a      	ldr	r3, [pc, #488]	; (8000f78 <main+0x3a0>)
 8000d8e:	f7ff fcc5 	bl	800071c <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	a35d      	add	r3, pc, #372	; (adr r3, 8000f10 <main+0x338>)
 8000d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da0:	f7ff fb92 	bl	80004c8 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	4b72      	ldr	r3, [pc, #456]	; (8000f7c <main+0x3a4>)
 8000db2:	f7ff fb89 	bl	80004c8 <__aeabi_dmul>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f7ff fe45 	bl	8000a4c <__aeabi_d2f>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <main+0x3a8>)
 8000dc6:	6013      	str	r3, [r2, #0]
	  inputVoltage = ((adcValue1 / 4096.0) * 3.3) * 21 ;
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <main+0x38c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fb11 	bl	80003f4 <__aeabi_i2d>
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b68      	ldr	r3, [pc, #416]	; (8000f78 <main+0x3a0>)
 8000dd8:	f7ff fca0 	bl	800071c <__aeabi_ddiv>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	a34a      	add	r3, pc, #296	; (adr r3, 8000f10 <main+0x338>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fb6d 	bl	80004c8 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <main+0x3a4>)
 8000dfc:	f7ff fb64 	bl	80004c8 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fe20 	bl	8000a4c <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a5d      	ldr	r2, [pc, #372]	; (8000f84 <main+0x3ac>)
 8000e10:	6013      	str	r3, [r2, #0]
	  ctVoltage = ((adcValue3 / 4096.0) * 3.3) * 21 ;
 8000e12:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <main+0x394>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff faec 	bl	80003f4 <__aeabi_i2d>
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <main+0x3a0>)
 8000e22:	f7ff fc7b 	bl	800071c <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	a338      	add	r3, pc, #224	; (adr r3, 8000f10 <main+0x338>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fb48 	bl	80004c8 <__aeabi_dmul>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <main+0x3a4>)
 8000e46:	f7ff fb3f 	bl	80004c8 <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff fdfb 	bl	8000a4c <__aeabi_d2f>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <main+0x3b0>)
 8000e5a:	6013      	str	r3, [r2, #0]

	  temperature1 = ((adcValue4 / 4096) * 3.3) * 100;
 8000e5c:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <main+0x398>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da01      	bge.n	8000e68 <main+0x290>
 8000e64:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e68:	131b      	asrs	r3, r3, #12
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fac2 	bl	80003f4 <__aeabi_i2d>
 8000e70:	a327      	add	r3, pc, #156	; (adr r3, 8000f10 <main+0x338>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fb27 	bl	80004c8 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <main+0x3b4>)
 8000e88:	f7ff fb1e 	bl	80004c8 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fdda 	bl	8000a4c <__aeabi_d2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	; (8000f90 <main+0x3b8>)
 8000e9c:	6013      	str	r3, [r2, #0]
	  temperature2 = ((adcValue5 / 4096) * 3.3) * 100;
 8000e9e:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <main+0x39c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da01      	bge.n	8000eaa <main+0x2d2>
 8000ea6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000eaa:	131b      	asrs	r3, r3, #12
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff faa1 	bl	80003f4 <__aeabi_i2d>
 8000eb2:	a317      	add	r3, pc, #92	; (adr r3, 8000f10 <main+0x338>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fb06 	bl	80004c8 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <main+0x3b4>)
 8000eca:	f7ff fafd 	bl	80004c8 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fdb9 	bl	8000a4c <__aeabi_d2f>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <main+0x3bc>)
 8000ede:	6013      	str	r3, [r2, #0]
		  inverterMode = 0;
	  }
	  */

	  // Decide Mode to be used
	  inverterMode = 1;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <main+0x3c0>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

	  // If Charging Mode is used
	  if (inverterMode == 0)
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <main+0x3c0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 80a3 	bne.w	8001036 <main+0x45e>
	  {
		  // Turn off inverter mode mosfet
		  HAL_GPIO_WritePin(GPIOB, FORWARD_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4829      	ldr	r0, [pc, #164]	; (8000f9c <main+0x3c4>)
 8000ef6:	f001 ffd5 	bl	8002ea4 <HAL_GPIO_WritePin>

		  // Stop Input Voltage
		  nowInputGateValue = 0;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <main+0x374>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e04e      	b.n	8000fa0 <main+0x3c8>
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	54442d18 	.word	0x54442d18
 8000f0c:	400921fb 	.word	0x400921fb
 8000f10:	66666666 	.word	0x66666666
 8000f14:	400a6666 	.word	0x400a6666
 8000f18:	3fe00000 	.word	0x3fe00000
 8000f1c:	4082c000 	.word	0x4082c000
 8000f20:	200004d4 	.word	0x200004d4
 8000f24:	20000194 	.word	0x20000194
 8000f28:	2000048c 	.word	0x2000048c
 8000f2c:	2000043c 	.word	0x2000043c
 8000f30:	2000011c 	.word	0x2000011c
 8000f34:	20000068 	.word	0x20000068
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	40012c00 	.word	0x40012c00
 8000f40:	20000038 	.word	0x20000038
 8000f44:	2000003c 	.word	0x2000003c
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	20000040 	.word	0x20000040
 8000f50:	40000800 	.word	0x40000800
 8000f54:	20000060 	.word	0x20000060
 8000f58:	20000104 	.word	0x20000104
 8000f5c:	20000164 	.word	0x20000164
 8000f60:	20000048 	.word	0x20000048
 8000f64:	2000004c 	.word	0x2000004c
 8000f68:	20000050 	.word	0x20000050
 8000f6c:	20000054 	.word	0x20000054
 8000f70:	20000058 	.word	0x20000058
 8000f74:	2000005c 	.word	0x2000005c
 8000f78:	40b00000 	.word	0x40b00000
 8000f7c:	40350000 	.word	0x40350000
 8000f80:	20000488 	.word	0x20000488
 8000f84:	200003f4 	.word	0x200003f4
 8000f88:	200003f0 	.word	0x200003f0
 8000f8c:	40590000 	.word	0x40590000
 8000f90:	20000064 	.word	0x20000064
 8000f94:	200004d8 	.word	0x200004d8
 8000f98:	20000034 	.word	0x20000034
 8000f9c:	40010c00 	.word	0x40010c00
		  TIM4->CCR1 = nowInputGateValue;
 8000fa0:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <main+0x4dc>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <main+0x4e0>)
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34

		  // Stop isolated buck converter
		  nowIsolatedBuckValue = 0;
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <main+0x4e4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
		  TIM1->CCR2 = nowIsolatedBuckValue;
 8000fae:	4b43      	ldr	r3, [pc, #268]	; (80010bc <main+0x4e4>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <main+0x4e8>)
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38


		  // Run Boost Converter
		  nowBoostValue = maxBoostValue * 30.0 / 100.0;
 8000fb6:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <main+0x4ec>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fa1a 	bl	80003f4 <__aeabi_i2d>
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <main+0x4f0>)
 8000fc6:	f7ff fa7f 	bl	80004c8 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <main+0x4f4>)
 8000fd8:	f7ff fba0 	bl	800071c <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fd0a 	bl	80009fc <__aeabi_d2iz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a39      	ldr	r2, [pc, #228]	; (80010d0 <main+0x4f8>)
 8000fec:	6013      	str	r3, [r2, #0]
		  TIM3->CCR1 = nowBoostValue;
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <main+0x4f8>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <main+0x4fc>)
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34


		  // Activate charging mode mosfet
		  // if ctVoltage become zero
		  // to prevent short circuit
		  if (ctVoltage == 0)
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <main+0x500>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f04f 0100 	mov.w	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fdb8 	bl	8000b74 <__aeabi_fcmpeq>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <main+0x442>
		  {
			  HAL_GPIO_WritePin(GPIOB, REVERSE_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2108      	movs	r1, #8
 800100e:	4833      	ldr	r0, [pc, #204]	; (80010dc <main+0x504>)
 8001010:	f001 ff48 	bl	8002ea4 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fed5 	bl	8001dc4 <HAL_Delay>
		  }


		  if (ledCounter >= 5000)
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <main+0x508>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001022:	4293      	cmp	r3, r2
 8001024:	dd07      	ble.n	8001036 <main+0x45e>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	482e      	ldr	r0, [pc, #184]	; (80010e4 <main+0x50c>)
 800102c:	f001 ff52 	bl	8002ed4 <HAL_GPIO_TogglePin>
			  ledCounter = 0;
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <main+0x508>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
		  }
	  }

	  // If Inverter Mode is used
	  if (inverterMode == 1)
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <main+0x510>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	f47f ae77 	bne.w	8000d2e <main+0x156>
	  {
		  // Turn off charging mode mosfet
		  HAL_GPIO_WritePin(GPIOB, REVERSE_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2108      	movs	r1, #8
 8001044:	4825      	ldr	r0, [pc, #148]	; (80010dc <main+0x504>)
 8001046:	f001 ff2d 	bl	8002ea4 <HAL_GPIO_WritePin>

		  // Stop Boost Converter
		  nowBoostValue = 0;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <main+0x4f8>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
		  TIM3->CCR1 = nowBoostValue;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <main+0x4f8>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <main+0x4fc>)
 8001056:	635a      	str	r2, [r3, #52]	; 0x34

		  // Run Isolated Buck Converter
		  nowIsolatedBuckValue = maxIsolatedBuckValue / 2;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <main+0x514>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0fda      	lsrs	r2, r3, #31
 800105e:	4413      	add	r3, r2
 8001060:	105b      	asrs	r3, r3, #1
 8001062:	461a      	mov	r2, r3
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <main+0x4e4>)
 8001066:	601a      	str	r2, [r3, #0]
		  TIM1->CCR2 = nowIsolatedBuckValue;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <main+0x4e4>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <main+0x4e8>)
 800106e:	639a      	str	r2, [r3, #56]	; 0x38

		  // Run Switching for Trafo
		  nowTrafoSwitchingValue = maxTrafoSwitchingValue / 2;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <main+0x518>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0fda      	lsrs	r2, r3, #31
 8001076:	4413      	add	r3, r2
 8001078:	105b      	asrs	r3, r3, #1
 800107a:	461a      	mov	r2, r3
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <main+0x51c>)
 800107e:	601a      	str	r2, [r3, #0]
		  TIM1->CCR1 = nowTrafoSwitchingValue;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <main+0x51c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <main+0x4e8>)
 8001086:	635a      	str	r2, [r3, #52]	; 0x34

		  // Activate Forward Mosfet
		  HAL_GPIO_WritePin(GPIOB, FORWARD_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2110      	movs	r1, #16
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <main+0x504>)
 800108e:	f001 ff09 	bl	8002ea4 <HAL_GPIO_WritePin>

		  // Conditioning input voltage

		  if (ledCounter >= 20000)
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <main+0x508>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800109a:	4293      	cmp	r3, r2
 800109c:	f77f ae47 	ble.w	8000d2e <main+0x156>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <main+0x50c>)
 80010a6:	f001 ff15 	bl	8002ed4 <HAL_GPIO_TogglePin>
			  ledCounter = 0;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <main+0x508>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
	  ledCounter += 1;
 80010b0:	e63d      	b.n	8000d2e <main+0x156>
 80010b2:	bf00      	nop
 80010b4:	20000040 	.word	0x20000040
 80010b8:	40000800 	.word	0x40000800
 80010bc:	20000038 	.word	0x20000038
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	20000004 	.word	0x20000004
 80010c8:	403e0000 	.word	0x403e0000
 80010cc:	40590000 	.word	0x40590000
 80010d0:	2000003c 	.word	0x2000003c
 80010d4:	40000400 	.word	0x40000400
 80010d8:	200003f0 	.word	0x200003f0
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	20000060 	.word	0x20000060
 80010e4:	40011000 	.word	0x40011000
 80010e8:	20000034 	.word	0x20000034
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000044 	.word	0x20000044

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	2228      	movs	r2, #40	; 0x28
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fb94 	bl	8004834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001136:	2301      	movs	r3, #1
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001144:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f81e 	bl	8003190 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800115a:	f000 fb7f 	bl	800185c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fa88 	bl	8003690 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001186:	f000 fb69 	bl	800185c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800118a:	2302      	movs	r3, #2
 800118c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800118e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fc00 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011a2:	f000 fb5b 	bl	800185c <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	; 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011c2:	4a3d      	ldr	r2, [pc, #244]	; (80012b8 <MX_ADC1_Init+0x108>)
 80011c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011da:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011dc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011ea:	2206      	movs	r2, #6
 80011ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ee:	4831      	ldr	r0, [pc, #196]	; (80012b4 <MX_ADC1_Init+0x104>)
 80011f0:	f000 fe0c 	bl	8001e0c <HAL_ADC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011fa:	f000 fb2f 	bl	800185c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001206:	2307      	movs	r3, #7
 8001208:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4829      	ldr	r0, [pc, #164]	; (80012b4 <MX_ADC1_Init+0x104>)
 8001210:	f000 ffce 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 fb1f 	bl	800185c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800121e:	2303      	movs	r3, #3
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001222:	2302      	movs	r3, #2
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4822      	ldr	r0, [pc, #136]	; (80012b4 <MX_ADC1_Init+0x104>)
 800122c:	f000 ffc0 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 fb11 	bl	800185c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800123a:	2304      	movs	r3, #4
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800123e:	2303      	movs	r3, #3
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	481b      	ldr	r0, [pc, #108]	; (80012b4 <MX_ADC1_Init+0x104>)
 8001248:	f000 ffb2 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001252:	f000 fb03 	bl	800185c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001256:	2305      	movs	r3, #5
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800125a:	2304      	movs	r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <MX_ADC1_Init+0x104>)
 8001264:	f000 ffa4 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800126e:	f000 faf5 	bl	800185c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001272:	2308      	movs	r3, #8
 8001274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001276:	2305      	movs	r3, #5
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_ADC1_Init+0x104>)
 8001280:	f000 ff96 	bl	80021b0 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800128a:	f000 fae7 	bl	800185c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800128e:	2309      	movs	r3, #9
 8001290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001292:	2306      	movs	r3, #6
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_ADC1_Init+0x104>)
 800129c:	f000 ff88 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80012a6:	f000 fad9 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000164 	.word	0x20000164
 80012b8:	40012400 	.word	0x40012400

080012bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_I2C1_Init+0x50>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MX_I2C1_Init+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_I2C1_Init+0x50>)
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <MX_I2C1_Init+0x58>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_I2C1_Init+0x50>)
 80012da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_I2C1_Init+0x50>)
 80012fa:	f001 fe05 	bl	8002f08 <HAL_I2C_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001304:	f000 faaa 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200000b0 	.word	0x200000b0
 8001310:	40005400 	.word	0x40005400
 8001314:	000186a0 	.word	0x000186a0

08001318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b096      	sub	sp, #88	; 0x58
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2220      	movs	r2, #32
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fa6f 	bl	8004834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <MX_TIM1_Init+0x150>)
 8001358:	4a44      	ldr	r2, [pc, #272]	; (800146c <MX_TIM1_Init+0x154>)
 800135a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <MX_TIM1_Init+0x150>)
 800135e:	2209      	movs	r2, #9
 8001360:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <MX_TIM1_Init+0x150>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 144;
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <MX_TIM1_Init+0x150>)
 800136a:	2290      	movs	r2, #144	; 0x90
 800136c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <MX_TIM1_Init+0x150>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <MX_TIM1_Init+0x150>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <MX_TIM1_Init+0x150>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <MX_TIM1_Init+0x150>)
 8001382:	f002 fbc1 	bl	8003b08 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800138c:	f000 fa66 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800139a:	4619      	mov	r1, r3
 800139c:	4832      	ldr	r0, [pc, #200]	; (8001468 <MX_TIM1_Init+0x150>)
 800139e:	f002 fe0d 	bl	8003fbc <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013a8:	f000 fa58 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ac:	482e      	ldr	r0, [pc, #184]	; (8001468 <MX_TIM1_Init+0x150>)
 80013ae:	f002 fc4d 	bl	8003c4c <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013b8:	f000 fa50 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c8:	4619      	mov	r1, r3
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <MX_TIM1_Init+0x150>)
 80013cc:	f003 f95e 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013d6:	f000 fa41 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	481a      	ldr	r0, [pc, #104]	; (8001468 <MX_TIM1_Init+0x150>)
 8001400:	f002 fd1e 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800140a:	f000 fa27 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	2204      	movs	r2, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_TIM1_Init+0x150>)
 8001418:	f002 fd12 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001422:	f000 fa1b 	bl	800185c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_TIM1_Init+0x150>)
 800144a:	f003 f97d 	bl	8004748 <HAL_TIMEx_ConfigBreakDeadTime>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001454:	f000 fa02 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <MX_TIM1_Init+0x150>)
 800145a:	f000 fb5f 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3758      	adds	r7, #88	; 0x58
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000043c 	.word	0x2000043c
 800146c:	40012c00 	.word	0x40012c00

08001470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <MX_TIM2_Init+0xfc>)
 80014a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <MX_TIM2_Init+0xfc>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <MX_TIM2_Init+0xfc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <MX_TIM2_Init+0xfc>)
 80014b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <MX_TIM2_Init+0xfc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_TIM2_Init+0xfc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c8:	4828      	ldr	r0, [pc, #160]	; (800156c <MX_TIM2_Init+0xfc>)
 80014ca:	f002 fb1d 	bl	8003b08 <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014d4:	f000 f9c2 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <MX_TIM2_Init+0xfc>)
 80014e6:	f002 fd69 	bl	8003fbc <HAL_TIM_ConfigClockSource>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014f0:	f000 f9b4 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f4:	481d      	ldr	r0, [pc, #116]	; (800156c <MX_TIM2_Init+0xfc>)
 80014f6:	f002 fba9 	bl	8003c4c <HAL_TIM_PWM_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001500:	f000 f9ac 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4619      	mov	r1, r3
 8001512:	4816      	ldr	r0, [pc, #88]	; (800156c <MX_TIM2_Init+0xfc>)
 8001514:	f003 f8ba 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800151e:	f000 f99d 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001522:	2360      	movs	r3, #96	; 0x60
 8001524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800152a:	2302      	movs	r3, #2
 800152c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM2_Init+0xfc>)
 800153a:	f002 fc81 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001544:	f000 f98a 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2208      	movs	r2, #8
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM2_Init+0xfc>)
 8001550:	f002 fc76 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800155a:	f000 f97f 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM2_Init+0xfc>)
 8001560:	f000 fadc 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000048c 	.word	0x2000048c

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015a2:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015a8:	2209      	movs	r2, #9
 80015aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 288;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015b4:	f44f 7290 	mov.w	r2, #288	; 0x120
 80015b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015c8:	f002 fa9e 	bl	8003b08 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015d2:	f000 f943 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e0:	4619      	mov	r1, r3
 80015e2:	481c      	ldr	r0, [pc, #112]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015e4:	f002 fcea 	bl	8003fbc <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015ee:	f000 f935 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f2:	4818      	ldr	r0, [pc, #96]	; (8001654 <MX_TIM3_Init+0xe4>)
 80015f4:	f002 fb2a 	bl	8003c4c <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015fe:	f000 f92d 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4619      	mov	r1, r3
 8001610:	4810      	ldr	r0, [pc, #64]	; (8001654 <MX_TIM3_Init+0xe4>)
 8001612:	f003 f83b 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800161c:	f000 f91e 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001628:	2302      	movs	r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_TIM3_Init+0xe4>)
 8001638:	f002 fc02 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001642:	f000 f90b 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_TIM3_Init+0xe4>)
 8001648:	f000 fa68 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800164c:	bf00      	nop
 800164e:	3738      	adds	r7, #56	; 0x38
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000011c 	.word	0x2000011c
 8001658:	40000400 	.word	0x40000400

0800165c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <MX_TIM4_Init+0xe4>)
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <MX_TIM4_Init+0xe8>)
 8001690:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <MX_TIM4_Init+0xe4>)
 8001694:	2247      	movs	r2, #71	; 0x47
 8001696:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <MX_TIM4_Init+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016b2:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016b4:	f002 fa28 	bl	8003b08 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016be:	f000 f8cd 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016d0:	f002 fc74 	bl	8003fbc <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016da:	f000 f8bf 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016e0:	f002 fab4 	bl	8003c4c <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016ea:	f000 f8b7 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <MX_TIM4_Init+0xe4>)
 80016fe:	f002 ffc5 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001708:	f000 f8a8 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001714:	2302      	movs	r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM4_Init+0xe4>)
 8001724:	f002 fb8c 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800172e:	f000 f895 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM4_Init+0xe4>)
 8001734:	f000 f9f2 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000068 	.word	0x20000068
 8001744:	40000800 	.word	0x40000800

08001748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_DMA_Init+0x38>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <MX_DMA_Init+0x38>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_DMA_Init+0x38>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	200b      	movs	r0, #11
 800176c:	f000 fff1 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001770:	200b      	movs	r0, #11
 8001772:	f001 f80a 	bl	800278a <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_GPIO_Init+0xcc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <MX_GPIO_Init+0xcc>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a26      	ldr	r2, [pc, #152]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_GPIO_Init+0xcc>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4815      	ldr	r0, [pc, #84]	; (8001854 <MX_GPIO_Init+0xd0>)
 8001800:	f001 fb50 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REVERSE_Pin|FORWARD_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2118      	movs	r1, #24
 8001808:	4813      	ldr	r0, [pc, #76]	; (8001858 <MX_GPIO_Init+0xd4>)
 800180a:	f001 fb4b 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2302      	movs	r3, #2
 800181e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <MX_GPIO_Init+0xd0>)
 8001828:	f001 f9b8 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : REVERSE_Pin FORWARD_Pin */
  GPIO_InitStruct.Pin = REVERSE_Pin|FORWARD_Pin;
 800182c:	2318      	movs	r3, #24
 800182e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2302      	movs	r3, #2
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_GPIO_Init+0xd4>)
 8001844:	f001 f9aa 	bl	8002b9c <HAL_GPIO_Init>

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40011000 	.word	0x40011000
 8001858:	40010c00 	.word	0x40010c00

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_MspInit+0x5c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6193      	str	r3, [r2, #24]
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_MspInit+0x5c>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_MspInit+0x5c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x5c>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_MspInit+0x60>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_MspInit+0x60>)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a33      	ldr	r2, [pc, #204]	; (80019b4 <HAL_ADC_MspInit+0xe8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d15f      	bne.n	80019ac <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_ADC_MspInit+0xec>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001934:	2339      	movs	r3, #57	; 0x39
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001938:	2303      	movs	r3, #3
 800193a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0318 	add.w	r3, r7, #24
 8001940:	4619      	mov	r1, r3
 8001942:	481e      	ldr	r0, [pc, #120]	; (80019bc <HAL_ADC_MspInit+0xf0>)
 8001944:	f001 f92a 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001948:	2303      	movs	r3, #3
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	4619      	mov	r1, r3
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <HAL_ADC_MspInit+0xf4>)
 8001958:	f001 f920 	bl	8002b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_ADC_MspInit+0xfc>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 8001976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 800197e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001982:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 8001986:	2220      	movs	r2, #32
 8001988:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 8001992:	f000 ff15 	bl	80027c0 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800199c:	f7ff ff5e 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 80019a4:	621a      	str	r2, [r3, #32]
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_ADC_MspInit+0xf8>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40012400 	.word	0x40012400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010800 	.word	0x40010800
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	200003f8 	.word	0x200003f8
 80019c8:	40020008 	.word	0x40020008

080019cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_I2C_MspInit+0x90>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d132      	bne.n	8001a52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <HAL_I2C_MspInit+0x94>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <HAL_I2C_MspInit+0x94>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_I2C_MspInit+0x94>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4812      	ldr	r0, [pc, #72]	; (8001a64 <HAL_I2C_MspInit+0x98>)
 8001a1a:	f001 f8bf 	bl	8002b9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_I2C_MspInit+0x9c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_I2C_MspInit+0x9c>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_I2C_MspInit+0x94>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_I2C_MspInit+0x94>)
 8001a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_I2C_MspInit+0x94>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40005400 	.word	0x40005400
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40010000 	.word	0x40010000

08001a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_TIM_Base_MspInit+0xa0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10c      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a96:	e034      	b.n	8001b02 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d10c      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
}
 8001aba:	e022      	b.n	8001b02 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_TIM_Base_MspInit+0xa8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
}
 8001ade:	e010      	b.n	8001b02 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <HAL_TIM_Base_MspInit+0xac>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10b      	bne.n	8001b02 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_TIM_Base_MspInit+0xa4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40000800 	.word	0x40000800

08001b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a3d      	ldr	r2, [pc, #244]	; (8001c2c <HAL_TIM_MspPostInit+0x110>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d119      	bne.n	8001b70 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4832      	ldr	r0, [pc, #200]	; (8001c34 <HAL_TIM_MspPostInit+0x118>)
 8001b6a:	f001 f817 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b6e:	e058      	b.n	8001c22 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d118      	bne.n	8001bac <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b92:	2306      	movs	r3, #6
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0318 	add.w	r3, r7, #24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4823      	ldr	r0, [pc, #140]	; (8001c34 <HAL_TIM_MspPostInit+0x118>)
 8001ba6:	f000 fff9 	bl	8002b9c <HAL_GPIO_Init>
}
 8001baa:	e03a      	b.n	8001c22 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <HAL_TIM_MspPostInit+0x11c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d118      	bne.n	8001be8 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bce:	2340      	movs	r3, #64	; 0x40
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0318 	add.w	r3, r7, #24
 8001bde:	4619      	mov	r1, r3
 8001be0:	4814      	ldr	r0, [pc, #80]	; (8001c34 <HAL_TIM_MspPostInit+0x118>)
 8001be2:	f000 ffdb 	bl	8002b9c <HAL_GPIO_Init>
}
 8001be6:	e01c      	b.n	8001c22 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM4)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_TIM_MspPostInit+0x120>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d117      	bne.n	8001c22 <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_TIM_MspPostInit+0x114>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2302      	movs	r3, #2
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4808      	ldr	r0, [pc, #32]	; (8001c40 <HAL_TIM_MspPostInit+0x124>)
 8001c1e:	f000 ffbd 	bl	8002b9c <HAL_GPIO_Init>
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40010c00 	.word	0x40010c00

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f000 f87f 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA1_Channel1_IRQHandler+0x10>)
 8001c9a:	f000 fe4b 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200003f8 	.word	0x200003f8

08001ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cda:	f7ff ffe5 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f002 fd85 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ce2:	f7fe ff79 	bl	8000bd8 <main>
  bx lr
 8001ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001cf0:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 8001cf4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001cf8:	200004e0 	.word	0x200004e0

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_Init+0x28>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_Init+0x28>)
 8001d0a:	f043 0310 	orr.w	r3, r3, #16
 8001d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 fd13 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	200f      	movs	r0, #15
 8001d18:	f000 f808 	bl	8001d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff fda4 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fd2b 	bl	80027a6 <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d68:	f000 fcf3 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <HAL_InitTick+0x5c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	20000014 	.word	0x20000014
 8001d88:	20000010 	.word	0x20000010

08001d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_IncTick+0x1c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_IncTick+0x20>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_IncTick+0x20>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	20000014 	.word	0x20000014
 8001dac:	200004dc 	.word	0x200004dc

08001db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <HAL_GetTick+0x10>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	200004dc 	.word	0x200004dc

08001dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff fff0 	bl	8001db0 <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ddc:	d005      	beq.n	8001dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_Delay+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dea:	bf00      	nop
 8001dec:	f7ff ffe0 	bl	8001db0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f7      	bhi.n	8001dec <HAL_Delay+0x28>
  {
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000014 	.word	0x20000014

08001e0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0be      	b.n	8001fac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fd3e 	bl	80018cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 faff 	bl	8002454 <ADC_ConversionStop_Disable>
 8001e56:	4603      	mov	r3, r0
 8001e58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8099 	bne.w	8001f9a <HAL_ADC_Init+0x18e>
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8095 	bne.w	8001f9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e78:	f023 0302 	bic.w	r3, r3, #2
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7b1b      	ldrb	r3, [r3, #12]
 8001e92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea4:	d003      	beq.n	8001eae <HAL_ADC_Init+0xa2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_ADC_Init+0xa8>
 8001eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Init+0xaa>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7d1b      	ldrb	r3, [r3, #20]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d119      	bne.n	8001ef8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7b1b      	ldrb	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	035a      	lsls	r2, r3, #13
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e00b      	b.n	8001ef8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f043 0220 	orr.w	r2, r3, #32
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_ADC_Init+0x1a8>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f28:	d003      	beq.n	8001f32 <HAL_ADC_Init+0x126>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d104      	bne.n	8001f3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	051b      	lsls	r3, r3, #20
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_ADC_Init+0x1ac>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d10b      	bne.n	8001f78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f023 0303 	bic.w	r3, r3, #3
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f76:	e018      	b.n	8001faa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f023 0312 	bic.w	r3, r3, #18
 8001f80:	f043 0210 	orr.w	r2, r3, #16
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f98:	e007      	b.n	8001faa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fb8:	ff1f0efe 	.word	0xff1f0efe

08001fbc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a64      	ldr	r2, [pc, #400]	; (8002164 <HAL_ADC_Start_DMA+0x1a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_ADC_Start_DMA+0x24>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_ADC_Start_DMA+0x1ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d106      	bne.n	8001fee <HAL_ADC_Start_DMA+0x32>
 8001fe0:	4b60      	ldr	r3, [pc, #384]	; (8002164 <HAL_ADC_Start_DMA+0x1a8>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 80b3 	bne.w	8002154 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x40>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0ae      	b.n	800215a <HAL_ADC_Start_DMA+0x19e>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f9cb 	bl	80023a0 <ADC_Enable>
 800200a:	4603      	mov	r3, r0
 800200c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 809a 	bne.w	800214a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_ADC_Start_DMA+0x1ac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d105      	bne.n	8002040 <HAL_ADC_Start_DMA+0x84>
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <HAL_ADC_Start_DMA+0x1a8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d115      	bne.n	800206c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002056:	2b00      	cmp	r3, #0
 8002058:	d026      	beq.n	80020a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002062:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800206a:	e01d      	b.n	80020a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a39      	ldr	r2, [pc, #228]	; (8002164 <HAL_ADC_Start_DMA+0x1a8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_ADC_Start_DMA+0xd0>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a38      	ldr	r2, [pc, #224]	; (8002168 <HAL_ADC_Start_DMA+0x1ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d10d      	bne.n	80020a8 <HAL_ADC_Start_DMA+0xec>
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_ADC_Start_DMA+0x1a8>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f023 0206 	bic.w	r2, r3, #6
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_ADC_Start_DMA+0x1b0>)
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_ADC_Start_DMA+0x1b4>)
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_ADC_Start_DMA+0x1b8>)
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0202 	mvn.w	r2, #2
 80020f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002100:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a18      	ldr	r0, [r3, #32]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	334c      	adds	r3, #76	; 0x4c
 800210c:	4619      	mov	r1, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f000 fbaf 	bl	8002874 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002120:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002124:	d108      	bne.n	8002138 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002134:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002136:	e00f      	b.n	8002158 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002146:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002148:	e006      	b.n	8002158 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002152:	e001      	b.n	8002158 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002158:	7dfb      	ldrb	r3, [r7, #23]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40012400 	.word	0x40012400
 8002168:	40012800 	.word	0x40012800
 800216c:	080024d7 	.word	0x080024d7
 8002170:	08002553 	.word	0x08002553
 8002174:	0800256f 	.word	0x0800256f

08002178 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x20>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0dc      	b.n	800238a <HAL_ADC_ConfigChannel+0x1da>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d81c      	bhi.n	800221a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	221f      	movs	r2, #31
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4019      	ands	r1, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b05      	subs	r3, #5
 800220c:	fa00 f203 	lsl.w	r2, r0, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	; 0x34
 8002218:	e03c      	b.n	8002294 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d81c      	bhi.n	800225c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3b23      	subs	r3, #35	; 0x23
 8002234:	221f      	movs	r2, #31
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	4019      	ands	r1, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b23      	subs	r3, #35	; 0x23
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
 800225a:	e01b      	b.n	8002294 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b41      	subs	r3, #65	; 0x41
 800226e:	221f      	movs	r2, #31
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	4019      	ands	r1, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	3b41      	subs	r3, #65	; 0x41
 8002288:	fa00 f203 	lsl.w	r2, r0, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b09      	cmp	r3, #9
 800229a:	d91c      	bls.n	80022d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68d9      	ldr	r1, [r3, #12]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	2207      	movs	r2, #7
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6898      	ldr	r0, [r3, #8]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	3b1e      	subs	r3, #30
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	e019      	b.n	800230a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4019      	ands	r1, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6898      	ldr	r0, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b10      	cmp	r3, #16
 8002310:	d003      	beq.n	800231a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002316:	2b11      	cmp	r3, #17
 8002318:	d132      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_ADC_ConfigChannel+0x1e4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d125      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d126      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002340:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d11a      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_ADC_ConfigChannel+0x1e8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_ADC_ConfigChannel+0x1ec>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9a      	lsrs	r2, r3, #18
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x1b2>
 800236e:	e007      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012400 	.word	0x40012400
 8002398:	2000000c 	.word	0x2000000c
 800239c:	431bde83 	.word	0x431bde83

080023a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d040      	beq.n	8002440 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <ADC_Enable+0xac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <ADC_Enable+0xb0>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023dc:	e002      	b.n	80023e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ea:	f7ff fce1 	bl	8001db0 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023f0:	e01f      	b.n	8002432 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023f2:	f7ff fcdd 	bl	8001db0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d918      	bls.n	8002432 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d011      	beq.n	8002432 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d1d8      	bne.n	80023f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000000c 	.word	0x2000000c
 8002450:	431bde83 	.word	0x431bde83

08002454 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12e      	bne.n	80024cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800247e:	f7ff fc97 	bl	8001db0 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002484:	e01b      	b.n	80024be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002486:	f7ff fc93 	bl	8001db0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d914      	bls.n	80024be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10d      	bne.n	80024be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d0dc      	beq.n	8002486 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d127      	bne.n	8002540 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002506:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800250a:	d115      	bne.n	8002538 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002510:	2b00      	cmp	r3, #0
 8002512:	d111      	bne.n	8002538 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7ff fe1d 	bl	8002178 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800253e:	e004      	b.n	800254a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff fe12 	bl	800218a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fe01 	bl	800219c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4906      	ldr	r1, [pc, #24]	; (800263c <__NVIC_EnableIRQ+0x34>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800271c:	f7ff ff90 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff2d 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff42 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff90 	bl	8002694 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5f 	bl	8002640 <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff35 	bl	8002608 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e043      	b.n	800285e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_DMA_Init+0xa8>)
 80027de:	4413      	add	r3, r2
 80027e0:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_DMA_Init+0xac>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	009a      	lsls	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_DMA_Init+0xb0>)
 80027f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800280a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800280e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	bffdfff8 	.word	0xbffdfff8
 800286c:	cccccccd 	.word	0xcccccccd
 8002870:	40020000 	.word	0x40020000

08002874 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_DMA_Start_IT+0x20>
 8002890:	2302      	movs	r3, #2
 8002892:	e04a      	b.n	800292a <HAL_DMA_Start_IT+0xb6>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d13a      	bne.n	800291c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f938 	bl	8002b40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 020e 	orr.w	r2, r2, #14
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e00f      	b.n	800290a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0204 	bic.w	r2, r2, #4
 80028f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 020a 	orr.w	r2, r2, #10
 8002908:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e005      	b.n	8002928 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002924:	2302      	movs	r3, #2
 8002926:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002928:	7dfb      	ldrb	r3, [r7, #23]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	2204      	movs	r2, #4
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04f      	beq.n	80029fc <HAL_DMA_IRQHandler+0xc8>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04a      	beq.n	80029fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0204 	bic.w	r2, r2, #4
 8002982:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a66      	ldr	r2, [pc, #408]	; (8002b24 <HAL_DMA_IRQHandler+0x1f0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d029      	beq.n	80029e2 <HAL_DMA_IRQHandler+0xae>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_DMA_IRQHandler+0x1f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_IRQHandler+0xaa>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a63      	ldr	r2, [pc, #396]	; (8002b2c <HAL_DMA_IRQHandler+0x1f8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0xa4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a62      	ldr	r2, [pc, #392]	; (8002b30 <HAL_DMA_IRQHandler+0x1fc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d012      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x9e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a60      	ldr	r2, [pc, #384]	; (8002b34 <HAL_DMA_IRQHandler+0x200>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00a      	beq.n	80029cc <HAL_DMA_IRQHandler+0x98>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5f      	ldr	r2, [pc, #380]	; (8002b38 <HAL_DMA_IRQHandler+0x204>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d102      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x92>
 80029c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029c4:	e00e      	b.n	80029e4 <HAL_DMA_IRQHandler+0xb0>
 80029c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ca:	e00b      	b.n	80029e4 <HAL_DMA_IRQHandler+0xb0>
 80029cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029d0:	e008      	b.n	80029e4 <HAL_DMA_IRQHandler+0xb0>
 80029d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029d6:	e005      	b.n	80029e4 <HAL_DMA_IRQHandler+0xb0>
 80029d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029dc:	e002      	b.n	80029e4 <HAL_DMA_IRQHandler+0xb0>
 80029de:	2340      	movs	r3, #64	; 0x40
 80029e0:	e000      	b.n	80029e4 <HAL_DMA_IRQHandler+0xb0>
 80029e2:	2304      	movs	r3, #4
 80029e4:	4a55      	ldr	r2, [pc, #340]	; (8002b3c <HAL_DMA_IRQHandler+0x208>)
 80029e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8094 	beq.w	8002b1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029fa:	e08e      	b.n	8002b1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2202      	movs	r2, #2
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d056      	beq.n	8002aba <HAL_DMA_IRQHandler+0x186>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d051      	beq.n	8002aba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 020a 	bic.w	r2, r2, #10
 8002a32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <HAL_DMA_IRQHandler+0x1f0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d029      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x166>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a37      	ldr	r2, [pc, #220]	; (8002b28 <HAL_DMA_IRQHandler+0x1f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x162>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <HAL_DMA_IRQHandler+0x1f8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01a      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x15c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <HAL_DMA_IRQHandler+0x1fc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d012      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x156>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <HAL_DMA_IRQHandler+0x200>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x150>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <HAL_DMA_IRQHandler+0x204>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <HAL_DMA_IRQHandler+0x14a>
 8002a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a7c:	e00e      	b.n	8002a9c <HAL_DMA_IRQHandler+0x168>
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a82:	e00b      	b.n	8002a9c <HAL_DMA_IRQHandler+0x168>
 8002a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a88:	e008      	b.n	8002a9c <HAL_DMA_IRQHandler+0x168>
 8002a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8e:	e005      	b.n	8002a9c <HAL_DMA_IRQHandler+0x168>
 8002a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a94:	e002      	b.n	8002a9c <HAL_DMA_IRQHandler+0x168>
 8002a96:	2320      	movs	r3, #32
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_IRQHandler+0x168>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_DMA_IRQHandler+0x208>)
 8002a9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d034      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ab8:	e02f      	b.n	8002b1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2208      	movs	r2, #8
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d028      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x1e8>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 020e 	bic.w	r2, r2, #14
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
    }
  }
  return;
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
}
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40020008 	.word	0x40020008
 8002b28:	4002001c 	.word	0x4002001c
 8002b2c:	40020030 	.word	0x40020030
 8002b30:	40020044 	.word	0x40020044
 8002b34:	40020058 	.word	0x40020058
 8002b38:	4002006c 	.word	0x4002006c
 8002b3c:	40020000 	.word	0x40020000

08002b40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d108      	bne.n	8002b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b7e:	e007      	b.n	8002b90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b08b      	sub	sp, #44	; 0x2c
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	e169      	b.n	8002e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8158 	bne.w	8002e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a9a      	ldr	r2, [pc, #616]	; (8002e3c <HAL_GPIO_Init+0x2a0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d05e      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a98      	ldr	r2, [pc, #608]	; (8002e3c <HAL_GPIO_Init+0x2a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d875      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bde:	4a98      	ldr	r2, [pc, #608]	; (8002e40 <HAL_GPIO_Init+0x2a4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d058      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002be4:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <HAL_GPIO_Init+0x2a4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d86f      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bea:	4a96      	ldr	r2, [pc, #600]	; (8002e44 <HAL_GPIO_Init+0x2a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d052      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bf0:	4a94      	ldr	r2, [pc, #592]	; (8002e44 <HAL_GPIO_Init+0x2a8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d869      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bf6:	4a94      	ldr	r2, [pc, #592]	; (8002e48 <HAL_GPIO_Init+0x2ac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04c      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bfc:	4a92      	ldr	r2, [pc, #584]	; (8002e48 <HAL_GPIO_Init+0x2ac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d863      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c02:	4a92      	ldr	r2, [pc, #584]	; (8002e4c <HAL_GPIO_Init+0x2b0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d046      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002c08:	4a90      	ldr	r2, [pc, #576]	; (8002e4c <HAL_GPIO_Init+0x2b0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d85d      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d82a      	bhi.n	8002c68 <HAL_GPIO_Init+0xcc>
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d859      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_GPIO_Init+0x80>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c97 	.word	0x08002c97
 8002c20:	08002c71 	.word	0x08002c71
 8002c24:	08002c83 	.word	0x08002c83
 8002c28:	08002cc5 	.word	0x08002cc5
 8002c2c:	08002ccb 	.word	0x08002ccb
 8002c30:	08002ccb 	.word	0x08002ccb
 8002c34:	08002ccb 	.word	0x08002ccb
 8002c38:	08002ccb 	.word	0x08002ccb
 8002c3c:	08002ccb 	.word	0x08002ccb
 8002c40:	08002ccb 	.word	0x08002ccb
 8002c44:	08002ccb 	.word	0x08002ccb
 8002c48:	08002ccb 	.word	0x08002ccb
 8002c4c:	08002ccb 	.word	0x08002ccb
 8002c50:	08002ccb 	.word	0x08002ccb
 8002c54:	08002ccb 	.word	0x08002ccb
 8002c58:	08002ccb 	.word	0x08002ccb
 8002c5c:	08002ccb 	.word	0x08002ccb
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c8d 	.word	0x08002c8d
 8002c68:	4a79      	ldr	r2, [pc, #484]	; (8002e50 <HAL_GPIO_Init+0x2b4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6e:	e02c      	b.n	8002cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e029      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	623b      	str	r3, [r7, #32]
          break;
 8002c80:	e024      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	3308      	adds	r3, #8
 8002c88:	623b      	str	r3, [r7, #32]
          break;
 8002c8a:	e01f      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	330c      	adds	r3, #12
 8002c92:	623b      	str	r3, [r7, #32]
          break;
 8002c94:	e01a      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	623b      	str	r3, [r7, #32]
          break;
 8002ca2:	e013      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cac:	2308      	movs	r3, #8
 8002cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	611a      	str	r2, [r3, #16]
          break;
 8002cb6:	e009      	b.n	8002ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	615a      	str	r2, [r3, #20]
          break;
 8002cc2:	e003      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          break;
 8002cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d801      	bhi.n	8002cd6 <HAL_GPIO_Init+0x13a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_Init+0x13e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2bff      	cmp	r3, #255	; 0xff
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_GPIO_Init+0x14c>
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0x152>
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3b08      	subs	r3, #8
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80b1 	beq.w	8002e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d34:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <HAL_GPIO_Init+0x2bc>)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_GPIO_Init+0x2c0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <HAL_GPIO_Init+0x1ec>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3f      	ldr	r2, [pc, #252]	; (8002e60 <HAL_GPIO_Init+0x2c4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00d      	beq.n	8002d84 <HAL_GPIO_Init+0x1e8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <HAL_GPIO_Init+0x2c8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <HAL_GPIO_Init+0x1e4>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <HAL_GPIO_Init+0x2cc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_GPIO_Init+0x1e0>
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e004      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e002      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	4093      	lsls	r3, r2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d9a:	492f      	ldr	r1, [pc, #188]	; (8002e58 <HAL_GPIO_Init+0x2bc>)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	492c      	ldr	r1, [pc, #176]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4928      	ldr	r1, [pc, #160]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4922      	ldr	r1, [pc, #136]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	491e      	ldr	r1, [pc, #120]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4918      	ldr	r1, [pc, #96]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4914      	ldr	r1, [pc, #80]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d021      	beq.n	8002e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e021      	b.n	8002e7e <HAL_GPIO_Init+0x2e2>
 8002e3a:	bf00      	nop
 8002e3c:	10320000 	.word	0x10320000
 8002e40:	10310000 	.word	0x10310000
 8002e44:	10220000 	.word	0x10220000
 8002e48:	10210000 	.word	0x10210000
 8002e4c:	10120000 	.word	0x10120000
 8002e50:	10110000 	.word	0x10110000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40010800 	.word	0x40010800
 8002e60:	40010c00 	.word	0x40010c00
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4909      	ldr	r1, [pc, #36]	; (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f ae8e 	bne.w	8002bb0 <HAL_GPIO_Init+0x14>
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	372c      	adds	r7, #44	; 0x2c
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	43d9      	mvns	r1, r3
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	611a      	str	r2, [r3, #16]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e12b      	b.n	8003172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fd4c 	bl	80019cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f000 fce4 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a81      	ldr	r2, [pc, #516]	; (800317c <HAL_I2C_Init+0x274>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d807      	bhi.n	8002f8c <HAL_I2C_Init+0x84>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a80      	ldr	r2, [pc, #512]	; (8003180 <HAL_I2C_Init+0x278>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e006      	b.n	8002f9a <HAL_I2C_Init+0x92>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a7d      	ldr	r2, [pc, #500]	; (8003184 <HAL_I2C_Init+0x27c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0e7      	b.n	8003172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a78      	ldr	r2, [pc, #480]	; (8003188 <HAL_I2C_Init+0x280>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9b      	lsrs	r3, r3, #18
 8002fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	; (800317c <HAL_I2C_Init+0x274>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d802      	bhi.n	8002fdc <HAL_I2C_Init+0xd4>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	e009      	b.n	8002ff0 <HAL_I2C_Init+0xe8>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <HAL_I2C_Init+0x284>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	495c      	ldr	r1, [pc, #368]	; (800317c <HAL_I2C_Init+0x274>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d819      	bhi.n	8003044 <HAL_I2C_Init+0x13c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e59      	subs	r1, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fbb1 f3f3 	udiv	r3, r1, r3
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003024:	400b      	ands	r3, r1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_I2C_Init+0x138>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e59      	subs	r1, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fbb1 f3f3 	udiv	r3, r1, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	e051      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003040:	2304      	movs	r3, #4
 8003042:	e04f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <HAL_I2C_Init+0x168>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e012      	b.n	8003096 <HAL_I2C_Init+0x18e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Init+0x196>
 800309a:	2301      	movs	r3, #1
 800309c:	e022      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <HAL_I2C_Init+0x1bc>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e58      	subs	r0, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	440b      	add	r3, r1
 80030b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Init+0x1dc>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	0099      	lsls	r1, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6809      	ldr	r1, [r1, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6911      	ldr	r1, [r2, #16]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	000186a0 	.word	0x000186a0
 8003180:	001e847f 	.word	0x001e847f
 8003184:	003d08ff 	.word	0x003d08ff
 8003188:	431bde83 	.word	0x431bde83
 800318c:	10624dd3 	.word	0x10624dd3

08003190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e26c      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b0:	4b92      	ldr	r3, [pc, #584]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d00c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031bc:	4b8f      	ldr	r3, [pc, #572]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d112      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
 80031c8:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d10b      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d06c      	beq.n	80032bc <HAL_RCC_OscConfig+0x12c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d168      	bne.n	80032bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e246      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x76>
 80031f8:	4b80      	ldr	r3, [pc, #512]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7f      	ldr	r2, [pc, #508]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e02e      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b7b      	ldr	r3, [pc, #492]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7a      	ldr	r2, [pc, #488]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b78      	ldr	r3, [pc, #480]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a77      	ldr	r2, [pc, #476]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0xbc>
 8003232:	4b72      	ldr	r3, [pc, #456]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a71      	ldr	r2, [pc, #452]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 800324c:	4b6b      	ldr	r3, [pc, #428]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6a      	ldr	r2, [pc, #424]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b68      	ldr	r3, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fda0 	bl	8001db0 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fd9c 	bl	8001db0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1fa      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xe4>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fd8c 	bl	8001db0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fd88 	bl	8001db0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1e6      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x10c>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ca:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x18c>
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b43      	ldr	r3, [pc, #268]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x176>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1ba      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4939      	ldr	r1, [pc, #228]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x270>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe fd41 	bl	8001db0 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe fd3d 	bl	8001db0 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e19b      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4927      	ldr	r1, [pc, #156]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_RCC_OscConfig+0x270>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fd20 	bl	8001db0 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe fd1c 	bl	8001db0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e17a      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d03a      	beq.n	8003414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d019      	beq.n	80033da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ac:	f7fe fd00 	bl	8001db0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe fcfc 	bl	8001db0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e15a      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_OscConfig+0x26c>)
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f000 fac4 	bl	8003960 <RCC_Delay>
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe fce6 	bl	8001db0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e6:	e00f      	b.n	8003408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe fce2 	bl	8001db0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d908      	bls.n	8003408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e140      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	42420000 	.word	0x42420000
 8003404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b9e      	ldr	r3, [pc, #632]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e9      	bne.n	80033e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a6 	beq.w	800356e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b97      	ldr	r3, [pc, #604]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b94      	ldr	r3, [pc, #592]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	4a93      	ldr	r2, [pc, #588]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343c:	61d3      	str	r3, [r2, #28]
 800343e:	4b91      	ldr	r3, [pc, #580]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b8e      	ldr	r3, [pc, #568]	; (8003688 <HAL_RCC_OscConfig+0x4f8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b8b      	ldr	r3, [pc, #556]	; (8003688 <HAL_RCC_OscConfig+0x4f8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a8a      	ldr	r2, [pc, #552]	; (8003688 <HAL_RCC_OscConfig+0x4f8>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7fe fca3 	bl	8001db0 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fe fc9f 	bl	8001db0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b64      	cmp	r3, #100	; 0x64
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0fd      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b81      	ldr	r3, [pc, #516]	; (8003688 <HAL_RCC_OscConfig+0x4f8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x312>
 8003494:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4a7a      	ldr	r2, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	e02d      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x334>
 80034aa:	4b76      	ldr	r3, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a75      	ldr	r2, [pc, #468]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	4b73      	ldr	r3, [pc, #460]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a72      	ldr	r2, [pc, #456]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	e01c      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x356>
 80034cc:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a6c      	ldr	r2, [pc, #432]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a69      	ldr	r2, [pc, #420]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	e00b      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a66      	ldr	r2, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fe fc53 	bl	8001db0 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fe fc4f 	bl	8001db0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0ab      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	4b57      	ldr	r3, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ee      	beq.n	800350e <HAL_RCC_OscConfig+0x37e>
 8003530:	e014      	b.n	800355c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fe fc3d 	bl	8001db0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fc39 	bl	8001db0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e095      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ee      	bne.n	800353a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b48      	ldr	r3, [pc, #288]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4a47      	ldr	r2, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8081 	beq.w	800367a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d061      	beq.n	8003648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d146      	bne.n	800361a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCC_OscConfig+0x4fc>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fe fc0d 	bl	8001db0 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fe fc09 	bl	8001db0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e067      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ac:	4b35      	ldr	r3, [pc, #212]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	492d      	ldr	r1, [pc, #180]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a19      	ldr	r1, [r3, #32]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	430b      	orrs	r3, r1
 80035e6:	4927      	ldr	r1, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ec:	4b27      	ldr	r3, [pc, #156]	; (800368c <HAL_RCC_OscConfig+0x4fc>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fe fbdd 	bl	8001db0 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fe fbd9 	bl	8001db0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e037      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x46a>
 8003618:	e02f      	b.n	800367a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_RCC_OscConfig+0x4fc>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fbc6 	bl	8001db0 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fe fbc2 	bl	8001db0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e020      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x498>
 8003646:	e018      	b.n	800367a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e013      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	429a      	cmp	r2, r3
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
 800368c:	42420060 	.word	0x42420060

08003690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0d0      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4965      	ldr	r1, [pc, #404]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800370e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d040      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d115      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e073      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4936      	ldr	r1, [pc, #216]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe fb16 	bl	8001db0 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe fb12 	bl	8001db0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e053      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d210      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4922      	ldr	r1, [pc, #136]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1cc>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1d0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fa74 	bl	8001d2c <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40022000 	.word	0x40022000
 8003854:	40021000 	.word	0x40021000
 8003858:	08005870 	.word	0x08005870
 800385c:	2000000c 	.word	0x2000000c
 8003860:	20000010 	.word	0x20000010

08003864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b490      	push	{r4, r7}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb0>)
 800386c:	1d3c      	adds	r4, r7, #4
 800386e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003874:	f240 2301 	movw	r3, #513	; 0x201
 8003878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x40>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x46>
 80038a2:	e02d      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a6:	623b      	str	r3, [r7, #32]
      break;
 80038a8:	e02d      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	0c9b      	lsrs	r3, r3, #18
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038b6:	4413      	add	r3, r2
 80038b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	0c5b      	lsrs	r3, r3, #17
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038d6:	4413      	add	r3, r2
 80038d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e2:	fb02 f203 	mul.w	r2, r2, r3
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	e004      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	623b      	str	r3, [r7, #32]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003902:	623b      	str	r3, [r7, #32]
      break;
 8003904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003906:	6a3b      	ldr	r3, [r7, #32]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	; 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bc90      	pop	{r4, r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	08005860 	.word	0x08005860
 8003918:	40021000 	.word	0x40021000
 800391c:	007a1200 	.word	0x007a1200
 8003920:	003d0900 	.word	0x003d0900

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	2000000c 	.word	0x2000000c

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08005880 	.word	0x08005880

08003960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCC_Delay+0x34>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <RCC_Delay+0x38>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a5b      	lsrs	r3, r3, #9
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800397c:	bf00      	nop
  }
  while (Delay --);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	60fa      	str	r2, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <RCC_Delay+0x1c>
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	2000000c 	.word	0x2000000c
 8003998:	10624dd3 	.word	0x10624dd3

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	61d3      	str	r3, [r2, #28]
 80039d4:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f0:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7fe f9d8 	bl	8001db0 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fe f9d4 	bl	8001db0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e06d      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d027      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a40:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe f9a3 	bl	8001db0 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fe f99f 	bl	8001db0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4917      	ldr	r1, [pc, #92]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
 8003b04:	42420440 	.word	0x42420440

08003b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e041      	b.n	8003b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd ff9c 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 fafc 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e03a      	b.n	8003c36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_TIM_Base_Start_IT+0x98>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x58>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d009      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x58>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x58>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d111      	bne.n	8003c24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d010      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	e007      	b.n	8003c34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40000800 	.word	0x40000800

08003c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e041      	b.n	8003ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f839 	bl	8003cea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f000 fa5a 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_TIM_PWM_Start+0x24>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e022      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d109      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x3e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e015      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d109      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x58>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e008      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e05e      	b.n	8003e2c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x82>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7c:	e013      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x92>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fc48 	bl	8004644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_TIM_PWM_Start+0x138>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_TIM_PWM_Start+0x138>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_TIM_PWM_Start+0xfa>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d009      	beq.n	8003df6 <HAL_TIM_PWM_Start+0xfa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_TIM_PWM_Start+0x13c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_TIM_PWM_Start+0xfa>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <HAL_TIM_PWM_Start+0x140>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d111      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b06      	cmp	r3, #6
 8003e06:	d010      	beq.n	8003e2a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	e007      	b.n	8003e2a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800

08003e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e0ac      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	f200 809f 	bhi.w	8003fa8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003ea5 	.word	0x08003ea5
 8003e74:	08003fa9 	.word	0x08003fa9
 8003e78:	08003fa9 	.word	0x08003fa9
 8003e7c:	08003fa9 	.word	0x08003fa9
 8003e80:	08003ee5 	.word	0x08003ee5
 8003e84:	08003fa9 	.word	0x08003fa9
 8003e88:	08003fa9 	.word	0x08003fa9
 8003e8c:	08003fa9 	.word	0x08003fa9
 8003e90:	08003f27 	.word	0x08003f27
 8003e94:	08003fa9 	.word	0x08003fa9
 8003e98:	08003fa9 	.word	0x08003fa9
 8003e9c:	08003fa9 	.word	0x08003fa9
 8003ea0:	08003f67 	.word	0x08003f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f9ac 	bl	8004208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0208 	orr.w	r2, r2, #8
 8003ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	619a      	str	r2, [r3, #24]
      break;
 8003ee2:	e062      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f9f2 	bl	80042d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6999      	ldr	r1, [r3, #24]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	619a      	str	r2, [r3, #24]
      break;
 8003f24:	e041      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fa3b 	bl	80043a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0208 	orr.w	r2, r2, #8
 8003f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0204 	bic.w	r2, r2, #4
 8003f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]
      break;
 8003f64:	e021      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fa85 	bl	800447c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69d9      	ldr	r1, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	61da      	str	r2, [r3, #28]
      break;
 8003fa6:	e000      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_ConfigClockSource+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0b3      	b.n	800413c <HAL_TIM_ConfigClockSource+0x180>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400c:	d03e      	beq.n	800408c <HAL_TIM_ConfigClockSource+0xd0>
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	f200 8087 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x168>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	f000 8085 	beq.w	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	d87f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 8004024:	2b70      	cmp	r3, #112	; 0x70
 8004026:	d01a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0xa2>
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d87b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 800402c:	2b60      	cmp	r3, #96	; 0x60
 800402e:	d050      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x116>
 8004030:	2b60      	cmp	r3, #96	; 0x60
 8004032:	d877      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d03c      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0xf6>
 8004038:	2b50      	cmp	r3, #80	; 0x50
 800403a:	d873      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d058      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x136>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d86f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 8004044:	2b30      	cmp	r3, #48	; 0x30
 8004046:	d064      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x156>
 8004048:	2b30      	cmp	r3, #48	; 0x30
 800404a:	d86b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d060      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x156>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d867      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d05c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x156>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d05a      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800405c:	e062      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f000 faca 	bl	8004606 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004080:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	609a      	str	r2, [r3, #8]
      break;
 800408a:	e04e      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f000 fab3 	bl	8004606 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ae:	609a      	str	r2, [r3, #8]
      break;
 80040b0:	e03b      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 fa2a 	bl	8004518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2150      	movs	r1, #80	; 0x50
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fa81 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 80040d0:	e02b      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	461a      	mov	r2, r3
 80040e0:	f000 fa48 	bl	8004574 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2160      	movs	r1, #96	; 0x60
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fa71 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 80040f0:	e01b      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 fa0a 	bl	8004518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fa61 	bl	80045d2 <TIM_ITRx_SetConfig>
      break;
 8004110:	e00b      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f000 fa58 	bl	80045d2 <TIM_ITRx_SetConfig>
        break;
 8004122:	e002      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004128:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a29      	ldr	r2, [pc, #164]	; (80041fc <TIM_Base_SetConfig+0xb8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00b      	beq.n	8004174 <TIM_Base_SetConfig+0x30>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d007      	beq.n	8004174 <TIM_Base_SetConfig+0x30>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a26      	ldr	r2, [pc, #152]	; (8004200 <TIM_Base_SetConfig+0xbc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_Base_SetConfig+0x30>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a25      	ldr	r2, [pc, #148]	; (8004204 <TIM_Base_SetConfig+0xc0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d108      	bne.n	8004186 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <TIM_Base_SetConfig+0xb8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0x62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <TIM_Base_SetConfig+0xbc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0x62>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a18      	ldr	r2, [pc, #96]	; (8004204 <TIM_Base_SetConfig+0xc0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a07      	ldr	r2, [pc, #28]	; (80041fc <TIM_Base_SetConfig+0xb8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800

08004208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 0302 	bic.w	r3, r3, #2
 8004250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <TIM_OC1_SetConfig+0xc8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10c      	bne.n	800427e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0308 	bic.w	r3, r3, #8
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <TIM_OC1_SetConfig+0xc8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00

080042d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0320 	bic.w	r3, r3, #32
 800431e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <TIM_OC2_SetConfig+0xd0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10d      	bne.n	8004350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <TIM_OC2_SetConfig+0xd0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d113      	bne.n	8004380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800435e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	40012c00 	.word	0x40012c00

080043a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <TIM_OC3_SetConfig+0xd0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10d      	bne.n	8004422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800440c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a14      	ldr	r2, [pc, #80]	; (8004478 <TIM_OC3_SetConfig+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d113      	bne.n	8004452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00

0800447c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <TIM_OC4_SetConfig+0x98>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d109      	bne.n	80044f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	40012c00 	.word	0x40012c00

08004518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0201 	bic.w	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 030a 	bic.w	r3, r3, #10
 8004554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0210 	bic.w	r2, r3, #16
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	031b      	lsls	r3, r3, #12
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f043 0307 	orr.w	r3, r3, #7
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004620:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	021a      	lsls	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	431a      	orrs	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4313      	orrs	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	609a      	str	r2, [r3, #8]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2201      	movs	r2, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	43db      	mvns	r3, r3
 8004666:	401a      	ands	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e046      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004760:	2302      	movs	r3, #2
 8004762:	e03d      	b.n	80047e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
	...

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	2600      	movs	r6, #0
 80047f0:	4d0c      	ldr	r5, [pc, #48]	; (8004824 <__libc_init_array+0x38>)
 80047f2:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f4:	1b64      	subs	r4, r4, r5
 80047f6:	10a4      	asrs	r4, r4, #2
 80047f8:	42a6      	cmp	r6, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	f001 f822 	bl	8005844 <_init>
 8004800:	2600      	movs	r6, #0
 8004802:	4d0a      	ldr	r5, [pc, #40]	; (800482c <__libc_init_array+0x40>)
 8004804:	4c0a      	ldr	r4, [pc, #40]	; (8004830 <__libc_init_array+0x44>)
 8004806:	1b64      	subs	r4, r4, r5
 8004808:	10a4      	asrs	r4, r4, #2
 800480a:	42a6      	cmp	r6, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f855 3b04 	ldr.w	r3, [r5], #4
 8004814:	4798      	blx	r3
 8004816:	3601      	adds	r6, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f855 3b04 	ldr.w	r3, [r5], #4
 800481e:	4798      	blx	r3
 8004820:	3601      	adds	r6, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	08005a60 	.word	0x08005a60
 8004828:	08005a60 	.word	0x08005a60
 800482c:	08005a60 	.word	0x08005a60
 8004830:	08005a64 	.word	0x08005a64

08004834 <memset>:
 8004834:	4603      	mov	r3, r0
 8004836:	4402      	add	r2, r0
 8004838:	4293      	cmp	r3, r2
 800483a:	d100      	bne.n	800483e <memset+0xa>
 800483c:	4770      	bx	lr
 800483e:	f803 1b01 	strb.w	r1, [r3], #1
 8004842:	e7f9      	b.n	8004838 <memset+0x4>

08004844 <sin>:
 8004844:	b530      	push	{r4, r5, lr}
 8004846:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <sin+0x84>)
 8004848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800484c:	4293      	cmp	r3, r2
 800484e:	b087      	sub	sp, #28
 8004850:	dc06      	bgt.n	8004860 <sin+0x1c>
 8004852:	2300      	movs	r3, #0
 8004854:	2200      	movs	r2, #0
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2300      	movs	r3, #0
 800485a:	f000 fe31 	bl	80054c0 <__kernel_sin>
 800485e:	e006      	b.n	800486e <sin+0x2a>
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <sin+0x88>)
 8004862:	4293      	cmp	r3, r2
 8004864:	dd05      	ble.n	8004872 <sin+0x2e>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	f7fb fc75 	bl	8000158 <__aeabi_dsub>
 800486e:	b007      	add	sp, #28
 8004870:	bd30      	pop	{r4, r5, pc}
 8004872:	aa02      	add	r2, sp, #8
 8004874:	f000 f82c 	bl	80048d0 <__ieee754_rem_pio2>
 8004878:	f000 0003 	and.w	r0, r0, #3
 800487c:	2801      	cmp	r0, #1
 800487e:	d009      	beq.n	8004894 <sin+0x50>
 8004880:	2802      	cmp	r0, #2
 8004882:	d00e      	beq.n	80048a2 <sin+0x5e>
 8004884:	b9c0      	cbnz	r0, 80048b8 <sin+0x74>
 8004886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800488a:	2301      	movs	r3, #1
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004892:	e7e2      	b.n	800485a <sin+0x16>
 8004894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489c:	f000 fa08 	bl	8004cb0 <__kernel_cos>
 80048a0:	e7e5      	b.n	800486e <sin+0x2a>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ae:	f000 fe07 	bl	80054c0 <__kernel_sin>
 80048b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80048b6:	e7da      	b.n	800486e <sin+0x2a>
 80048b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c0:	f000 f9f6 	bl	8004cb0 <__kernel_cos>
 80048c4:	e7f5      	b.n	80048b2 <sin+0x6e>
 80048c6:	bf00      	nop
 80048c8:	3fe921fb 	.word	0x3fe921fb
 80048cc:	7fefffff 	.word	0x7fefffff

080048d0 <__ieee754_rem_pio2>:
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	4614      	mov	r4, r2
 80048d6:	4ac4      	ldr	r2, [pc, #784]	; (8004be8 <__ieee754_rem_pio2+0x318>)
 80048d8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80048dc:	b08d      	sub	sp, #52	; 0x34
 80048de:	4592      	cmp	sl, r2
 80048e0:	9104      	str	r1, [sp, #16]
 80048e2:	dc07      	bgt.n	80048f4 <__ieee754_rem_pio2+0x24>
 80048e4:	2200      	movs	r2, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	e9c4 0100 	strd	r0, r1, [r4]
 80048ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80048f0:	2500      	movs	r5, #0
 80048f2:	e024      	b.n	800493e <__ieee754_rem_pio2+0x6e>
 80048f4:	4abd      	ldr	r2, [pc, #756]	; (8004bec <__ieee754_rem_pio2+0x31c>)
 80048f6:	4592      	cmp	sl, r2
 80048f8:	dc72      	bgt.n	80049e0 <__ieee754_rem_pio2+0x110>
 80048fa:	9b04      	ldr	r3, [sp, #16]
 80048fc:	4dbc      	ldr	r5, [pc, #752]	; (8004bf0 <__ieee754_rem_pio2+0x320>)
 80048fe:	2b00      	cmp	r3, #0
 8004900:	a3ab      	add	r3, pc, #684	; (adr r3, 8004bb0 <__ieee754_rem_pio2+0x2e0>)
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	dd36      	ble.n	8004976 <__ieee754_rem_pio2+0xa6>
 8004908:	f7fb fc26 	bl	8000158 <__aeabi_dsub>
 800490c:	45aa      	cmp	sl, r5
 800490e:	4606      	mov	r6, r0
 8004910:	460f      	mov	r7, r1
 8004912:	d018      	beq.n	8004946 <__ieee754_rem_pio2+0x76>
 8004914:	a3a8      	add	r3, pc, #672	; (adr r3, 8004bb8 <__ieee754_rem_pio2+0x2e8>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fc1d 	bl	8000158 <__aeabi_dsub>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4630      	mov	r0, r6
 8004924:	e9c4 2300 	strd	r2, r3, [r4]
 8004928:	4639      	mov	r1, r7
 800492a:	f7fb fc15 	bl	8000158 <__aeabi_dsub>
 800492e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004bb8 <__ieee754_rem_pio2+0x2e8>)
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fb fc10 	bl	8000158 <__aeabi_dsub>
 8004938:	2501      	movs	r5, #1
 800493a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800493e:	4628      	mov	r0, r5
 8004940:	b00d      	add	sp, #52	; 0x34
 8004942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004946:	a39e      	add	r3, pc, #632	; (adr r3, 8004bc0 <__ieee754_rem_pio2+0x2f0>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f7fb fc04 	bl	8000158 <__aeabi_dsub>
 8004950:	a39d      	add	r3, pc, #628	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2f8>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	4606      	mov	r6, r0
 8004958:	460f      	mov	r7, r1
 800495a:	f7fb fbfd 	bl	8000158 <__aeabi_dsub>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4630      	mov	r0, r6
 8004964:	e9c4 2300 	strd	r2, r3, [r4]
 8004968:	4639      	mov	r1, r7
 800496a:	f7fb fbf5 	bl	8000158 <__aeabi_dsub>
 800496e:	a396      	add	r3, pc, #600	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2f8>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	e7de      	b.n	8004934 <__ieee754_rem_pio2+0x64>
 8004976:	f7fb fbf1 	bl	800015c <__adddf3>
 800497a:	45aa      	cmp	sl, r5
 800497c:	4606      	mov	r6, r0
 800497e:	460f      	mov	r7, r1
 8004980:	d016      	beq.n	80049b0 <__ieee754_rem_pio2+0xe0>
 8004982:	a38d      	add	r3, pc, #564	; (adr r3, 8004bb8 <__ieee754_rem_pio2+0x2e8>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fbe8 	bl	800015c <__adddf3>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4630      	mov	r0, r6
 8004992:	e9c4 2300 	strd	r2, r3, [r4]
 8004996:	4639      	mov	r1, r7
 8004998:	f7fb fbde 	bl	8000158 <__aeabi_dsub>
 800499c:	a386      	add	r3, pc, #536	; (adr r3, 8004bb8 <__ieee754_rem_pio2+0x2e8>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fbdb 	bl	800015c <__adddf3>
 80049a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049ae:	e7c6      	b.n	800493e <__ieee754_rem_pio2+0x6e>
 80049b0:	a383      	add	r3, pc, #524	; (adr r3, 8004bc0 <__ieee754_rem_pio2+0x2f0>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fbd1 	bl	800015c <__adddf3>
 80049ba:	a383      	add	r3, pc, #524	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2f8>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	4606      	mov	r6, r0
 80049c2:	460f      	mov	r7, r1
 80049c4:	f7fb fbca 	bl	800015c <__adddf3>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4630      	mov	r0, r6
 80049ce:	e9c4 2300 	strd	r2, r3, [r4]
 80049d2:	4639      	mov	r1, r7
 80049d4:	f7fb fbc0 	bl	8000158 <__aeabi_dsub>
 80049d8:	a37b      	add	r3, pc, #492	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2f8>)
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	e7e0      	b.n	80049a2 <__ieee754_rem_pio2+0xd2>
 80049e0:	4a84      	ldr	r2, [pc, #528]	; (8004bf4 <__ieee754_rem_pio2+0x324>)
 80049e2:	4592      	cmp	sl, r2
 80049e4:	f300 80d5 	bgt.w	8004b92 <__ieee754_rem_pio2+0x2c2>
 80049e8:	f000 fe20 	bl	800562c <fabs>
 80049ec:	a378      	add	r3, pc, #480	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x300>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	4606      	mov	r6, r0
 80049f4:	460f      	mov	r7, r1
 80049f6:	f7fb fd67 	bl	80004c8 <__aeabi_dmul>
 80049fa:	2200      	movs	r2, #0
 80049fc:	4b7e      	ldr	r3, [pc, #504]	; (8004bf8 <__ieee754_rem_pio2+0x328>)
 80049fe:	f7fb fbad 	bl	800015c <__adddf3>
 8004a02:	f7fb fffb 	bl	80009fc <__aeabi_d2iz>
 8004a06:	4605      	mov	r5, r0
 8004a08:	f7fb fcf4 	bl	80003f4 <__aeabi_i2d>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a14:	a366      	add	r3, pc, #408	; (adr r3, 8004bb0 <__ieee754_rem_pio2+0x2e0>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fd55 	bl	80004c8 <__aeabi_dmul>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fb fb97 	bl	8000158 <__aeabi_dsub>
 8004a2a:	a363      	add	r3, pc, #396	; (adr r3, 8004bb8 <__ieee754_rem_pio2+0x2e8>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	4680      	mov	r8, r0
 8004a32:	4689      	mov	r9, r1
 8004a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a38:	f7fb fd46 	bl	80004c8 <__aeabi_dmul>
 8004a3c:	2d1f      	cmp	r5, #31
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460f      	mov	r7, r1
 8004a42:	dc0e      	bgt.n	8004a62 <__ieee754_rem_pio2+0x192>
 8004a44:	4b6d      	ldr	r3, [pc, #436]	; (8004bfc <__ieee754_rem_pio2+0x32c>)
 8004a46:	1e6a      	subs	r2, r5, #1
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	4553      	cmp	r3, sl
 8004a4e:	d008      	beq.n	8004a62 <__ieee754_rem_pio2+0x192>
 8004a50:	4632      	mov	r2, r6
 8004a52:	463b      	mov	r3, r7
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fb fb7e 	bl	8000158 <__aeabi_dsub>
 8004a5c:	e9c4 0100 	strd	r0, r1, [r4]
 8004a60:	e013      	b.n	8004a8a <__ieee754_rem_pio2+0x1ba>
 8004a62:	463b      	mov	r3, r7
 8004a64:	4632      	mov	r2, r6
 8004a66:	4640      	mov	r0, r8
 8004a68:	4649      	mov	r1, r9
 8004a6a:	f7fb fb75 	bl	8000158 <__aeabi_dsub>
 8004a6e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a78:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8004a7c:	f1ba 0f10 	cmp.w	sl, #16
 8004a80:	dc1f      	bgt.n	8004ac2 <__ieee754_rem_pio2+0x1f2>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	e9c4 2300 	strd	r2, r3, [r4]
 8004a8a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004a8e:	4640      	mov	r0, r8
 8004a90:	4653      	mov	r3, sl
 8004a92:	4649      	mov	r1, r9
 8004a94:	f7fb fb60 	bl	8000158 <__aeabi_dsub>
 8004a98:	4632      	mov	r2, r6
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	f7fb fb5c 	bl	8000158 <__aeabi_dsub>
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004aa6:	9904      	ldr	r1, [sp, #16]
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	f6bf af47 	bge.w	800493e <__ieee754_rem_pio2+0x6e>
 8004ab0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004ab4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004ab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004abc:	60e3      	str	r3, [r4, #12]
 8004abe:	426d      	negs	r5, r5
 8004ac0:	e73d      	b.n	800493e <__ieee754_rem_pio2+0x6e>
 8004ac2:	a33f      	add	r3, pc, #252	; (adr r3, 8004bc0 <__ieee754_rem_pio2+0x2f0>)
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004acc:	f7fb fcfc 	bl	80004c8 <__aeabi_dmul>
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fb fb3c 	bl	8000158 <__aeabi_dsub>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4682      	mov	sl, r0
 8004ae6:	468b      	mov	fp, r1
 8004ae8:	4640      	mov	r0, r8
 8004aea:	4649      	mov	r1, r9
 8004aec:	f7fb fb34 	bl	8000158 <__aeabi_dsub>
 8004af0:	4632      	mov	r2, r6
 8004af2:	463b      	mov	r3, r7
 8004af4:	f7fb fb30 	bl	8000158 <__aeabi_dsub>
 8004af8:	a333      	add	r3, pc, #204	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2f8>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	4606      	mov	r6, r0
 8004b00:	460f      	mov	r7, r1
 8004b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b06:	f7fb fcdf 	bl	80004c8 <__aeabi_dmul>
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	f7fb fb23 	bl	8000158 <__aeabi_dsub>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	f7fb fb1b 	bl	8000158 <__aeabi_dsub>
 8004b22:	9a05      	ldr	r2, [sp, #20]
 8004b24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b31      	cmp	r3, #49	; 0x31
 8004b2c:	dc06      	bgt.n	8004b3c <__ieee754_rem_pio2+0x26c>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	46d0      	mov	r8, sl
 8004b34:	46d9      	mov	r9, fp
 8004b36:	e9c4 2300 	strd	r2, r3, [r4]
 8004b3a:	e7a6      	b.n	8004a8a <__ieee754_rem_pio2+0x1ba>
 8004b3c:	a326      	add	r3, pc, #152	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x308>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b46:	f7fb fcbf 	bl	80004c8 <__aeabi_dmul>
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460f      	mov	r7, r1
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4650      	mov	r0, sl
 8004b54:	4659      	mov	r1, fp
 8004b56:	f7fb faff 	bl	8000158 <__aeabi_dsub>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4680      	mov	r8, r0
 8004b60:	4689      	mov	r9, r1
 8004b62:	4650      	mov	r0, sl
 8004b64:	4659      	mov	r1, fp
 8004b66:	f7fb faf7 	bl	8000158 <__aeabi_dsub>
 8004b6a:	4632      	mov	r2, r6
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	f7fb faf3 	bl	8000158 <__aeabi_dsub>
 8004b72:	a31b      	add	r3, pc, #108	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x310>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	4606      	mov	r6, r0
 8004b7a:	460f      	mov	r7, r1
 8004b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b80:	f7fb fca2 	bl	80004c8 <__aeabi_dmul>
 8004b84:	4632      	mov	r2, r6
 8004b86:	463b      	mov	r3, r7
 8004b88:	f7fb fae6 	bl	8000158 <__aeabi_dsub>
 8004b8c:	4606      	mov	r6, r0
 8004b8e:	460f      	mov	r7, r1
 8004b90:	e75e      	b.n	8004a50 <__ieee754_rem_pio2+0x180>
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <__ieee754_rem_pio2+0x330>)
 8004b94:	4592      	cmp	sl, r2
 8004b96:	dd35      	ble.n	8004c04 <__ieee754_rem_pio2+0x334>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	f7fb fadc 	bl	8000158 <__aeabi_dsub>
 8004ba0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ba4:	e9c4 0100 	strd	r0, r1, [r4]
 8004ba8:	e6a2      	b.n	80048f0 <__ieee754_rem_pio2+0x20>
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w
 8004bb0:	54400000 	.word	0x54400000
 8004bb4:	3ff921fb 	.word	0x3ff921fb
 8004bb8:	1a626331 	.word	0x1a626331
 8004bbc:	3dd0b461 	.word	0x3dd0b461
 8004bc0:	1a600000 	.word	0x1a600000
 8004bc4:	3dd0b461 	.word	0x3dd0b461
 8004bc8:	2e037073 	.word	0x2e037073
 8004bcc:	3ba3198a 	.word	0x3ba3198a
 8004bd0:	6dc9c883 	.word	0x6dc9c883
 8004bd4:	3fe45f30 	.word	0x3fe45f30
 8004bd8:	2e000000 	.word	0x2e000000
 8004bdc:	3ba3198a 	.word	0x3ba3198a
 8004be0:	252049c1 	.word	0x252049c1
 8004be4:	397b839a 	.word	0x397b839a
 8004be8:	3fe921fb 	.word	0x3fe921fb
 8004bec:	4002d97b 	.word	0x4002d97b
 8004bf0:	3ff921fb 	.word	0x3ff921fb
 8004bf4:	413921fb 	.word	0x413921fb
 8004bf8:	3fe00000 	.word	0x3fe00000
 8004bfc:	08005888 	.word	0x08005888
 8004c00:	7fefffff 	.word	0x7fefffff
 8004c04:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004c08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004c0c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004c10:	460f      	mov	r7, r1
 8004c12:	4606      	mov	r6, r0
 8004c14:	f7fb fef2 	bl	80009fc <__aeabi_d2iz>
 8004c18:	f7fb fbec 	bl	80003f4 <__aeabi_i2d>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4630      	mov	r0, r6
 8004c22:	4639      	mov	r1, r7
 8004c24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c28:	f7fb fa96 	bl	8000158 <__aeabi_dsub>
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <__ieee754_rem_pio2+0x3d8>)
 8004c30:	f7fb fc4a 	bl	80004c8 <__aeabi_dmul>
 8004c34:	460f      	mov	r7, r1
 8004c36:	4606      	mov	r6, r0
 8004c38:	f7fb fee0 	bl	80009fc <__aeabi_d2iz>
 8004c3c:	f7fb fbda 	bl	80003f4 <__aeabi_i2d>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4630      	mov	r0, r6
 8004c46:	4639      	mov	r1, r7
 8004c48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c4c:	f7fb fa84 	bl	8000158 <__aeabi_dsub>
 8004c50:	2200      	movs	r2, #0
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <__ieee754_rem_pio2+0x3d8>)
 8004c54:	f7fb fc38 	bl	80004c8 <__aeabi_dmul>
 8004c58:	f04f 0803 	mov.w	r8, #3
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	2700      	movs	r7, #0
 8004c60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c64:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004c68:	4632      	mov	r2, r6
 8004c6a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004c6e:	463b      	mov	r3, r7
 8004c70:	46c2      	mov	sl, r8
 8004c72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004c76:	f7fb fe8f 	bl	8000998 <__aeabi_dcmpeq>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d1f4      	bne.n	8004c68 <__ieee754_rem_pio2+0x398>
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <__ieee754_rem_pio2+0x3dc>)
 8004c80:	462a      	mov	r2, r5
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	2302      	movs	r3, #2
 8004c86:	4621      	mov	r1, r4
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	a806      	add	r0, sp, #24
 8004c8c:	4653      	mov	r3, sl
 8004c8e:	f000 f8cd 	bl	8004e2c <__kernel_rem_pio2>
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	4605      	mov	r5, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f6bf ae51 	bge.w	800493e <__ieee754_rem_pio2+0x6e>
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ca2:	6063      	str	r3, [r4, #4]
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	e707      	b.n	8004ab8 <__ieee754_rem_pio2+0x1e8>
 8004ca8:	41700000 	.word	0x41700000
 8004cac:	08005908 	.word	0x08005908

08004cb0 <__kernel_cos>:
 8004cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004cb8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	460f      	mov	r7, r1
 8004cc0:	e9cd 2300 	strd	r2, r3, [sp]
 8004cc4:	da04      	bge.n	8004cd0 <__kernel_cos+0x20>
 8004cc6:	f7fb fe99 	bl	80009fc <__aeabi_d2iz>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f000 8086 	beq.w	8004ddc <__kernel_cos+0x12c>
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f7fb fbf6 	bl	80004c8 <__aeabi_dmul>
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <__kernel_cos+0x168>)
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	f7fb fbf0 	bl	80004c8 <__aeabi_dmul>
 8004ce8:	a33f      	add	r3, pc, #252	; (adr r3, 8004de8 <__kernel_cos+0x138>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	4682      	mov	sl, r0
 8004cf0:	468b      	mov	fp, r1
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f7fb fbe7 	bl	80004c8 <__aeabi_dmul>
 8004cfa:	a33d      	add	r3, pc, #244	; (adr r3, 8004df0 <__kernel_cos+0x140>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fa2c 	bl	800015c <__adddf3>
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	f7fb fbde 	bl	80004c8 <__aeabi_dmul>
 8004d0c:	a33a      	add	r3, pc, #232	; (adr r3, 8004df8 <__kernel_cos+0x148>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fa21 	bl	8000158 <__aeabi_dsub>
 8004d16:	4622      	mov	r2, r4
 8004d18:	462b      	mov	r3, r5
 8004d1a:	f7fb fbd5 	bl	80004c8 <__aeabi_dmul>
 8004d1e:	a338      	add	r3, pc, #224	; (adr r3, 8004e00 <__kernel_cos+0x150>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fa1a 	bl	800015c <__adddf3>
 8004d28:	4622      	mov	r2, r4
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	f7fb fbcc 	bl	80004c8 <__aeabi_dmul>
 8004d30:	a335      	add	r3, pc, #212	; (adr r3, 8004e08 <__kernel_cos+0x158>)
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f7fb fa0f 	bl	8000158 <__aeabi_dsub>
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f7fb fbc3 	bl	80004c8 <__aeabi_dmul>
 8004d42:	a333      	add	r3, pc, #204	; (adr r3, 8004e10 <__kernel_cos+0x160>)
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f7fb fa08 	bl	800015c <__adddf3>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	f7fb fbba 	bl	80004c8 <__aeabi_dmul>
 8004d54:	4622      	mov	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	f7fb fbb6 	bl	80004c8 <__aeabi_dmul>
 8004d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d60:	4604      	mov	r4, r0
 8004d62:	460d      	mov	r5, r1
 8004d64:	4640      	mov	r0, r8
 8004d66:	4639      	mov	r1, r7
 8004d68:	f7fb fbae 	bl	80004c8 <__aeabi_dmul>
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4602      	mov	r2, r0
 8004d70:	4629      	mov	r1, r5
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7fb f9f0 	bl	8000158 <__aeabi_dsub>
 8004d78:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <__kernel_cos+0x16c>)
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	429e      	cmp	r6, r3
 8004d7e:	4689      	mov	r9, r1
 8004d80:	dc0e      	bgt.n	8004da0 <__kernel_cos+0xf0>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4650      	mov	r0, sl
 8004d88:	4659      	mov	r1, fp
 8004d8a:	f7fb f9e5 	bl	8000158 <__aeabi_dsub>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	2000      	movs	r0, #0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4922      	ldr	r1, [pc, #136]	; (8004e20 <__kernel_cos+0x170>)
 8004d96:	f7fb f9df 	bl	8000158 <__aeabi_dsub>
 8004d9a:	b003      	add	sp, #12
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	2400      	movs	r4, #0
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <__kernel_cos+0x174>)
 8004da4:	4622      	mov	r2, r4
 8004da6:	429e      	cmp	r6, r3
 8004da8:	bfcc      	ite	gt
 8004daa:	4d1f      	ldrgt	r5, [pc, #124]	; (8004e28 <__kernel_cos+0x178>)
 8004dac:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004db0:	462b      	mov	r3, r5
 8004db2:	2000      	movs	r0, #0
 8004db4:	491a      	ldr	r1, [pc, #104]	; (8004e20 <__kernel_cos+0x170>)
 8004db6:	f7fb f9cf 	bl	8000158 <__aeabi_dsub>
 8004dba:	4622      	mov	r2, r4
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	4650      	mov	r0, sl
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	f7fb f9c7 	bl	8000158 <__aeabi_dsub>
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	f7fb f9c3 	bl	8000158 <__aeabi_dsub>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	e7dc      	b.n	8004d96 <__kernel_cos+0xe6>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	4910      	ldr	r1, [pc, #64]	; (8004e20 <__kernel_cos+0x170>)
 8004de0:	e7db      	b.n	8004d9a <__kernel_cos+0xea>
 8004de2:	bf00      	nop
 8004de4:	f3af 8000 	nop.w
 8004de8:	be8838d4 	.word	0xbe8838d4
 8004dec:	bda8fae9 	.word	0xbda8fae9
 8004df0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004df4:	3e21ee9e 	.word	0x3e21ee9e
 8004df8:	809c52ad 	.word	0x809c52ad
 8004dfc:	3e927e4f 	.word	0x3e927e4f
 8004e00:	19cb1590 	.word	0x19cb1590
 8004e04:	3efa01a0 	.word	0x3efa01a0
 8004e08:	16c15177 	.word	0x16c15177
 8004e0c:	3f56c16c 	.word	0x3f56c16c
 8004e10:	5555554c 	.word	0x5555554c
 8004e14:	3fa55555 	.word	0x3fa55555
 8004e18:	3fe00000 	.word	0x3fe00000
 8004e1c:	3fd33332 	.word	0x3fd33332
 8004e20:	3ff00000 	.word	0x3ff00000
 8004e24:	3fe90000 	.word	0x3fe90000
 8004e28:	3fd20000 	.word	0x3fd20000

08004e2c <__kernel_rem_pio2>:
 8004e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004e34:	9308      	str	r3, [sp, #32]
 8004e36:	9101      	str	r1, [sp, #4]
 8004e38:	4bc0      	ldr	r3, [pc, #768]	; (800513c <__kernel_rem_pio2+0x310>)
 8004e3a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004e3c:	f112 0f14 	cmn.w	r2, #20
 8004e40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e44:	bfa8      	it	ge
 8004e46:	1ed4      	subge	r4, r2, #3
 8004e48:	9304      	str	r3, [sp, #16]
 8004e4a:	9b08      	ldr	r3, [sp, #32]
 8004e4c:	bfb8      	it	lt
 8004e4e:	2400      	movlt	r4, #0
 8004e50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004e54:	9306      	str	r3, [sp, #24]
 8004e56:	bfa4      	itt	ge
 8004e58:	2318      	movge	r3, #24
 8004e5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004e5e:	f06f 0317 	mvn.w	r3, #23
 8004e62:	fb04 3303 	mla	r3, r4, r3, r3
 8004e66:	eb03 0a02 	add.w	sl, r3, r2
 8004e6a:	9a06      	ldr	r2, [sp, #24]
 8004e6c:	9b04      	ldr	r3, [sp, #16]
 8004e6e:	1aa7      	subs	r7, r4, r2
 8004e70:	eb03 0802 	add.w	r8, r3, r2
 8004e74:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004e76:	2500      	movs	r5, #0
 8004e78:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9009      	str	r0, [sp, #36]	; 0x24
 8004e82:	ae20      	add	r6, sp, #128	; 0x80
 8004e84:	4545      	cmp	r5, r8
 8004e86:	dd19      	ble.n	8004ebc <__kernel_rem_pio2+0x90>
 8004e88:	9b08      	ldr	r3, [sp, #32]
 8004e8a:	aa20      	add	r2, sp, #128	; 0x80
 8004e8c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004e94:	f1c3 0301 	rsb	r3, r3, #1
 8004e98:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004e9c:	9307      	str	r3, [sp, #28]
 8004e9e:	9b07      	ldr	r3, [sp, #28]
 8004ea0:	9a04      	ldr	r2, [sp, #16]
 8004ea2:	4443      	add	r3, r8
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	db35      	blt.n	8004f14 <__kernel_rem_pio2+0xe8>
 8004ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f1a3 0908 	sub.w	r9, r3, #8
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	462f      	mov	r7, r5
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004eba:	e01f      	b.n	8004efc <__kernel_rem_pio2+0xd0>
 8004ebc:	42ef      	cmn	r7, r5
 8004ebe:	d40b      	bmi.n	8004ed8 <__kernel_rem_pio2+0xac>
 8004ec0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ec8:	f7fb fa94 	bl	80003f4 <__aeabi_i2d>
 8004ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	e7d5      	b.n	8004e84 <__kernel_rem_pio2+0x58>
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	e7f8      	b.n	8004ed0 <__kernel_rem_pio2+0xa4>
 8004ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004ee6:	f7fb faef 	bl	80004c8 <__aeabi_dmul>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef2:	f7fb f933 	bl	800015c <__adddf3>
 8004ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004efa:	3601      	adds	r6, #1
 8004efc:	9b06      	ldr	r3, [sp, #24]
 8004efe:	3f08      	subs	r7, #8
 8004f00:	429e      	cmp	r6, r3
 8004f02:	ddec      	ble.n	8004ede <__kernel_rem_pio2+0xb2>
 8004f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f08:	3508      	adds	r5, #8
 8004f0a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	e7c4      	b.n	8004e9e <__kernel_rem_pio2+0x72>
 8004f14:	9b04      	ldr	r3, [sp, #16]
 8004f16:	aa0c      	add	r2, sp, #48	; 0x30
 8004f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f1e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004f20:	9f04      	ldr	r7, [sp, #16]
 8004f22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f26:	930a      	str	r3, [sp, #40]	; 0x28
 8004f28:	463e      	mov	r6, r7
 8004f2a:	ab98      	add	r3, sp, #608	; 0x260
 8004f2c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004f30:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f34:	f8cd b008 	str.w	fp, [sp, #8]
 8004f38:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004f3c:	2e00      	cmp	r6, #0
 8004f3e:	dc71      	bgt.n	8005024 <__kernel_rem_pio2+0x1f8>
 8004f40:	4652      	mov	r2, sl
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f000 fbf7 	bl	8005738 <scalbn>
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	f7fb fab8 	bl	80004c8 <__aeabi_dmul>
 8004f58:	f000 fb6e 	bl	8005638 <floor>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4b78      	ldr	r3, [pc, #480]	; (8005140 <__kernel_rem_pio2+0x314>)
 8004f60:	f7fb fab2 	bl	80004c8 <__aeabi_dmul>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb f8f4 	bl	8000158 <__aeabi_dsub>
 8004f70:	460d      	mov	r5, r1
 8004f72:	4604      	mov	r4, r0
 8004f74:	f7fb fd42 	bl	80009fc <__aeabi_d2iz>
 8004f78:	9007      	str	r0, [sp, #28]
 8004f7a:	f7fb fa3b 	bl	80003f4 <__aeabi_i2d>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4620      	mov	r0, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	f7fb f8e7 	bl	8000158 <__aeabi_dsub>
 8004f8a:	f1ba 0f00 	cmp.w	sl, #0
 8004f8e:	4680      	mov	r8, r0
 8004f90:	4689      	mov	r9, r1
 8004f92:	dd70      	ble.n	8005076 <__kernel_rem_pio2+0x24a>
 8004f94:	1e7a      	subs	r2, r7, #1
 8004f96:	ab0c      	add	r3, sp, #48	; 0x30
 8004f98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f9c:	9c07      	ldr	r4, [sp, #28]
 8004f9e:	f1ca 0118 	rsb	r1, sl, #24
 8004fa2:	fa40 f301 	asr.w	r3, r0, r1
 8004fa6:	441c      	add	r4, r3
 8004fa8:	408b      	lsls	r3, r1
 8004faa:	1ac0      	subs	r0, r0, r3
 8004fac:	ab0c      	add	r3, sp, #48	; 0x30
 8004fae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004fb2:	f1ca 0317 	rsb	r3, sl, #23
 8004fb6:	9407      	str	r4, [sp, #28]
 8004fb8:	fa40 f303 	asr.w	r3, r0, r3
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	9b02      	ldr	r3, [sp, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dd66      	ble.n	8005092 <__kernel_rem_pio2+0x266>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004fca:	4614      	mov	r4, r2
 8004fcc:	9b07      	ldr	r3, [sp, #28]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	9307      	str	r3, [sp, #28]
 8004fd2:	4297      	cmp	r7, r2
 8004fd4:	f300 809f 	bgt.w	8005116 <__kernel_rem_pio2+0x2ea>
 8004fd8:	f1ba 0f00 	cmp.w	sl, #0
 8004fdc:	dd07      	ble.n	8004fee <__kernel_rem_pio2+0x1c2>
 8004fde:	f1ba 0f01 	cmp.w	sl, #1
 8004fe2:	f000 80b9 	beq.w	8005158 <__kernel_rem_pio2+0x32c>
 8004fe6:	f1ba 0f02 	cmp.w	sl, #2
 8004fea:	f000 80bf 	beq.w	800516c <__kernel_rem_pio2+0x340>
 8004fee:	9b02      	ldr	r3, [sp, #8]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d14e      	bne.n	8005092 <__kernel_rem_pio2+0x266>
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4952      	ldr	r1, [pc, #328]	; (8005144 <__kernel_rem_pio2+0x318>)
 8004ffc:	f7fb f8ac 	bl	8000158 <__aeabi_dsub>
 8005000:	4680      	mov	r8, r0
 8005002:	4689      	mov	r9, r1
 8005004:	2c00      	cmp	r4, #0
 8005006:	d044      	beq.n	8005092 <__kernel_rem_pio2+0x266>
 8005008:	4652      	mov	r2, sl
 800500a:	2000      	movs	r0, #0
 800500c:	494d      	ldr	r1, [pc, #308]	; (8005144 <__kernel_rem_pio2+0x318>)
 800500e:	f000 fb93 	bl	8005738 <scalbn>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb f89d 	bl	8000158 <__aeabi_dsub>
 800501e:	4680      	mov	r8, r0
 8005020:	4689      	mov	r9, r1
 8005022:	e036      	b.n	8005092 <__kernel_rem_pio2+0x266>
 8005024:	2200      	movs	r2, #0
 8005026:	4b48      	ldr	r3, [pc, #288]	; (8005148 <__kernel_rem_pio2+0x31c>)
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	f7fb fa4c 	bl	80004c8 <__aeabi_dmul>
 8005030:	f7fb fce4 	bl	80009fc <__aeabi_d2iz>
 8005034:	f7fb f9de 	bl	80003f4 <__aeabi_i2d>
 8005038:	2200      	movs	r2, #0
 800503a:	4b44      	ldr	r3, [pc, #272]	; (800514c <__kernel_rem_pio2+0x320>)
 800503c:	4680      	mov	r8, r0
 800503e:	4689      	mov	r9, r1
 8005040:	f7fb fa42 	bl	80004c8 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4620      	mov	r0, r4
 800504a:	4629      	mov	r1, r5
 800504c:	f7fb f884 	bl	8000158 <__aeabi_dsub>
 8005050:	f7fb fcd4 	bl	80009fc <__aeabi_d2iz>
 8005054:	9b02      	ldr	r3, [sp, #8]
 8005056:	3e01      	subs	r6, #1
 8005058:	f843 0b04 	str.w	r0, [r3], #4
 800505c:	9302      	str	r3, [sp, #8]
 800505e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005060:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005064:	4640      	mov	r0, r8
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb f876 	bl	800015c <__adddf3>
 8005070:	4604      	mov	r4, r0
 8005072:	460d      	mov	r5, r1
 8005074:	e762      	b.n	8004f3c <__kernel_rem_pio2+0x110>
 8005076:	d105      	bne.n	8005084 <__kernel_rem_pio2+0x258>
 8005078:	1e7b      	subs	r3, r7, #1
 800507a:	aa0c      	add	r2, sp, #48	; 0x30
 800507c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005080:	15c3      	asrs	r3, r0, #23
 8005082:	e79b      	b.n	8004fbc <__kernel_rem_pio2+0x190>
 8005084:	2200      	movs	r2, #0
 8005086:	4b32      	ldr	r3, [pc, #200]	; (8005150 <__kernel_rem_pio2+0x324>)
 8005088:	f7fb fca4 	bl	80009d4 <__aeabi_dcmpge>
 800508c:	2800      	cmp	r0, #0
 800508e:	d13f      	bne.n	8005110 <__kernel_rem_pio2+0x2e4>
 8005090:	9002      	str	r0, [sp, #8]
 8005092:	2200      	movs	r2, #0
 8005094:	2300      	movs	r3, #0
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	f7fb fc7d 	bl	8000998 <__aeabi_dcmpeq>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f000 80b5 	beq.w	800520e <__kernel_rem_pio2+0x3e2>
 80050a4:	1e7c      	subs	r4, r7, #1
 80050a6:	4623      	mov	r3, r4
 80050a8:	2200      	movs	r2, #0
 80050aa:	9904      	ldr	r1, [sp, #16]
 80050ac:	428b      	cmp	r3, r1
 80050ae:	da64      	bge.n	800517a <__kernel_rem_pio2+0x34e>
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	d078      	beq.n	80051a6 <__kernel_rem_pio2+0x37a>
 80050b4:	ab0c      	add	r3, sp, #48	; 0x30
 80050b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80050ba:	f1aa 0a18 	sub.w	sl, sl, #24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80a3 	beq.w	800520a <__kernel_rem_pio2+0x3de>
 80050c4:	4652      	mov	r2, sl
 80050c6:	2000      	movs	r0, #0
 80050c8:	491e      	ldr	r1, [pc, #120]	; (8005144 <__kernel_rem_pio2+0x318>)
 80050ca:	f000 fb35 	bl	8005738 <scalbn>
 80050ce:	46a2      	mov	sl, r4
 80050d0:	4606      	mov	r6, r0
 80050d2:	460f      	mov	r7, r1
 80050d4:	f04f 0800 	mov.w	r8, #0
 80050d8:	00e3      	lsls	r3, r4, #3
 80050da:	9306      	str	r3, [sp, #24]
 80050dc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005148 <__kernel_rem_pio2+0x31c>
 80050e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80050e2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80050e6:	f1ba 0f00 	cmp.w	sl, #0
 80050ea:	f280 80c6 	bge.w	800527a <__kernel_rem_pio2+0x44e>
 80050ee:	4627      	mov	r7, r4
 80050f0:	f04f 0800 	mov.w	r8, #0
 80050f4:	2f00      	cmp	r7, #0
 80050f6:	f2c0 80f3 	blt.w	80052e0 <__kernel_rem_pio2+0x4b4>
 80050fa:	4b16      	ldr	r3, [pc, #88]	; (8005154 <__kernel_rem_pio2+0x328>)
 80050fc:	f04f 0a00 	mov.w	sl, #0
 8005100:	461d      	mov	r5, r3
 8005102:	ab70      	add	r3, sp, #448	; 0x1c0
 8005104:	f04f 0b00 	mov.w	fp, #0
 8005108:	2600      	movs	r6, #0
 800510a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800510e:	e0d9      	b.n	80052c4 <__kernel_rem_pio2+0x498>
 8005110:	2302      	movs	r3, #2
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	e756      	b.n	8004fc4 <__kernel_rem_pio2+0x198>
 8005116:	f8db 3000 	ldr.w	r3, [fp]
 800511a:	b954      	cbnz	r4, 8005132 <__kernel_rem_pio2+0x306>
 800511c:	b123      	cbz	r3, 8005128 <__kernel_rem_pio2+0x2fc>
 800511e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005122:	f8cb 3000 	str.w	r3, [fp]
 8005126:	2301      	movs	r3, #1
 8005128:	461c      	mov	r4, r3
 800512a:	3201      	adds	r2, #1
 800512c:	f10b 0b04 	add.w	fp, fp, #4
 8005130:	e74f      	b.n	8004fd2 <__kernel_rem_pio2+0x1a6>
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	f8cb 3000 	str.w	r3, [fp]
 8005138:	4623      	mov	r3, r4
 800513a:	e7f5      	b.n	8005128 <__kernel_rem_pio2+0x2fc>
 800513c:	08005a50 	.word	0x08005a50
 8005140:	40200000 	.word	0x40200000
 8005144:	3ff00000 	.word	0x3ff00000
 8005148:	3e700000 	.word	0x3e700000
 800514c:	41700000 	.word	0x41700000
 8005150:	3fe00000 	.word	0x3fe00000
 8005154:	08005a10 	.word	0x08005a10
 8005158:	1e7a      	subs	r2, r7, #1
 800515a:	ab0c      	add	r3, sp, #48	; 0x30
 800515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005160:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005164:	a90c      	add	r1, sp, #48	; 0x30
 8005166:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800516a:	e740      	b.n	8004fee <__kernel_rem_pio2+0x1c2>
 800516c:	1e7a      	subs	r2, r7, #1
 800516e:	ab0c      	add	r3, sp, #48	; 0x30
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005178:	e7f4      	b.n	8005164 <__kernel_rem_pio2+0x338>
 800517a:	a90c      	add	r1, sp, #48	; 0x30
 800517c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005180:	3b01      	subs	r3, #1
 8005182:	430a      	orrs	r2, r1
 8005184:	e791      	b.n	80050aa <__kernel_rem_pio2+0x27e>
 8005186:	3401      	adds	r4, #1
 8005188:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800518c:	2a00      	cmp	r2, #0
 800518e:	d0fa      	beq.n	8005186 <__kernel_rem_pio2+0x35a>
 8005190:	9b08      	ldr	r3, [sp, #32]
 8005192:	1c7e      	adds	r6, r7, #1
 8005194:	18fd      	adds	r5, r7, r3
 8005196:	ab20      	add	r3, sp, #128	; 0x80
 8005198:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800519c:	443c      	add	r4, r7
 800519e:	42b4      	cmp	r4, r6
 80051a0:	da04      	bge.n	80051ac <__kernel_rem_pio2+0x380>
 80051a2:	4627      	mov	r7, r4
 80051a4:	e6c0      	b.n	8004f28 <__kernel_rem_pio2+0xfc>
 80051a6:	2401      	movs	r4, #1
 80051a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051aa:	e7ed      	b.n	8005188 <__kernel_rem_pio2+0x35c>
 80051ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ae:	462f      	mov	r7, r5
 80051b0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80051b4:	f7fb f91e 	bl	80003f4 <__aeabi_i2d>
 80051b8:	f04f 0b00 	mov.w	fp, #0
 80051bc:	f04f 0800 	mov.w	r8, #0
 80051c0:	f04f 0900 	mov.w	r9, #0
 80051c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c6:	e8e7 0102 	strd	r0, r1, [r7], #8
 80051ca:	3b08      	subs	r3, #8
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	9b06      	ldr	r3, [sp, #24]
 80051d0:	459b      	cmp	fp, r3
 80051d2:	dd07      	ble.n	80051e4 <__kernel_rem_pio2+0x3b8>
 80051d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80051d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80051da:	463d      	mov	r5, r7
 80051dc:	e9c3 8900 	strd	r8, r9, [r3]
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7dc      	b.n	800519e <__kernel_rem_pio2+0x372>
 80051e4:	9902      	ldr	r1, [sp, #8]
 80051e6:	f10b 0b01 	add.w	fp, fp, #1
 80051ea:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80051ee:	9102      	str	r1, [sp, #8]
 80051f0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 80051f4:	f7fb f968 	bl	80004c8 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4640      	mov	r0, r8
 80051fe:	4649      	mov	r1, r9
 8005200:	f7fa ffac 	bl	800015c <__adddf3>
 8005204:	4680      	mov	r8, r0
 8005206:	4689      	mov	r9, r1
 8005208:	e7e1      	b.n	80051ce <__kernel_rem_pio2+0x3a2>
 800520a:	3c01      	subs	r4, #1
 800520c:	e752      	b.n	80050b4 <__kernel_rem_pio2+0x288>
 800520e:	f1ca 0200 	rsb	r2, sl, #0
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f000 fa8f 	bl	8005738 <scalbn>
 800521a:	2200      	movs	r2, #0
 800521c:	4ba5      	ldr	r3, [pc, #660]	; (80054b4 <__kernel_rem_pio2+0x688>)
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	f7fb fbd7 	bl	80009d4 <__aeabi_dcmpge>
 8005226:	b1f8      	cbz	r0, 8005268 <__kernel_rem_pio2+0x43c>
 8005228:	2200      	movs	r2, #0
 800522a:	4ba3      	ldr	r3, [pc, #652]	; (80054b8 <__kernel_rem_pio2+0x68c>)
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb f94a 	bl	80004c8 <__aeabi_dmul>
 8005234:	f7fb fbe2 	bl	80009fc <__aeabi_d2iz>
 8005238:	4606      	mov	r6, r0
 800523a:	f7fb f8db 	bl	80003f4 <__aeabi_i2d>
 800523e:	2200      	movs	r2, #0
 8005240:	4b9c      	ldr	r3, [pc, #624]	; (80054b4 <__kernel_rem_pio2+0x688>)
 8005242:	f7fb f941 	bl	80004c8 <__aeabi_dmul>
 8005246:	460b      	mov	r3, r1
 8005248:	4602      	mov	r2, r0
 800524a:	4629      	mov	r1, r5
 800524c:	4620      	mov	r0, r4
 800524e:	f7fa ff83 	bl	8000158 <__aeabi_dsub>
 8005252:	f7fb fbd3 	bl	80009fc <__aeabi_d2iz>
 8005256:	1c7c      	adds	r4, r7, #1
 8005258:	ab0c      	add	r3, sp, #48	; 0x30
 800525a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800525e:	f10a 0a18 	add.w	sl, sl, #24
 8005262:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8005266:	e72d      	b.n	80050c4 <__kernel_rem_pio2+0x298>
 8005268:	4620      	mov	r0, r4
 800526a:	4629      	mov	r1, r5
 800526c:	f7fb fbc6 	bl	80009fc <__aeabi_d2iz>
 8005270:	ab0c      	add	r3, sp, #48	; 0x30
 8005272:	463c      	mov	r4, r7
 8005274:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005278:	e724      	b.n	80050c4 <__kernel_rem_pio2+0x298>
 800527a:	ab0c      	add	r3, sp, #48	; 0x30
 800527c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005280:	f7fb f8b8 	bl	80003f4 <__aeabi_i2d>
 8005284:	4632      	mov	r2, r6
 8005286:	463b      	mov	r3, r7
 8005288:	f7fb f91e 	bl	80004c8 <__aeabi_dmul>
 800528c:	4642      	mov	r2, r8
 800528e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005292:	464b      	mov	r3, r9
 8005294:	4630      	mov	r0, r6
 8005296:	4639      	mov	r1, r7
 8005298:	f7fb f916 	bl	80004c8 <__aeabi_dmul>
 800529c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	e71f      	b.n	80050e6 <__kernel_rem_pio2+0x2ba>
 80052a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80052aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80052ae:	f7fb f90b 	bl	80004c8 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4650      	mov	r0, sl
 80052b8:	4659      	mov	r1, fp
 80052ba:	f7fa ff4f 	bl	800015c <__adddf3>
 80052be:	4682      	mov	sl, r0
 80052c0:	468b      	mov	fp, r1
 80052c2:	3601      	adds	r6, #1
 80052c4:	9b04      	ldr	r3, [sp, #16]
 80052c6:	429e      	cmp	r6, r3
 80052c8:	dc01      	bgt.n	80052ce <__kernel_rem_pio2+0x4a2>
 80052ca:	45b0      	cmp	r8, r6
 80052cc:	daeb      	bge.n	80052a6 <__kernel_rem_pio2+0x47a>
 80052ce:	ab48      	add	r3, sp, #288	; 0x120
 80052d0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80052d4:	e9c3 ab00 	strd	sl, fp, [r3]
 80052d8:	3f01      	subs	r7, #1
 80052da:	f108 0801 	add.w	r8, r8, #1
 80052de:	e709      	b.n	80050f4 <__kernel_rem_pio2+0x2c8>
 80052e0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	dc09      	bgt.n	80052fa <__kernel_rem_pio2+0x4ce>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	dc34      	bgt.n	8005354 <__kernel_rem_pio2+0x528>
 80052ea:	d05e      	beq.n	80053aa <__kernel_rem_pio2+0x57e>
 80052ec:	9b07      	ldr	r3, [sp, #28]
 80052ee:	f003 0007 	and.w	r0, r3, #7
 80052f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d1f5      	bne.n	80052ec <__kernel_rem_pio2+0x4c0>
 8005300:	9a06      	ldr	r2, [sp, #24]
 8005302:	ab48      	add	r3, sp, #288	; 0x120
 8005304:	441a      	add	r2, r3
 8005306:	4615      	mov	r5, r2
 8005308:	4692      	mov	sl, r2
 800530a:	46a3      	mov	fp, r4
 800530c:	f1bb 0f00 	cmp.w	fp, #0
 8005310:	dc7a      	bgt.n	8005408 <__kernel_rem_pio2+0x5dc>
 8005312:	46aa      	mov	sl, r5
 8005314:	46a3      	mov	fp, r4
 8005316:	f1bb 0f01 	cmp.w	fp, #1
 800531a:	f300 8094 	bgt.w	8005446 <__kernel_rem_pio2+0x61a>
 800531e:	2700      	movs	r7, #0
 8005320:	463e      	mov	r6, r7
 8005322:	2c01      	cmp	r4, #1
 8005324:	f300 80ae 	bgt.w	8005484 <__kernel_rem_pio2+0x658>
 8005328:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800532c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005330:	9b02      	ldr	r3, [sp, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 80b0 	bne.w	8005498 <__kernel_rem_pio2+0x66c>
 8005338:	4603      	mov	r3, r0
 800533a:	462a      	mov	r2, r5
 800533c:	9801      	ldr	r0, [sp, #4]
 800533e:	e9c0 2300 	strd	r2, r3, [r0]
 8005342:	4622      	mov	r2, r4
 8005344:	460b      	mov	r3, r1
 8005346:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800534a:	463a      	mov	r2, r7
 800534c:	4633      	mov	r3, r6
 800534e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005352:	e7cb      	b.n	80052ec <__kernel_rem_pio2+0x4c0>
 8005354:	2000      	movs	r0, #0
 8005356:	9a06      	ldr	r2, [sp, #24]
 8005358:	ab48      	add	r3, sp, #288	; 0x120
 800535a:	441a      	add	r2, r3
 800535c:	4615      	mov	r5, r2
 800535e:	46a0      	mov	r8, r4
 8005360:	4601      	mov	r1, r0
 8005362:	f1b8 0f00 	cmp.w	r8, #0
 8005366:	da3c      	bge.n	80053e2 <__kernel_rem_pio2+0x5b6>
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d040      	beq.n	80053f0 <__kernel_rem_pio2+0x5c4>
 800536e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005372:	4602      	mov	r2, r0
 8005374:	462b      	mov	r3, r5
 8005376:	9d01      	ldr	r5, [sp, #4]
 8005378:	2601      	movs	r6, #1
 800537a:	e9c5 2300 	strd	r2, r3, [r5]
 800537e:	460b      	mov	r3, r1
 8005380:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005384:	f7fa fee8 	bl	8000158 <__aeabi_dsub>
 8005388:	4684      	mov	ip, r0
 800538a:	460f      	mov	r7, r1
 800538c:	ad48      	add	r5, sp, #288	; 0x120
 800538e:	42b4      	cmp	r4, r6
 8005390:	f105 0508 	add.w	r5, r5, #8
 8005394:	da2e      	bge.n	80053f4 <__kernel_rem_pio2+0x5c8>
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	b10b      	cbz	r3, 800539e <__kernel_rem_pio2+0x572>
 800539a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800539e:	4662      	mov	r2, ip
 80053a0:	463b      	mov	r3, r7
 80053a2:	9901      	ldr	r1, [sp, #4]
 80053a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80053a8:	e7a0      	b.n	80052ec <__kernel_rem_pio2+0x4c0>
 80053aa:	9a06      	ldr	r2, [sp, #24]
 80053ac:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80053ae:	ab48      	add	r3, sp, #288	; 0x120
 80053b0:	441a      	add	r2, r3
 80053b2:	4615      	mov	r5, r2
 80053b4:	4637      	mov	r7, r6
 80053b6:	2c00      	cmp	r4, #0
 80053b8:	da09      	bge.n	80053ce <__kernel_rem_pio2+0x5a2>
 80053ba:	9b02      	ldr	r3, [sp, #8]
 80053bc:	b10b      	cbz	r3, 80053c2 <__kernel_rem_pio2+0x596>
 80053be:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80053c2:	4632      	mov	r2, r6
 80053c4:	463b      	mov	r3, r7
 80053c6:	9901      	ldr	r1, [sp, #4]
 80053c8:	e9c1 2300 	strd	r2, r3, [r1]
 80053cc:	e78e      	b.n	80052ec <__kernel_rem_pio2+0x4c0>
 80053ce:	4630      	mov	r0, r6
 80053d0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80053d4:	4639      	mov	r1, r7
 80053d6:	f7fa fec1 	bl	800015c <__adddf3>
 80053da:	3c01      	subs	r4, #1
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	e7e9      	b.n	80053b6 <__kernel_rem_pio2+0x58a>
 80053e2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80053e6:	f7fa feb9 	bl	800015c <__adddf3>
 80053ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80053ee:	e7b8      	b.n	8005362 <__kernel_rem_pio2+0x536>
 80053f0:	460d      	mov	r5, r1
 80053f2:	e7be      	b.n	8005372 <__kernel_rem_pio2+0x546>
 80053f4:	4660      	mov	r0, ip
 80053f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053fa:	4639      	mov	r1, r7
 80053fc:	f7fa feae 	bl	800015c <__adddf3>
 8005400:	3601      	adds	r6, #1
 8005402:	4684      	mov	ip, r0
 8005404:	460f      	mov	r7, r1
 8005406:	e7c2      	b.n	800538e <__kernel_rem_pio2+0x562>
 8005408:	e9da 6700 	ldrd	r6, r7, [sl]
 800540c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005410:	4632      	mov	r2, r6
 8005412:	463b      	mov	r3, r7
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fa fea0 	bl	800015c <__adddf3>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005424:	4640      	mov	r0, r8
 8005426:	4649      	mov	r1, r9
 8005428:	f7fa fe96 	bl	8000158 <__aeabi_dsub>
 800542c:	4632      	mov	r2, r6
 800542e:	463b      	mov	r3, r7
 8005430:	f7fa fe94 	bl	800015c <__adddf3>
 8005434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005438:	e86a 0102 	strd	r0, r1, [sl], #-8
 800543c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005440:	e9ca 2300 	strd	r2, r3, [sl]
 8005444:	e762      	b.n	800530c <__kernel_rem_pio2+0x4e0>
 8005446:	e9da 8900 	ldrd	r8, r9, [sl]
 800544a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800544e:	4642      	mov	r2, r8
 8005450:	464b      	mov	r3, r9
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7fa fe81 	bl	800015c <__adddf3>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fa fe77 	bl	8000158 <__aeabi_dsub>
 800546a:	4642      	mov	r2, r8
 800546c:	464b      	mov	r3, r9
 800546e:	f7fa fe75 	bl	800015c <__adddf3>
 8005472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005476:	e86a 0102 	strd	r0, r1, [sl], #-8
 800547a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800547e:	e9ca 2300 	strd	r2, r3, [sl]
 8005482:	e748      	b.n	8005316 <__kernel_rem_pio2+0x4ea>
 8005484:	4638      	mov	r0, r7
 8005486:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800548a:	4631      	mov	r1, r6
 800548c:	f7fa fe66 	bl	800015c <__adddf3>
 8005490:	3c01      	subs	r4, #1
 8005492:	4607      	mov	r7, r0
 8005494:	460e      	mov	r6, r1
 8005496:	e744      	b.n	8005322 <__kernel_rem_pio2+0x4f6>
 8005498:	9b01      	ldr	r3, [sp, #4]
 800549a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800549e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80054a2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80054a6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80054aa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80054ae:	601d      	str	r5, [r3, #0]
 80054b0:	615e      	str	r6, [r3, #20]
 80054b2:	e71b      	b.n	80052ec <__kernel_rem_pio2+0x4c0>
 80054b4:	41700000 	.word	0x41700000
 80054b8:	3e700000 	.word	0x3e700000
 80054bc:	00000000 	.word	0x00000000

080054c0 <__kernel_sin>:
 80054c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	b086      	sub	sp, #24
 80054c6:	e9cd 2300 	strd	r2, r3, [sp]
 80054ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80054d2:	4682      	mov	sl, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80054d8:	da03      	bge.n	80054e2 <__kernel_sin+0x22>
 80054da:	f7fb fa8f 	bl	80009fc <__aeabi_d2iz>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d050      	beq.n	8005584 <__kernel_sin+0xc4>
 80054e2:	4652      	mov	r2, sl
 80054e4:	4623      	mov	r3, r4
 80054e6:	4650      	mov	r0, sl
 80054e8:	4621      	mov	r1, r4
 80054ea:	f7fa ffed 	bl	80004c8 <__aeabi_dmul>
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4650      	mov	r0, sl
 80054f8:	4621      	mov	r1, r4
 80054fa:	f7fa ffe5 	bl	80004c8 <__aeabi_dmul>
 80054fe:	a33e      	add	r3, pc, #248	; (adr r3, 80055f8 <__kernel_sin+0x138>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	4680      	mov	r8, r0
 8005506:	4689      	mov	r9, r1
 8005508:	4630      	mov	r0, r6
 800550a:	4639      	mov	r1, r7
 800550c:	f7fa ffdc 	bl	80004c8 <__aeabi_dmul>
 8005510:	a33b      	add	r3, pc, #236	; (adr r3, 8005600 <__kernel_sin+0x140>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fa fe1f 	bl	8000158 <__aeabi_dsub>
 800551a:	4632      	mov	r2, r6
 800551c:	463b      	mov	r3, r7
 800551e:	f7fa ffd3 	bl	80004c8 <__aeabi_dmul>
 8005522:	a339      	add	r3, pc, #228	; (adr r3, 8005608 <__kernel_sin+0x148>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa fe18 	bl	800015c <__adddf3>
 800552c:	4632      	mov	r2, r6
 800552e:	463b      	mov	r3, r7
 8005530:	f7fa ffca 	bl	80004c8 <__aeabi_dmul>
 8005534:	a336      	add	r3, pc, #216	; (adr r3, 8005610 <__kernel_sin+0x150>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fa fe0d 	bl	8000158 <__aeabi_dsub>
 800553e:	4632      	mov	r2, r6
 8005540:	463b      	mov	r3, r7
 8005542:	f7fa ffc1 	bl	80004c8 <__aeabi_dmul>
 8005546:	a334      	add	r3, pc, #208	; (adr r3, 8005618 <__kernel_sin+0x158>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fa fe06 	bl	800015c <__adddf3>
 8005550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005554:	b9dd      	cbnz	r5, 800558e <__kernel_sin+0xce>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fa ffb3 	bl	80004c8 <__aeabi_dmul>
 8005562:	a32f      	add	r3, pc, #188	; (adr r3, 8005620 <__kernel_sin+0x160>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa fdf6 	bl	8000158 <__aeabi_dsub>
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	f7fa ffaa 	bl	80004c8 <__aeabi_dmul>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4650      	mov	r0, sl
 800557a:	4621      	mov	r1, r4
 800557c:	f7fa fdee 	bl	800015c <__adddf3>
 8005580:	4682      	mov	sl, r0
 8005582:	460c      	mov	r4, r1
 8005584:	4650      	mov	r0, sl
 8005586:	4621      	mov	r1, r4
 8005588:	b006      	add	sp, #24
 800558a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558e:	2200      	movs	r2, #0
 8005590:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005594:	4b24      	ldr	r3, [pc, #144]	; (8005628 <__kernel_sin+0x168>)
 8005596:	f7fa ff97 	bl	80004c8 <__aeabi_dmul>
 800559a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800559e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055a2:	4640      	mov	r0, r8
 80055a4:	4649      	mov	r1, r9
 80055a6:	f7fa ff8f 	bl	80004c8 <__aeabi_dmul>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b2:	f7fa fdd1 	bl	8000158 <__aeabi_dsub>
 80055b6:	4632      	mov	r2, r6
 80055b8:	463b      	mov	r3, r7
 80055ba:	f7fa ff85 	bl	80004c8 <__aeabi_dmul>
 80055be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055c2:	f7fa fdc9 	bl	8000158 <__aeabi_dsub>
 80055c6:	a316      	add	r3, pc, #88	; (adr r3, 8005620 <__kernel_sin+0x160>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fa ff78 	bl	80004c8 <__aeabi_dmul>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4630      	mov	r0, r6
 80055de:	4639      	mov	r1, r7
 80055e0:	f7fa fdbc 	bl	800015c <__adddf3>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4650      	mov	r0, sl
 80055ea:	4621      	mov	r1, r4
 80055ec:	f7fa fdb4 	bl	8000158 <__aeabi_dsub>
 80055f0:	e7c6      	b.n	8005580 <__kernel_sin+0xc0>
 80055f2:	bf00      	nop
 80055f4:	f3af 8000 	nop.w
 80055f8:	5acfd57c 	.word	0x5acfd57c
 80055fc:	3de5d93a 	.word	0x3de5d93a
 8005600:	8a2b9ceb 	.word	0x8a2b9ceb
 8005604:	3e5ae5e6 	.word	0x3e5ae5e6
 8005608:	57b1fe7d 	.word	0x57b1fe7d
 800560c:	3ec71de3 	.word	0x3ec71de3
 8005610:	19c161d5 	.word	0x19c161d5
 8005614:	3f2a01a0 	.word	0x3f2a01a0
 8005618:	1110f8a6 	.word	0x1110f8a6
 800561c:	3f811111 	.word	0x3f811111
 8005620:	55555549 	.word	0x55555549
 8005624:	3fc55555 	.word	0x3fc55555
 8005628:	3fe00000 	.word	0x3fe00000

0800562c <fabs>:
 800562c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005630:	4770      	bx	lr
 8005632:	0000      	movs	r0, r0
 8005634:	0000      	movs	r0, r0
	...

08005638 <floor>:
 8005638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800563c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005640:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005644:	2e13      	cmp	r6, #19
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4607      	mov	r7, r0
 800564c:	460c      	mov	r4, r1
 800564e:	4605      	mov	r5, r0
 8005650:	dc34      	bgt.n	80056bc <floor+0x84>
 8005652:	2e00      	cmp	r6, #0
 8005654:	da15      	bge.n	8005682 <floor+0x4a>
 8005656:	a334      	add	r3, pc, #208	; (adr r3, 8005728 <floor+0xf0>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f7fa fd7e 	bl	800015c <__adddf3>
 8005660:	2200      	movs	r2, #0
 8005662:	2300      	movs	r3, #0
 8005664:	f7fb f9c0 	bl	80009e8 <__aeabi_dcmpgt>
 8005668:	b140      	cbz	r0, 800567c <floor+0x44>
 800566a:	2c00      	cmp	r4, #0
 800566c:	da59      	bge.n	8005722 <floor+0xea>
 800566e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005672:	ea57 0503 	orrs.w	r5, r7, r3
 8005676:	d001      	beq.n	800567c <floor+0x44>
 8005678:	2500      	movs	r5, #0
 800567a:	4c2d      	ldr	r4, [pc, #180]	; (8005730 <floor+0xf8>)
 800567c:	4623      	mov	r3, r4
 800567e:	462f      	mov	r7, r5
 8005680:	e025      	b.n	80056ce <floor+0x96>
 8005682:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <floor+0xfc>)
 8005684:	fa42 f806 	asr.w	r8, r2, r6
 8005688:	ea01 0208 	and.w	r2, r1, r8
 800568c:	4302      	orrs	r2, r0
 800568e:	d01e      	beq.n	80056ce <floor+0x96>
 8005690:	a325      	add	r3, pc, #148	; (adr r3, 8005728 <floor+0xf0>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f7fa fd61 	bl	800015c <__adddf3>
 800569a:	2200      	movs	r2, #0
 800569c:	2300      	movs	r3, #0
 800569e:	f7fb f9a3 	bl	80009e8 <__aeabi_dcmpgt>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d0ea      	beq.n	800567c <floor+0x44>
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	bfbe      	ittt	lt
 80056aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80056ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80056b2:	19a4      	addlt	r4, r4, r6
 80056b4:	2500      	movs	r5, #0
 80056b6:	ea24 0408 	bic.w	r4, r4, r8
 80056ba:	e7df      	b.n	800567c <floor+0x44>
 80056bc:	2e33      	cmp	r6, #51	; 0x33
 80056be:	dd0a      	ble.n	80056d6 <floor+0x9e>
 80056c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80056c4:	d103      	bne.n	80056ce <floor+0x96>
 80056c6:	f7fa fd49 	bl	800015c <__adddf3>
 80056ca:	4607      	mov	r7, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4638      	mov	r0, r7
 80056d0:	4619      	mov	r1, r3
 80056d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056da:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80056de:	fa22 f808 	lsr.w	r8, r2, r8
 80056e2:	ea18 0f00 	tst.w	r8, r0
 80056e6:	d0f2      	beq.n	80056ce <floor+0x96>
 80056e8:	a30f      	add	r3, pc, #60	; (adr r3, 8005728 <floor+0xf0>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f7fa fd35 	bl	800015c <__adddf3>
 80056f2:	2200      	movs	r2, #0
 80056f4:	2300      	movs	r3, #0
 80056f6:	f7fb f977 	bl	80009e8 <__aeabi_dcmpgt>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d0be      	beq.n	800567c <floor+0x44>
 80056fe:	2c00      	cmp	r4, #0
 8005700:	da02      	bge.n	8005708 <floor+0xd0>
 8005702:	2e14      	cmp	r6, #20
 8005704:	d103      	bne.n	800570e <floor+0xd6>
 8005706:	3401      	adds	r4, #1
 8005708:	ea25 0508 	bic.w	r5, r5, r8
 800570c:	e7b6      	b.n	800567c <floor+0x44>
 800570e:	2301      	movs	r3, #1
 8005710:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005714:	fa03 f606 	lsl.w	r6, r3, r6
 8005718:	4435      	add	r5, r6
 800571a:	42bd      	cmp	r5, r7
 800571c:	bf38      	it	cc
 800571e:	18e4      	addcc	r4, r4, r3
 8005720:	e7f2      	b.n	8005708 <floor+0xd0>
 8005722:	2500      	movs	r5, #0
 8005724:	462c      	mov	r4, r5
 8005726:	e7a9      	b.n	800567c <floor+0x44>
 8005728:	8800759c 	.word	0x8800759c
 800572c:	7e37e43c 	.word	0x7e37e43c
 8005730:	bff00000 	.word	0xbff00000
 8005734:	000fffff 	.word	0x000fffff

08005738 <scalbn>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800573e:	4604      	mov	r4, r0
 8005740:	460d      	mov	r5, r1
 8005742:	4617      	mov	r7, r2
 8005744:	460b      	mov	r3, r1
 8005746:	b996      	cbnz	r6, 800576e <scalbn+0x36>
 8005748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800574c:	4303      	orrs	r3, r0
 800574e:	d039      	beq.n	80057c4 <scalbn+0x8c>
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <scalbn+0xf0>)
 8005752:	2200      	movs	r2, #0
 8005754:	f7fa feb8 	bl	80004c8 <__aeabi_dmul>
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <scalbn+0xf4>)
 800575a:	4604      	mov	r4, r0
 800575c:	429f      	cmp	r7, r3
 800575e:	460d      	mov	r5, r1
 8005760:	da0f      	bge.n	8005782 <scalbn+0x4a>
 8005762:	a32d      	add	r3, pc, #180	; (adr r3, 8005818 <scalbn+0xe0>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa feae 	bl	80004c8 <__aeabi_dmul>
 800576c:	e006      	b.n	800577c <scalbn+0x44>
 800576e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005772:	4296      	cmp	r6, r2
 8005774:	d10a      	bne.n	800578c <scalbn+0x54>
 8005776:	4602      	mov	r2, r0
 8005778:	f7fa fcf0 	bl	800015c <__adddf3>
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
 8005780:	e020      	b.n	80057c4 <scalbn+0x8c>
 8005782:	460b      	mov	r3, r1
 8005784:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005788:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800578c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005790:	19b9      	adds	r1, r7, r6
 8005792:	4291      	cmp	r1, r2
 8005794:	dd0e      	ble.n	80057b4 <scalbn+0x7c>
 8005796:	a322      	add	r3, pc, #136	; (adr r3, 8005820 <scalbn+0xe8>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80057a0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80057a4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80057a8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80057ac:	4820      	ldr	r0, [pc, #128]	; (8005830 <scalbn+0xf8>)
 80057ae:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80057b2:	e7d9      	b.n	8005768 <scalbn+0x30>
 80057b4:	2900      	cmp	r1, #0
 80057b6:	dd08      	ble.n	80057ca <scalbn+0x92>
 80057b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80057ce:	da16      	bge.n	80057fe <scalbn+0xc6>
 80057d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80057d4:	429f      	cmp	r7, r3
 80057d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80057da:	dd08      	ble.n	80057ee <scalbn+0xb6>
 80057dc:	4c15      	ldr	r4, [pc, #84]	; (8005834 <scalbn+0xfc>)
 80057de:	4814      	ldr	r0, [pc, #80]	; (8005830 <scalbn+0xf8>)
 80057e0:	f363 74df 	bfi	r4, r3, #31, #1
 80057e4:	a30e      	add	r3, pc, #56	; (adr r3, 8005820 <scalbn+0xe8>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	4621      	mov	r1, r4
 80057ec:	e7bc      	b.n	8005768 <scalbn+0x30>
 80057ee:	4c12      	ldr	r4, [pc, #72]	; (8005838 <scalbn+0x100>)
 80057f0:	4812      	ldr	r0, [pc, #72]	; (800583c <scalbn+0x104>)
 80057f2:	f363 74df 	bfi	r4, r3, #31, #1
 80057f6:	a308      	add	r3, pc, #32	; (adr r3, 8005818 <scalbn+0xe0>)
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	e7f5      	b.n	80057ea <scalbn+0xb2>
 80057fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005802:	3136      	adds	r1, #54	; 0x36
 8005804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005808:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800580c:	4620      	mov	r0, r4
 800580e:	4629      	mov	r1, r5
 8005810:	2200      	movs	r2, #0
 8005812:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <scalbn+0x108>)
 8005814:	e7a8      	b.n	8005768 <scalbn+0x30>
 8005816:	bf00      	nop
 8005818:	c2f8f359 	.word	0xc2f8f359
 800581c:	01a56e1f 	.word	0x01a56e1f
 8005820:	8800759c 	.word	0x8800759c
 8005824:	7e37e43c 	.word	0x7e37e43c
 8005828:	43500000 	.word	0x43500000
 800582c:	ffff3cb0 	.word	0xffff3cb0
 8005830:	8800759c 	.word	0x8800759c
 8005834:	7e37e43c 	.word	0x7e37e43c
 8005838:	01a56e1f 	.word	0x01a56e1f
 800583c:	c2f8f359 	.word	0xc2f8f359
 8005840:	3c900000 	.word	0x3c900000

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
