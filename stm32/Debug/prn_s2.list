
prn_s2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005694  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080057a8  080057a8  000157a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080059a8  080059a8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059a8  080059a8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000014  080059c4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080059c4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc2b  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e47  00000000  00000000  0002dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00030878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fd8  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb2c  00000000  00000000  00049558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1f2  00000000  00000000  00059084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  000e82cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	0800578c 	.word	0x0800578c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	0800578c 	.word	0x0800578c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__gesf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000af0:	e006      	b.n	8000b00 <__cmpsf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__lesf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpsf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpsf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b16:	d011      	beq.n	8000b3c <__cmpsf2+0x40>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b1e:	bf18      	it	ne
 8000b20:	ea90 0f01 	teqne	r0, r1
 8000b24:	bf58      	it	pl
 8000b26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b2a:	bf88      	it	hi
 8000b2c:	17c8      	asrhi	r0, r1, #31
 8000b2e:	bf38      	it	cc
 8000b30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b34:	bf18      	it	ne
 8000b36:	f040 0001 	orrne.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	d102      	bne.n	8000b48 <__cmpsf2+0x4c>
 8000b42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b46:	d105      	bne.n	8000b54 <__cmpsf2+0x58>
 8000b48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b4c:	d1e4      	bne.n	8000b18 <__cmpsf2+0x1c>
 8000b4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b52:	d0e1      	beq.n	8000b18 <__cmpsf2+0x1c>
 8000b54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_cfrcmple>:
 8000b5c:	4684      	mov	ip, r0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4661      	mov	r1, ip
 8000b62:	e7ff      	b.n	8000b64 <__aeabi_cfcmpeq>

08000b64 <__aeabi_cfcmpeq>:
 8000b64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b66:	f7ff ffc9 	bl	8000afc <__cmpsf2>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	bf48      	it	mi
 8000b6e:	f110 0f00 	cmnmi.w	r0, #0
 8000b72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b74 <__aeabi_fcmpeq>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff fff4 	bl	8000b64 <__aeabi_cfcmpeq>
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2001      	moveq	r0, #1
 8000b80:	2000      	movne	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_fcmplt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffea 	bl	8000b64 <__aeabi_cfcmpeq>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_fcmple>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffe0 	bl	8000b64 <__aeabi_cfcmpeq>
 8000ba4:	bf94      	ite	ls
 8000ba6:	2001      	movls	r0, #1
 8000ba8:	2000      	movhi	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fcmpge>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffd2 	bl	8000b5c <__aeabi_cfrcmple>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmpgt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffc8 	bl	8000b5c <__aeabi_cfrcmple>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 f857 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 fa65 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fda9 	bl	800173c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bea:	f000 fc1d 	bl	8001428 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bee:	f000 fc9b 	bl	8001528 <MX_TIM3_Init>
  MX_DMA_Init();
 8000bf2:	f000 fd85 	bl	8001700 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bf6:	f000 fab7 	bl	8001168 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000bfa:	f000 fd0b 	bl	8001614 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000bfe:	f000 fb67 	bl	80012d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000c02:	f000 fb37 	bl	8001274 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Create SPWM Array (DO NOT CHANGE)

  for (int i=0; i<(sinDivision/2); i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	e054      	b.n	8000cb6 <main+0xde>
  {
	  spwmArrayTemp = sin((i+0.5) * 2 * M_PI / sinDivision) * period;
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fbf1 	bl	80003f4 <__aeabi_i2d>
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	4bc0      	ldr	r3, [pc, #768]	; (8000f18 <main+0x340>)
 8000c18:	f7ff faa0 	bl	800015c <__adddf3>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	f7ff fa98 	bl	800015c <__adddf3>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	a3b4      	add	r3, pc, #720	; (adr r3, 8000f08 <main+0x330>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fc45 	bl	80004c8 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4614      	mov	r4, r2
 8000c44:	461d      	mov	r5, r3
 8000c46:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbd2 	bl	80003f4 <__aeabi_i2d>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	f7ff fd60 	bl	800071c <__aeabi_ddiv>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f003 fd92 	bl	800478c <sin>
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	4bab      	ldr	r3, [pc, #684]	; (8000f1c <main+0x344>)
 8000c6e:	f7ff fc2b 	bl	80004c8 <__aeabi_dmul>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	4610      	mov	r0, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f7ff fee7 	bl	8000a4c <__aeabi_d2f>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4aa7      	ldr	r2, [pc, #668]	; (8000f20 <main+0x348>)
 8000c82:	6013      	str	r3, [r2, #0]
	  spwmArray[i] = (int)(spwmArrayTemp+0.5);
 8000c84:	4ba6      	ldr	r3, [pc, #664]	; (8000f20 <main+0x348>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fbc5 	bl	8000418 <__aeabi_f2d>
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4ba1      	ldr	r3, [pc, #644]	; (8000f18 <main+0x340>)
 8000c94:	f7ff fa62 	bl	800015c <__adddf3>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f7ff feac 	bl	80009fc <__aeabi_d2iz>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4a9e      	ldr	r2, [pc, #632]	; (8000f24 <main+0x34c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<(sinDivision/2); i++)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cba:	0fda      	lsrs	r2, r3, #31
 8000cbc:	4413      	add	r3, r2
 8000cbe:	105b      	asrs	r3, r3, #1
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dba1      	blt.n	8000c0c <main+0x34>
  }

  htim2.Instance->CCR2 = 0;
 8000cc8:	4b97      	ldr	r3, [pc, #604]	; (8000f28 <main+0x350>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR3 = 0;
 8000cd0:	4b95      	ldr	r3, [pc, #596]	; (8000f28 <main+0x350>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_Base_Start_IT(&htim2);
 8000cd8:	4893      	ldr	r0, [pc, #588]	; (8000f28 <main+0x350>)
 8000cda:	f002 ff09 	bl	8003af0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4891      	ldr	r0, [pc, #580]	; (8000f28 <main+0x350>)
 8000ce2:	f002 ffaf 	bl	8003c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	488f      	ldr	r0, [pc, #572]	; (8000f28 <main+0x350>)
 8000cea:	f002 ffab 	bl	8003c44 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	488e      	ldr	r0, [pc, #568]	; (8000f2c <main+0x354>)
 8000cf2:	f002 ffa7 	bl	8003c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	488c      	ldr	r0, [pc, #560]	; (8000f2c <main+0x354>)
 8000cfa:	f002 ffa3 	bl	8003c44 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	488b      	ldr	r0, [pc, #556]	; (8000f30 <main+0x358>)
 8000d02:	f002 ff9f 	bl	8003c44 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d06:	2100      	movs	r1, #0
 8000d08:	488a      	ldr	r0, [pc, #552]	; (8000f34 <main+0x35c>)
 8000d0a:	f002 ff9b 	bl	8003c44 <HAL_TIM_PWM_Start>

  // Set all PWM to Zero
  TIM1->CCR1 = 0;
 8000d0e:	4b8a      	ldr	r3, [pc, #552]	; (8000f38 <main+0x360>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = nowIsolatedBuckValue;
 8000d14:	4b89      	ldr	r3, [pc, #548]	; (8000f3c <main+0x364>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b87      	ldr	r3, [pc, #540]	; (8000f38 <main+0x360>)
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38

  TIM3->CCR1 = nowBoostValue;
 8000d1c:	4b88      	ldr	r3, [pc, #544]	; (8000f40 <main+0x368>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b88      	ldr	r3, [pc, #544]	; (8000f44 <main+0x36c>)
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34

  TIM4->CCR1 = nowInputGateValue;
 8000d24:	4b88      	ldr	r3, [pc, #544]	; (8000f48 <main+0x370>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b88      	ldr	r3, [pc, #544]	; (8000f4c <main+0x374>)
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // increase led counter
	  ledCounter += 1;
 8000d2c:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <main+0x378>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <main+0x378>)
 8000d34:	6013      	str	r3, [r2, #0]

	  // Read Sensor
	  HAL_ADC_Start_DMA(&hadc1, adcReading, 6);
 8000d36:	2206      	movs	r2, #6
 8000d38:	4986      	ldr	r1, [pc, #536]	; (8000f54 <main+0x37c>)
 8000d3a:	4887      	ldr	r0, [pc, #540]	; (8000f58 <main+0x380>)
 8000d3c:	f001 f8e2 	bl	8001f04 <HAL_ADC_Start_DMA>

	  adcValue0 = adcReading[0];
 8000d40:	4b84      	ldr	r3, [pc, #528]	; (8000f54 <main+0x37c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b85      	ldr	r3, [pc, #532]	; (8000f5c <main+0x384>)
 8000d48:	601a      	str	r2, [r3, #0]
	  adcValue1 = adcReading[1];
 8000d4a:	4b82      	ldr	r3, [pc, #520]	; (8000f54 <main+0x37c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b83      	ldr	r3, [pc, #524]	; (8000f60 <main+0x388>)
 8000d52:	601a      	str	r2, [r3, #0]
	  adcValue2 = adcReading[2];
 8000d54:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <main+0x37c>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b82      	ldr	r3, [pc, #520]	; (8000f64 <main+0x38c>)
 8000d5c:	601a      	str	r2, [r3, #0]
	  adcValue3 = adcReading[3];
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <main+0x37c>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <main+0x390>)
 8000d66:	601a      	str	r2, [r3, #0]
	  adcValue4 = adcReading[4];
 8000d68:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <main+0x37c>)
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b7f      	ldr	r3, [pc, #508]	; (8000f6c <main+0x394>)
 8000d70:	601a      	str	r2, [r3, #0]
	  adcValue5 = adcReading[5];
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <main+0x37c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b7d      	ldr	r3, [pc, #500]	; (8000f70 <main+0x398>)
 8000d7a:	601a      	str	r2, [r3, #0]

	  batteryVoltage = ((adcValue0 / 4096.0) * 3.3) * 21 ;
 8000d7c:	4b77      	ldr	r3, [pc, #476]	; (8000f5c <main+0x384>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb37 	bl	80003f4 <__aeabi_i2d>
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b7a      	ldr	r3, [pc, #488]	; (8000f74 <main+0x39c>)
 8000d8c:	f7ff fcc6 	bl	800071c <__aeabi_ddiv>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	a35d      	add	r3, pc, #372	; (adr r3, 8000f10 <main+0x338>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fb93 	bl	80004c8 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <main+0x3a0>)
 8000db0:	f7ff fb8a 	bl	80004c8 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fe46 	bl	8000a4c <__aeabi_d2f>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a6e      	ldr	r2, [pc, #440]	; (8000f7c <main+0x3a4>)
 8000dc4:	6013      	str	r3, [r2, #0]
	  inputVoltage = ((adcValue1 / 4096.0) * 3.3) * 21 ;
 8000dc6:	4b66      	ldr	r3, [pc, #408]	; (8000f60 <main+0x388>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb12 	bl	80003f4 <__aeabi_i2d>
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <main+0x39c>)
 8000dd6:	f7ff fca1 	bl	800071c <__aeabi_ddiv>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	a34b      	add	r3, pc, #300	; (adr r3, 8000f10 <main+0x338>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fb6e 	bl	80004c8 <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <main+0x3a0>)
 8000dfa:	f7ff fb65 	bl	80004c8 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f7ff fe21 	bl	8000a4c <__aeabi_d2f>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a5c      	ldr	r2, [pc, #368]	; (8000f80 <main+0x3a8>)
 8000e0e:	6013      	str	r3, [r2, #0]
	  ctVoltage = ((adcValue3 / 4096.0) * 3.3) * 21 ;
 8000e10:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <main+0x390>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff faed 	bl	80003f4 <__aeabi_i2d>
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <main+0x39c>)
 8000e20:	f7ff fc7c 	bl	800071c <__aeabi_ddiv>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	a338      	add	r3, pc, #224	; (adr r3, 8000f10 <main+0x338>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fb49 	bl	80004c8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <main+0x3a0>)
 8000e44:	f7ff fb40 	bl	80004c8 <__aeabi_dmul>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f7ff fdfc 	bl	8000a4c <__aeabi_d2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a4b      	ldr	r2, [pc, #300]	; (8000f84 <main+0x3ac>)
 8000e58:	6013      	str	r3, [r2, #0]

	  temperature1 = ((adcValue4 / 4096) * 3.3) * 100;
 8000e5a:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <main+0x394>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da01      	bge.n	8000e66 <main+0x28e>
 8000e62:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e66:	131b      	asrs	r3, r3, #12
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fac3 	bl	80003f4 <__aeabi_i2d>
 8000e6e:	a328      	add	r3, pc, #160	; (adr r3, 8000f10 <main+0x338>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	f7ff fb28 	bl	80004c8 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <main+0x3b0>)
 8000e86:	f7ff fb1f 	bl	80004c8 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fddb 	bl	8000a4c <__aeabi_d2f>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a3c      	ldr	r2, [pc, #240]	; (8000f8c <main+0x3b4>)
 8000e9a:	6013      	str	r3, [r2, #0]
	  temperature2 = ((adcValue5 / 4096) * 3.3) * 100;
 8000e9c:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <main+0x398>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da01      	bge.n	8000ea8 <main+0x2d0>
 8000ea4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000ea8:	131b      	asrs	r3, r3, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff faa2 	bl	80003f4 <__aeabi_i2d>
 8000eb0:	a317      	add	r3, pc, #92	; (adr r3, 8000f10 <main+0x338>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb07 	bl	80004c8 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <main+0x3b0>)
 8000ec8:	f7ff fafe 	bl	80004c8 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fdba 	bl	8000a4c <__aeabi_d2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <main+0x3b8>)
 8000edc:	6013      	str	r3, [r2, #0]


	  // Take Action based on Battery Voltage
	  if (batteryVoltage > 50)
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <main+0x3a4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	492c      	ldr	r1, [pc, #176]	; (8000f94 <main+0x3bc>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe6d 	bl	8000bc4 <__aeabi_fcmpgt>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <main+0x31e>
	  {
		  inverterMode = 1;
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <main+0x3c0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
	  }

	  if (batteryVoltage < 40)
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <main+0x3a4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4928      	ldr	r1, [pc, #160]	; (8000f9c <main+0x3c4>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fe43 	bl	8000b88 <__aeabi_fcmplt>
 8000f02:	e04d      	b.n	8000fa0 <main+0x3c8>
 8000f04:	f3af 8000 	nop.w
 8000f08:	54442d18 	.word	0x54442d18
 8000f0c:	400921fb 	.word	0x400921fb
 8000f10:	66666666 	.word	0x66666666
 8000f14:	400a6666 	.word	0x400a6666
 8000f18:	3fe00000 	.word	0x3fe00000
 8000f1c:	4082c000 	.word	0x4082c000
 8000f20:	200004cc 	.word	0x200004cc
 8000f24:	2000018c 	.word	0x2000018c
 8000f28:	20000484 	.word	0x20000484
 8000f2c:	20000434 	.word	0x20000434
 8000f30:	20000114 	.word	0x20000114
 8000f34:	20000060 	.word	0x20000060
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	20000034 	.word	0x20000034
 8000f40:	20000038 	.word	0x20000038
 8000f44:	40000400 	.word	0x40000400
 8000f48:	2000003c 	.word	0x2000003c
 8000f4c:	40000800 	.word	0x40000800
 8000f50:	20000058 	.word	0x20000058
 8000f54:	200000fc 	.word	0x200000fc
 8000f58:	2000015c 	.word	0x2000015c
 8000f5c:	20000040 	.word	0x20000040
 8000f60:	20000044 	.word	0x20000044
 8000f64:	20000048 	.word	0x20000048
 8000f68:	2000004c 	.word	0x2000004c
 8000f6c:	20000050 	.word	0x20000050
 8000f70:	20000054 	.word	0x20000054
 8000f74:	40b00000 	.word	0x40b00000
 8000f78:	40350000 	.word	0x40350000
 8000f7c:	20000480 	.word	0x20000480
 8000f80:	200003ec 	.word	0x200003ec
 8000f84:	200003e8 	.word	0x200003e8
 8000f88:	40590000 	.word	0x40590000
 8000f8c:	2000005c 	.word	0x2000005c
 8000f90:	200004d0 	.word	0x200004d0
 8000f94:	42480000 	.word	0x42480000
 8000f98:	20000030 	.word	0x20000030
 8000f9c:	42200000 	.word	0x42200000
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <main+0x3d4>
	  {
		  inverterMode = 0;
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <main+0x4a4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
	  }

	  // Decide Mode to be used
	  // If Charging Mode is used
	  if (inverterMode == 0)
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <main+0x4a4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d13b      	bne.n	800102c <main+0x454>
	  {
		  // Turn off inverter mode mosfet

		  // Stop Input Voltage
		  nowInputGateValue = 0;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <main+0x4a8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
		  TIM4->CCR1 = nowInputGateValue;
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <main+0x4a8>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <main+0x4ac>)
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34

		  // Stop isolated buck converter
		  nowIsolatedBuckValue = 0;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <main+0x4b0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
		  TIM1->CCR2 = nowIsolatedBuckValue;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <main+0x4b0>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <main+0x4b4>)
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38


		  // Run Boost Converter
		  nowBoostValue = maxBoostValue * 30.0 / 100.0;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <main+0x4b8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa0d 	bl	80003f4 <__aeabi_i2d>
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <main+0x4bc>)
 8000fe0:	f7ff fa72 	bl	80004c8 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <main+0x4c0>)
 8000ff2:	f7ff fb93 	bl	800071c <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fcfd 	bl	80009fc <__aeabi_d2iz>
 8001002:	4603      	mov	r3, r0
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <main+0x4c4>)
 8001006:	6013      	str	r3, [r2, #0]
		  TIM3->CCR1 = nowBoostValue;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0x4c4>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <main+0x4c8>)
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
		  {
			  //do here
		  }


		  if (ledCounter >= 5000)
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <main+0x4cc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f241 3287 	movw	r2, #4999	; 0x1387
 8001018:	4293      	cmp	r3, r2
 800101a:	dd07      	ble.n	800102c <main+0x454>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800101c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <main+0x4d0>)
 8001022:	f001 fefb 	bl	8002e1c <HAL_GPIO_TogglePin>
			  ledCounter = 0;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <main+0x4cc>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
		  }
	  }

	  // If Inverter Mode is used
	  if (inverterMode == 1)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <main+0x4a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	f47f ae7b 	bne.w	8000d2c <main+0x154>
	  {
		  // Turn off charging mode mosfet

		  // Stop Boost Converter
		  nowBoostValue = 0;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <main+0x4c4>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
		  TIM3->CCR1 = nowBoostValue;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <main+0x4c4>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <main+0x4c8>)
 8001042:	635a      	str	r2, [r3, #52]	; 0x34

		  // Run Isolated Buck Converter
		  nowIsolatedBuckValue = maxIsolatedBuckValue / 2;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <main+0x4d4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0fda      	lsrs	r2, r3, #31
 800104a:	4413      	add	r3, r2
 800104c:	105b      	asrs	r3, r3, #1
 800104e:	461a      	mov	r2, r3
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <main+0x4b0>)
 8001052:	601a      	str	r2, [r3, #0]
		  TIM1->CCR2 = nowIsolatedBuckValue;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <main+0x4b0>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <main+0x4b4>)
 800105a:	639a      	str	r2, [r3, #56]	; 0x38

		  // Activate Forward Mosfet

		  // Conditioning input voltage

		  if (ledCounter >= 10000)
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <main+0x4cc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f242 720f 	movw	r2, #9999	; 0x270f
 8001064:	4293      	cmp	r3, r2
 8001066:	f77f ae61 	ble.w	8000d2c <main+0x154>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <main+0x4d0>)
 8001070:	f001 fed4 	bl	8002e1c <HAL_GPIO_TogglePin>
			  ledCounter = 0;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <main+0x4cc>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
	  ledCounter += 1;
 800107a:	e657      	b.n	8000d2c <main+0x154>
 800107c:	20000030 	.word	0x20000030
 8001080:	2000003c 	.word	0x2000003c
 8001084:	40000800 	.word	0x40000800
 8001088:	20000034 	.word	0x20000034
 800108c:	40012c00 	.word	0x40012c00
 8001090:	20000004 	.word	0x20000004
 8001094:	403e0000 	.word	0x403e0000
 8001098:	40590000 	.word	0x40590000
 800109c:	20000038 	.word	0x20000038
 80010a0:	40000400 	.word	0x40000400
 80010a4:	20000058 	.word	0x20000058
 80010a8:	40011000 	.word	0x40011000
 80010ac:	20000000 	.word	0x20000000

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fb5c 	bl	800477c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	4618      	mov	r0, r3
 8001108:	f001 ffe6 	bl	80030d8 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001112:	f000 fb6b 	bl	80017ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fa50 	bl	80035d8 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800113e:	f000 fb55 	bl	80017ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001142:	2302      	movs	r3, #2
 8001144:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001146:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800114a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fbc8 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800115a:	f000 fb47 	bl	80017ec <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	; 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <MX_ADC1_Init+0x104>)
 800117a:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <MX_ADC1_Init+0x108>)
 800117c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <MX_ADC1_Init+0x104>)
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <MX_ADC1_Init+0x104>)
 8001188:	2200      	movs	r2, #0
 800118a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <MX_ADC1_Init+0x104>)
 800118e:	2200      	movs	r2, #0
 8001190:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <MX_ADC1_Init+0x104>)
 8001194:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001198:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119a:	4b34      	ldr	r3, [pc, #208]	; (800126c <MX_ADC1_Init+0x104>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <MX_ADC1_Init+0x104>)
 80011a2:	2206      	movs	r2, #6
 80011a4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a6:	4831      	ldr	r0, [pc, #196]	; (800126c <MX_ADC1_Init+0x104>)
 80011a8:	f000 fdd4 	bl	8001d54 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011b2:	f000 fb1b 	bl	80017ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011be:	2307      	movs	r3, #7
 80011c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4829      	ldr	r0, [pc, #164]	; (800126c <MX_ADC1_Init+0x104>)
 80011c8:	f000 ff96 	bl	80020f8 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 fb0b 	bl	80017ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d6:	2303      	movs	r3, #3
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011da:	2302      	movs	r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <MX_ADC1_Init+0x104>)
 80011e4:	f000 ff88 	bl	80020f8 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f000 fafd 	bl	80017ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011f6:	2303      	movs	r3, #3
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_ADC1_Init+0x104>)
 8001200:	f000 ff7a 	bl	80020f8 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800120a:	f000 faef 	bl	80017ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800120e:	2305      	movs	r3, #5
 8001210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001212:	2304      	movs	r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <MX_ADC1_Init+0x104>)
 800121c:	f000 ff6c 	bl	80020f8 <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001226:	f000 fae1 	bl	80017ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800122a:	2308      	movs	r3, #8
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800122e:	2305      	movs	r3, #5
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_ADC1_Init+0x104>)
 8001238:	f000 ff5e 	bl	80020f8 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001242:	f000 fad3 	bl	80017ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001246:	2309      	movs	r3, #9
 8001248:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800124a:	2306      	movs	r3, #6
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC1_Init+0x104>)
 8001254:	f000 ff50 	bl	80020f8 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800125e:	f000 fac5 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000015c 	.word	0x2000015c
 8001270:	40012400 	.word	0x40012400

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x50>)
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <MX_I2C1_Init+0x54>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_I2C1_Init+0x58>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012b2:	f001 fdcd 	bl	8002e50 <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 fa96 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000a8 	.word	0x200000a8
 80012c8:	40005400 	.word	0x40005400
 80012cc:	000186a0 	.word	0x000186a0

080012d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b096      	sub	sp, #88	; 0x58
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2220      	movs	r2, #32
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f003 fa37 	bl	800477c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <MX_TIM1_Init+0x150>)
 8001310:	4a44      	ldr	r2, [pc, #272]	; (8001424 <MX_TIM1_Init+0x154>)
 8001312:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <MX_TIM1_Init+0x150>)
 8001316:	2209      	movs	r2, #9
 8001318:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <MX_TIM1_Init+0x150>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 144;
 8001320:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <MX_TIM1_Init+0x150>)
 8001322:	2290      	movs	r2, #144	; 0x90
 8001324:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <MX_TIM1_Init+0x150>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <MX_TIM1_Init+0x150>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <MX_TIM1_Init+0x150>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001338:	4839      	ldr	r0, [pc, #228]	; (8001420 <MX_TIM1_Init+0x150>)
 800133a:	f002 fb89 	bl	8003a50 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001344:	f000 fa52 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001352:	4619      	mov	r1, r3
 8001354:	4832      	ldr	r0, [pc, #200]	; (8001420 <MX_TIM1_Init+0x150>)
 8001356:	f002 fdd5 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001360:	f000 fa44 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001364:	482e      	ldr	r0, [pc, #184]	; (8001420 <MX_TIM1_Init+0x150>)
 8001366:	f002 fc15 	bl	8003b94 <HAL_TIM_PWM_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001370:	f000 fa3c 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001380:	4619      	mov	r1, r3
 8001382:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_TIM1_Init+0x150>)
 8001384:	f003 f926 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800138e:	f000 fa2d 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001392:	2360      	movs	r3, #96	; 0x60
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800139a:	2302      	movs	r3, #2
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	481a      	ldr	r0, [pc, #104]	; (8001420 <MX_TIM1_Init+0x150>)
 80013b8:	f002 fce6 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013c2:	f000 fa13 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2204      	movs	r2, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <MX_TIM1_Init+0x150>)
 80013d0:	f002 fcda 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80013da:	f000 fa07 	bl	80017ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM1_Init+0x150>)
 8001402:	f003 f945 	bl	8004690 <HAL_TIMEx_ConfigBreakDeadTime>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800140c:	f000 f9ee 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM1_Init+0x150>)
 8001412:	f000 fb4b 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3758      	adds	r7, #88	; 0x58
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000434 	.word	0x20000434
 8001424:	40012c00 	.word	0x40012c00

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <MX_TIM2_Init+0xfc>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_TIM2_Init+0xfc>)
 8001462:	2207      	movs	r2, #7
 8001464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_TIM2_Init+0xfc>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_TIM2_Init+0xfc>)
 800146e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM2_Init+0xfc>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_TIM2_Init+0xfc>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <MX_TIM2_Init+0xfc>)
 8001482:	f002 fae5 	bl	8003a50 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800148c:	f000 f9ae 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149a:	4619      	mov	r1, r3
 800149c:	4821      	ldr	r0, [pc, #132]	; (8001524 <MX_TIM2_Init+0xfc>)
 800149e:	f002 fd31 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014a8:	f000 f9a0 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <MX_TIM2_Init+0xfc>)
 80014ae:	f002 fb71 	bl	8003b94 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014b8:	f000 f998 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	4619      	mov	r1, r3
 80014ca:	4816      	ldr	r0, [pc, #88]	; (8001524 <MX_TIM2_Init+0xfc>)
 80014cc:	f003 f882 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014d6:	f000 f989 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2204      	movs	r2, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_TIM2_Init+0xfc>)
 80014f2:	f002 fc49 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f000 f976 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2208      	movs	r2, #8
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM2_Init+0xfc>)
 8001508:	f002 fc3e 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001512:	f000 f96b 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM2_Init+0xfc>)
 8001518:	f000 fac8 	bl	8001aac <HAL_TIM_MspPostInit>

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000484 	.word	0x20000484

08001528 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_TIM3_Init+0xe4>)
 800155a:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <MX_TIM3_Init+0xe8>)
 800155c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <MX_TIM3_Init+0xe4>)
 8001560:	2209      	movs	r2, #9
 8001562:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_TIM3_Init+0xe4>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 288;
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_TIM3_Init+0xe4>)
 800156c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001570:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_TIM3_Init+0xe4>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_TIM3_Init+0xe4>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800157e:	4823      	ldr	r0, [pc, #140]	; (800160c <MX_TIM3_Init+0xe4>)
 8001580:	f002 fa66 	bl	8003a50 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800158a:	f000 f92f 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001598:	4619      	mov	r1, r3
 800159a:	481c      	ldr	r0, [pc, #112]	; (800160c <MX_TIM3_Init+0xe4>)
 800159c:	f002 fcb2 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015a6:	f000 f921 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_TIM3_Init+0xe4>)
 80015ac:	f002 faf2 	bl	8003b94 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015b6:	f000 f919 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	4619      	mov	r1, r3
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <MX_TIM3_Init+0xe4>)
 80015ca:	f003 f803 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015d4:	f000 f90a 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015e0:	2302      	movs	r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM3_Init+0xe4>)
 80015f0:	f002 fbca 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015fa:	f000 f8f7 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM3_Init+0xe4>)
 8001600:	f000 fa54 	bl	8001aac <HAL_TIM_MspPostInit>

}
 8001604:	bf00      	nop
 8001606:	3738      	adds	r7, #56	; 0x38
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000114 	.word	0x20000114
 8001610:	40000400 	.word	0x40000400

08001614 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001646:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <MX_TIM4_Init+0xe8>)
 8001648:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <MX_TIM4_Init+0xe4>)
 800164c:	2247      	movs	r2, #71	; 0x47
 800164e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001658:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800165c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800166a:	4823      	ldr	r0, [pc, #140]	; (80016f8 <MX_TIM4_Init+0xe4>)
 800166c:	f002 f9f0 	bl	8003a50 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001676:	f000 f8b9 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001684:	4619      	mov	r1, r3
 8001686:	481c      	ldr	r0, [pc, #112]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001688:	f002 fc3c 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001692:	f000 f8ab 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001696:	4818      	ldr	r0, [pc, #96]	; (80016f8 <MX_TIM4_Init+0xe4>)
 8001698:	f002 fa7c 	bl	8003b94 <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016a2:	f000 f8a3 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	4619      	mov	r1, r3
 80016b4:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_TIM4_Init+0xe4>)
 80016b6:	f002 ff8d 	bl	80045d4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016c0:	f000 f894 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c4:	2360      	movs	r3, #96	; 0x60
 80016c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <MX_TIM4_Init+0xe4>)
 80016dc:	f002 fb54 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016e6:	f000 f881 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <MX_TIM4_Init+0xe4>)
 80016ec:	f000 f9de 	bl	8001aac <HAL_TIM_MspPostInit>

}
 80016f0:	bf00      	nop
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000060 	.word	0x20000060
 80016fc:	40000800 	.word	0x40000800

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_DMA_Init+0x38>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <MX_DMA_Init+0x38>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_DMA_Init+0x38>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	200b      	movs	r0, #11
 8001724:	f000 ffb9 	bl	800269a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001728:	200b      	movs	r0, #11
 800172a:	f000 ffd2 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <MX_GPIO_Init+0xa8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <MX_GPIO_Init+0xa8>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <MX_GPIO_Init+0xa8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_GPIO_Init+0xa8>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <MX_GPIO_Init+0xa8>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_GPIO_Init+0xa8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_GPIO_Init+0xa8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <MX_GPIO_Init+0xa8>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_GPIO_Init+0xa8>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_GPIO_Init+0xa8>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <MX_GPIO_Init+0xa8>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_GPIO_Init+0xa8>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_GPIO_Init+0xac>)
 80017b8:	f001 fb18 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_GPIO_Init+0xac>)
 80017d6:	f001 f985 	bl	8002ae4 <HAL_GPIO_Init>

}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40011000 	.word	0x40011000

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <Error_Handler+0x8>
	...

080017f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <HAL_MspInit+0x5c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_MspInit+0x5c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_MspInit+0x60>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_MspInit+0x60>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0318 	add.w	r3, r7, #24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a33      	ldr	r2, [pc, #204]	; (8001944 <HAL_ADC_MspInit+0xe8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d15f      	bne.n	800193c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_ADC_MspInit+0xec>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a31      	ldr	r2, [pc, #196]	; (8001948 <HAL_ADC_MspInit+0xec>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_ADC_MspInit+0xec>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <HAL_ADC_MspInit+0xec>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <HAL_ADC_MspInit+0xec>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <HAL_ADC_MspInit+0xec>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_ADC_MspInit+0xec>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <HAL_ADC_MspInit+0xec>)
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_ADC_MspInit+0xec>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018c4:	2339      	movs	r3, #57	; 0x39
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	4619      	mov	r1, r3
 80018d2:	481e      	ldr	r0, [pc, #120]	; (800194c <HAL_ADC_MspInit+0xf0>)
 80018d4:	f001 f906 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d8:	2303      	movs	r3, #3
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018dc:	2303      	movs	r3, #3
 80018de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4619      	mov	r1, r3
 80018e6:	481a      	ldr	r0, [pc, #104]	; (8001950 <HAL_ADC_MspInit+0xf4>)
 80018e8:	f001 f8fc 	bl	8002ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 80018ee:	4a1a      	ldr	r2, [pc, #104]	; (8001958 <HAL_ADC_MspInit+0xfc>)
 80018f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 8001906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 800190e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001912:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 8001916:	2220      	movs	r2, #32
 8001918:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 8001922:	f000 fef1 	bl	8002708 <HAL_DMA_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800192c:	f7ff ff5e 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 8001934:	621a      	str	r2, [r3, #32]
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_ADC_MspInit+0xf8>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012400 	.word	0x40012400
 8001948:	40021000 	.word	0x40021000
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00
 8001954:	200003f0 	.word	0x200003f0
 8001958:	40020008 	.word	0x40020008

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_I2C_MspInit+0x90>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d132      	bne.n	80019e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_I2C_MspInit+0x94>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <HAL_I2C_MspInit+0x94>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_I2C_MspInit+0x94>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	2312      	movs	r3, #18
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4812      	ldr	r0, [pc, #72]	; (80019f4 <HAL_I2C_MspInit+0x98>)
 80019aa:	f001 f89b 	bl	8002ae4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_I2C_MspInit+0x9c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_I2C_MspInit+0x9c>)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_I2C_MspInit+0x94>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_I2C_MspInit+0x94>)
 80019d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_I2C_MspInit+0x94>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40005400 	.word	0x40005400
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40010000 	.word	0x40010000

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_TIM_Base_MspInit+0xa0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10c      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a18:	6193      	str	r3, [r2, #24]
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a26:	e034      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a30:	d10c      	bne.n	8001a4c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a1a      	ldr	r2, [pc, #104]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
}
 8001a4a:	e022      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_TIM_Base_MspInit+0xa8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10c      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	e010      	b.n	8001a92 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_TIM_Base_MspInit+0xac>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10b      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40000800 	.word	0x40000800

08001aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_TIM_MspPostInit+0x110>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d119      	bne.n	8001b00 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ae4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4619      	mov	r1, r3
 8001af8:	4832      	ldr	r0, [pc, #200]	; (8001bc4 <HAL_TIM_MspPostInit+0x118>)
 8001afa:	f000 fff3 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001afe:	e058      	b.n	8001bb2 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b08:	d118      	bne.n	8001b3c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b22:	2306      	movs	r3, #6
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <HAL_TIM_MspPostInit+0x118>)
 8001b36:	f000 ffd5 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001b3a:	e03a      	b.n	8001bb2 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_TIM_MspPostInit+0x11c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d118      	bne.n	8001b78 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <HAL_TIM_MspPostInit+0x118>)
 8001b72:	f000 ffb7 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001b76:	e01c      	b.n	8001bb2 <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM4)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_TIM_MspPostInit+0x120>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d117      	bne.n	8001bb2 <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6193      	str	r3, [r2, #24]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_TIM_MspPostInit+0x114>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	4619      	mov	r1, r3
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <HAL_TIM_MspPostInit+0x124>)
 8001bae:	f000 ff99 	bl	8002ae4 <HAL_GPIO_Init>
}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010800 	.word	0x40010800
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40010c00 	.word	0x40010c00

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1a:	f000 f87f 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA1_Channel1_IRQHandler+0x10>)
 8001c2a:	f000 fe27 	bl	800287c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200003f0 	.word	0x200003f0

08001c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	; (8001c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	; (8001c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c6a:	f7ff ffe5 	bl	8001c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f002 fd61 	bl	8004734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c72:	f7fe ffb1 	bl	8000bd8 <main>
  bx lr
 8001c76:	4770      	bx	lr
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001c80:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8001c84:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001c88:	200004d8 	.word	0x200004d8

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x28>)
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 fcef 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fda4 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fd07 	bl	80026ee <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf8:	f000 fccf 	bl	800269a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000010 	.word	0x20000010
 8001d18:	2000000c 	.word	0x2000000c

08001d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x1c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x20>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <HAL_IncTick+0x20>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	200004d4 	.word	0x200004d4

08001d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <HAL_GetTick+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	200004d4 	.word	0x200004d4

08001d54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0be      	b.n	8001ef4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fd62 	bl	800185c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 faff 	bl	800239c <ADC_ConversionStop_Disable>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 8099 	bne.w	8001ee2 <HAL_ADC_Init+0x18e>
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 8095 	bne.w	8001ee2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dc0:	f023 0302 	bic.w	r3, r3, #2
 8001dc4:	f043 0202 	orr.w	r2, r3, #2
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7b1b      	ldrb	r3, [r3, #12]
 8001dda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ddc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dec:	d003      	beq.n	8001df6 <HAL_ADC_Init+0xa2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_Init+0xa8>
 8001df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_Init+0xaa>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7d1b      	ldrb	r3, [r3, #20]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d119      	bne.n	8001e40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	035a      	lsls	r2, r3, #13
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e00b      	b.n	8001e40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_ADC_Init+0x1a8>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e70:	d003      	beq.n	8001e7a <HAL_ADC_Init+0x126>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d104      	bne.n	8001e84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	051b      	lsls	r3, r3, #20
 8001e82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_ADC_Init+0x1ac>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ebe:	e018      	b.n	8001ef2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	f023 0312 	bic.w	r3, r3, #18
 8001ec8:	f043 0210 	orr.w	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee0:	e007      	b.n	8001ef2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	ffe1f7fd 	.word	0xffe1f7fd
 8001f00:	ff1f0efe 	.word	0xff1f0efe

08001f04 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a64      	ldr	r2, [pc, #400]	; (80020ac <HAL_ADC_Start_DMA+0x1a8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_Start_DMA+0x24>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d106      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x32>
 8001f28:	4b60      	ldr	r3, [pc, #384]	; (80020ac <HAL_ADC_Start_DMA+0x1a8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 80b3 	bne.w	800209c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x40>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0ae      	b.n	80020a2 <HAL_ADC_Start_DMA+0x19e>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f9cb 	bl	80022e8 <ADC_Enable>
 8001f52:	4603      	mov	r3, r0
 8001f54:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 809a 	bne.w	8002092 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x84>
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <HAL_ADC_Start_DMA+0x1a8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d115      	bne.n	8001fb4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d026      	beq.n	8001ff0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001faa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fb2:	e01d      	b.n	8001ff0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a39      	ldr	r2, [pc, #228]	; (80020ac <HAL_ADC_Start_DMA+0x1a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_ADC_Start_DMA+0xd0>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a38      	ldr	r2, [pc, #224]	; (80020b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0xec>
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_ADC_Start_DMA+0x1a8>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fe8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f023 0206 	bic.w	r2, r3, #6
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
 8002008:	e002      	b.n	8002010 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a25      	ldr	r2, [pc, #148]	; (80020b4 <HAL_ADC_Start_DMA+0x1b0>)
 800201e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_ADC_Start_DMA+0x1b4>)
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_ADC_Start_DMA+0x1b8>)
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0202 	mvn.w	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a18      	ldr	r0, [r3, #32]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	334c      	adds	r3, #76	; 0x4c
 8002054:	4619      	mov	r1, r3
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f000 fbaf 	bl	80027bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002068:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800206c:	d108      	bne.n	8002080 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800207c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800207e:	e00f      	b.n	80020a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800208e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002090:	e006      	b.n	80020a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800209a:	e001      	b.n	80020a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012400 	.word	0x40012400
 80020b0:	40012800 	.word	0x40012800
 80020b4:	0800241f 	.word	0x0800241f
 80020b8:	0800249b 	.word	0x0800249b
 80020bc:	080024b7 	.word	0x080024b7

080020c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x20>
 8002114:	2302      	movs	r3, #2
 8002116:	e0dc      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1da>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b06      	cmp	r3, #6
 8002126:	d81c      	bhi.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b05      	subs	r3, #5
 800213a:	221f      	movs	r2, #31
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	4019      	ands	r1, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b05      	subs	r3, #5
 8002154:	fa00 f203 	lsl.w	r2, r0, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	635a      	str	r2, [r3, #52]	; 0x34
 8002160:	e03c      	b.n	80021dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d81c      	bhi.n	80021a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b23      	subs	r3, #35	; 0x23
 800217c:	221f      	movs	r2, #31
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	4019      	ands	r1, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3b23      	subs	r3, #35	; 0x23
 8002196:	fa00 f203 	lsl.w	r2, r0, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	631a      	str	r2, [r3, #48]	; 0x30
 80021a2:	e01b      	b.n	80021dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3b41      	subs	r3, #65	; 0x41
 80021b6:	221f      	movs	r2, #31
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	4019      	ands	r1, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b41      	subs	r3, #65	; 0x41
 80021d0:	fa00 f203 	lsl.w	r2, r0, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d91c      	bls.n	800221e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3b1e      	subs	r3, #30
 80021f6:	2207      	movs	r2, #7
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4019      	ands	r1, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6898      	ldr	r0, [r3, #8]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	3b1e      	subs	r3, #30
 8002210:	fa00 f203 	lsl.w	r2, r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	e019      	b.n	8002252 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6919      	ldr	r1, [r3, #16]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	2207      	movs	r2, #7
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	4019      	ands	r1, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6898      	ldr	r0, [r3, #8]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	fa00 f203 	lsl.w	r2, r0, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b10      	cmp	r3, #16
 8002258:	d003      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800225e:	2b11      	cmp	r3, #17
 8002260:	d132      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d125      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d126      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002288:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b10      	cmp	r3, #16
 8002290:	d11a      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9a      	lsrs	r2, r3, #18
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x1b2>
 80022b6:	e007      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40012400 	.word	0x40012400
 80022e0:	20000008 	.word	0x20000008
 80022e4:	431bde83 	.word	0x431bde83

080022e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d040      	beq.n	8002388 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <ADC_Enable+0xac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <ADC_Enable+0xb0>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002324:	e002      	b.n	800232c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002332:	f7ff fd05 	bl	8001d40 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002338:	e01f      	b.n	800237a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800233a:	f7ff fd01 	bl	8001d40 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d918      	bls.n	800237a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d011      	beq.n	800237a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f043 0210 	orr.w	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e007      	b.n	800238a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d1d8      	bne.n	800233a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d12e      	bne.n	8002414 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023c6:	f7ff fcbb 	bl	8001d40 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023cc:	e01b      	b.n	8002406 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023ce:	f7ff fcb7 	bl	8001d40 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d914      	bls.n	8002406 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10d      	bne.n	8002406 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e007      	b.n	8002416 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d0dc      	beq.n	80023ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002434:	2b00      	cmp	r3, #0
 8002436:	d127      	bne.n	8002488 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800244e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002452:	d115      	bne.n	8002480 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002458:	2b00      	cmp	r3, #0
 800245a:	d111      	bne.n	8002480 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff fe1d 	bl	80020c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002486:	e004      	b.n	8002492 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fe12 	bl	80020d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fe01 	bl	80020e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60d3      	str	r3, [r2, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4906      	ldr	r1, [pc, #24]	; (8002584 <__NVIC_EnableIRQ+0x34>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002664:	f7ff ff90 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff2d 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff42 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff90 	bl	80025dc <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5f 	bl	8002588 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff35 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa2 	bl	8002640 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e043      	b.n	80027a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_DMA_Init+0xa8>)
 8002726:	4413      	add	r3, r2
 8002728:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <HAL_DMA_Init+0xac>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	009a      	lsls	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_DMA_Init+0xb0>)
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002752:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	bffdfff8 	.word	0xbffdfff8
 80027b4:	cccccccd 	.word	0xcccccccd
 80027b8:	40020000 	.word	0x40020000

080027bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Start_IT+0x20>
 80027d8:	2302      	movs	r3, #2
 80027da:	e04a      	b.n	8002872 <HAL_DMA_Start_IT+0xb6>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d13a      	bne.n	8002864 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f938 	bl	8002a88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 020e 	orr.w	r2, r2, #14
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e00f      	b.n	8002852 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0204 	bic.w	r2, r2, #4
 8002840:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 020a 	orr.w	r2, r2, #10
 8002850:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e005      	b.n	8002870 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800286c:	2302      	movs	r3, #2
 800286e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d04f      	beq.n	8002944 <HAL_DMA_IRQHandler+0xc8>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d04a      	beq.n	8002944 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a66      	ldr	r2, [pc, #408]	; (8002a6c <HAL_DMA_IRQHandler+0x1f0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d029      	beq.n	800292a <HAL_DMA_IRQHandler+0xae>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_DMA_IRQHandler+0x1f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_IRQHandler+0xaa>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a63      	ldr	r2, [pc, #396]	; (8002a74 <HAL_DMA_IRQHandler+0x1f8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01a      	beq.n	8002920 <HAL_DMA_IRQHandler+0xa4>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a62      	ldr	r2, [pc, #392]	; (8002a78 <HAL_DMA_IRQHandler+0x1fc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d012      	beq.n	800291a <HAL_DMA_IRQHandler+0x9e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a60      	ldr	r2, [pc, #384]	; (8002a7c <HAL_DMA_IRQHandler+0x200>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x98>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <HAL_DMA_IRQHandler+0x204>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_DMA_IRQHandler+0x92>
 8002908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800290c:	e00e      	b.n	800292c <HAL_DMA_IRQHandler+0xb0>
 800290e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002912:	e00b      	b.n	800292c <HAL_DMA_IRQHandler+0xb0>
 8002914:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002918:	e008      	b.n	800292c <HAL_DMA_IRQHandler+0xb0>
 800291a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800291e:	e005      	b.n	800292c <HAL_DMA_IRQHandler+0xb0>
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	e002      	b.n	800292c <HAL_DMA_IRQHandler+0xb0>
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	e000      	b.n	800292c <HAL_DMA_IRQHandler+0xb0>
 800292a:	2304      	movs	r3, #4
 800292c:	4a55      	ldr	r2, [pc, #340]	; (8002a84 <HAL_DMA_IRQHandler+0x208>)
 800292e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8094 	beq.w	8002a62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002942:	e08e      	b.n	8002a62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2202      	movs	r2, #2
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d056      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x186>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d051      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 020a 	bic.w	r2, r2, #10
 800297a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a38      	ldr	r2, [pc, #224]	; (8002a6c <HAL_DMA_IRQHandler+0x1f0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d029      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x166>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a37      	ldr	r2, [pc, #220]	; (8002a70 <HAL_DMA_IRQHandler+0x1f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_IRQHandler+0x162>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a35      	ldr	r2, [pc, #212]	; (8002a74 <HAL_DMA_IRQHandler+0x1f8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x15c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_DMA_IRQHandler+0x1fc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d012      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x156>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <HAL_DMA_IRQHandler+0x200>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00a      	beq.n	80029cc <HAL_DMA_IRQHandler+0x150>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <HAL_DMA_IRQHandler+0x204>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d102      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x14a>
 80029c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029c4:	e00e      	b.n	80029e4 <HAL_DMA_IRQHandler+0x168>
 80029c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ca:	e00b      	b.n	80029e4 <HAL_DMA_IRQHandler+0x168>
 80029cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d0:	e008      	b.n	80029e4 <HAL_DMA_IRQHandler+0x168>
 80029d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d6:	e005      	b.n	80029e4 <HAL_DMA_IRQHandler+0x168>
 80029d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029dc:	e002      	b.n	80029e4 <HAL_DMA_IRQHandler+0x168>
 80029de:	2320      	movs	r3, #32
 80029e0:	e000      	b.n	80029e4 <HAL_DMA_IRQHandler+0x168>
 80029e2:	2302      	movs	r3, #2
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_DMA_IRQHandler+0x208>)
 80029e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d034      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a00:	e02f      	b.n	8002a62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2208      	movs	r2, #8
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d028      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x1e8>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d023      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 020e 	bic.w	r2, r2, #14
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
    }
  }
  return;
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
}
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40020008 	.word	0x40020008
 8002a70:	4002001c 	.word	0x4002001c
 8002a74:	40020030 	.word	0x40020030
 8002a78:	40020044 	.word	0x40020044
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	4002006c 	.word	0x4002006c
 8002a84:	40020000 	.word	0x40020000

08002a88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d108      	bne.n	8002ac8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ac6:	e007      	b.n	8002ad8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b08b      	sub	sp, #44	; 0x2c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	e169      	b.n	8002dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af8:	2201      	movs	r2, #1
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8158 	bne.w	8002dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a9a      	ldr	r2, [pc, #616]	; (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d05e      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b20:	4a98      	ldr	r2, [pc, #608]	; (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d875      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b26:	4a98      	ldr	r2, [pc, #608]	; (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d058      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b2c:	4a96      	ldr	r2, [pc, #600]	; (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d86f      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b32:	4a96      	ldr	r2, [pc, #600]	; (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d052      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b38:	4a94      	ldr	r2, [pc, #592]	; (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d869      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b3e:	4a94      	ldr	r2, [pc, #592]	; (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04c      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b44:	4a92      	ldr	r2, [pc, #584]	; (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d863      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b4a:	4a92      	ldr	r2, [pc, #584]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d046      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b50:	4a90      	ldr	r2, [pc, #576]	; (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d85d      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d82a      	bhi.n	8002bb0 <HAL_GPIO_Init+0xcc>
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d859      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_GPIO_Init+0x80>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002bdf 	.word	0x08002bdf
 8002b68:	08002bb9 	.word	0x08002bb9
 8002b6c:	08002bcb 	.word	0x08002bcb
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c13 	.word	0x08002c13
 8002b78:	08002c13 	.word	0x08002c13
 8002b7c:	08002c13 	.word	0x08002c13
 8002b80:	08002c13 	.word	0x08002c13
 8002b84:	08002c13 	.word	0x08002c13
 8002b88:	08002c13 	.word	0x08002c13
 8002b8c:	08002c13 	.word	0x08002c13
 8002b90:	08002c13 	.word	0x08002c13
 8002b94:	08002c13 	.word	0x08002c13
 8002b98:	08002c13 	.word	0x08002c13
 8002b9c:	08002c13 	.word	0x08002c13
 8002ba0:	08002c13 	.word	0x08002c13
 8002ba4:	08002c13 	.word	0x08002c13
 8002ba8:	08002bc1 	.word	0x08002bc1
 8002bac:	08002bd5 	.word	0x08002bd5
 8002bb0:	4a79      	ldr	r2, [pc, #484]	; (8002d98 <HAL_GPIO_Init+0x2b4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bb6:	e02c      	b.n	8002c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	623b      	str	r3, [r7, #32]
          break;
 8002bbe:	e029      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	623b      	str	r3, [r7, #32]
          break;
 8002bc8:	e024      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	623b      	str	r3, [r7, #32]
          break;
 8002bd2:	e01f      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e01a      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002be6:	2304      	movs	r3, #4
 8002be8:	623b      	str	r3, [r7, #32]
          break;
 8002bea:	e013      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	611a      	str	r2, [r3, #16]
          break;
 8002bfe:	e009      	b.n	8002c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	615a      	str	r2, [r3, #20]
          break;
 8002c0a:	e003      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
          break;
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          break;
 8002c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2bff      	cmp	r3, #255	; 0xff
 8002c18:	d801      	bhi.n	8002c1e <HAL_GPIO_Init+0x13a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	e001      	b.n	8002c22 <HAL_GPIO_Init+0x13e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2bff      	cmp	r3, #255	; 0xff
 8002c28:	d802      	bhi.n	8002c30 <HAL_GPIO_Init+0x14c>
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0x152>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	3b08      	subs	r3, #8
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	210f      	movs	r1, #15
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	401a      	ands	r2, r3
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80b1 	beq.w	8002dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c64:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a4c      	ldr	r2, [pc, #304]	; (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c7c:	4a48      	ldr	r2, [pc, #288]	; (8002da0 <HAL_GPIO_Init+0x2bc>)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <HAL_GPIO_Init+0x2c0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_Init+0x1ec>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3f      	ldr	r2, [pc, #252]	; (8002da8 <HAL_GPIO_Init+0x2c4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_Init+0x1e8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <HAL_GPIO_Init+0x2c8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_Init+0x1e0>
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e006      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e004      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e002      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	f002 0203 	and.w	r2, r2, #3
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ce2:	492f      	ldr	r1, [pc, #188]	; (8002da0 <HAL_GPIO_Init+0x2bc>)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	492c      	ldr	r1, [pc, #176]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4928      	ldr	r1, [pc, #160]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4922      	ldr	r1, [pc, #136]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	491e      	ldr	r1, [pc, #120]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4918      	ldr	r1, [pc, #96]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4914      	ldr	r1, [pc, #80]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d021      	beq.n	8002db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60cb      	str	r3, [r1, #12]
 8002d80:	e021      	b.n	8002dc6 <HAL_GPIO_Init+0x2e2>
 8002d82:	bf00      	nop
 8002d84:	10320000 	.word	0x10320000
 8002d88:	10310000 	.word	0x10310000
 8002d8c:	10220000 	.word	0x10220000
 8002d90:	10210000 	.word	0x10210000
 8002d94:	10120000 	.word	0x10120000
 8002d98:	10110000 	.word	0x10110000
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010800 	.word	0x40010800
 8002da8:	40010c00 	.word	0x40010c00
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	4909      	ldr	r1, [pc, #36]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	3301      	adds	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f47f ae8e 	bne.w	8002af8 <HAL_GPIO_Init+0x14>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	372c      	adds	r7, #44	; 0x2c
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e08:	e003      	b.n	8002e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43d9      	mvns	r1, r3
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	611a      	str	r2, [r3, #16]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e12b      	b.n	80030ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fd70 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f000 fce4 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a81      	ldr	r2, [pc, #516]	; (80030c4 <HAL_I2C_Init+0x274>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d807      	bhi.n	8002ed4 <HAL_I2C_Init+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a80      	ldr	r2, [pc, #512]	; (80030c8 <HAL_I2C_Init+0x278>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e006      	b.n	8002ee2 <HAL_I2C_Init+0x92>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a7d      	ldr	r2, [pc, #500]	; (80030cc <HAL_I2C_Init+0x27c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0e7      	b.n	80030ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_I2C_Init+0x280>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0c9b      	lsrs	r3, r3, #18
 8002ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <HAL_I2C_Init+0x274>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d802      	bhi.n	8002f24 <HAL_I2C_Init+0xd4>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3301      	adds	r3, #1
 8002f22:	e009      	b.n	8002f38 <HAL_I2C_Init+0xe8>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	4a69      	ldr	r2, [pc, #420]	; (80030d4 <HAL_I2C_Init+0x284>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	3301      	adds	r3, #1
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	495c      	ldr	r1, [pc, #368]	; (80030c4 <HAL_I2C_Init+0x274>)
 8002f54:	428b      	cmp	r3, r1
 8002f56:	d819      	bhi.n	8002f8c <HAL_I2C_Init+0x13c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e59      	subs	r1, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_I2C_Init+0x138>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1e59      	subs	r1, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	e051      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e04f      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d111      	bne.n	8002fb8 <HAL_I2C_Init+0x168>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e012      	b.n	8002fde <HAL_I2C_Init+0x18e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Init+0x196>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e022      	b.n	800302c <HAL_I2C_Init+0x1dc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <HAL_I2C_Init+0x1bc>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e58      	subs	r0, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	440b      	add	r3, r1
 8002ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	e00f      	b.n	800302c <HAL_I2C_Init+0x1dc>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	0099      	lsls	r1, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	6809      	ldr	r1, [r1, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800305a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6911      	ldr	r1, [r2, #16]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68d2      	ldr	r2, [r2, #12]
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	430b      	orrs	r3, r1
 800306e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	000186a0 	.word	0x000186a0
 80030c8:	001e847f 	.word	0x001e847f
 80030cc:	003d08ff 	.word	0x003d08ff
 80030d0:	431bde83 	.word	0x431bde83
 80030d4:	10624dd3 	.word	0x10624dd3

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e26c      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003110:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b89      	ldr	r3, [pc, #548]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e246      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7f      	ldr	r2, [pc, #508]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a77      	ldr	r2, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fdc4 	bl	8001d40 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fdc0 	bl	8001d40 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e1fa      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fdb0 	bl	8001d40 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fdac 	bl	8001d40 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1e6      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800321e:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1ba      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4939      	ldr	r1, [pc, #228]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fd65 	bl	8001d40 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fd61 	bl	8001d40 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e19b      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4927      	ldr	r1, [pc, #156]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fd44 	bl	8001d40 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe fd40 	bl	8001d40 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e17a      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03a      	beq.n	800335c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7fe fd24 	bl	8001d40 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fe fd20 	bl	8001d40 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e15a      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 fac4 	bl	80038a8 <RCC_Delay>
 8003320:	e01c      	b.n	800335c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fd0a 	bl	8001d40 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe fd06 	bl	8001d40 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d908      	bls.n	8003350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e140      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	42420000 	.word	0x42420000
 800334c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b9e      	ldr	r3, [pc, #632]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e9      	bne.n	8003330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a6 	beq.w	80034b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b97      	ldr	r3, [pc, #604]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a93      	ldr	r2, [pc, #588]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b91      	ldr	r3, [pc, #580]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b8e      	ldr	r3, [pc, #568]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a8a      	ldr	r2, [pc, #552]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fcc7 	bl	8001d40 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fe fcc3 	bl	8001d40 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0fd      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x312>
 80033dc:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a7a      	ldr	r2, [pc, #488]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x334>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x356>
 8003414:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a66      	ldr	r2, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b64      	ldr	r3, [pc, #400]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a63      	ldr	r2, [pc, #396]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fc77 	bl	8001d40 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fc73 	bl	8001d40 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0ab      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b57      	ldr	r3, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x37e>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe fc61 	bl	8001d40 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fc5d 	bl	8001d40 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e095      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a47      	ldr	r2, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8081 	beq.w	80035c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d061      	beq.n	8003590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d146      	bne.n	8003562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_OscConfig+0x4fc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe fc31 	bl	8001d40 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe fc2d 	bl	8001d40 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e067      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	492d      	ldr	r1, [pc, #180]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a19      	ldr	r1, [r3, #32]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	430b      	orrs	r3, r1
 800352e:	4927      	ldr	r1, [pc, #156]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_OscConfig+0x4fc>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe fc01 	bl	8001d40 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe fbfd 	bl	8001d40 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e037      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x46a>
 8003560:	e02f      	b.n	80035c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HAL_RCC_OscConfig+0x4fc>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fbea 	bl	8001d40 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fbe6 	bl	8001d40 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e020      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x498>
 800358e:	e018      	b.n	80035c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e013      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x4f4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42420060 	.word	0x42420060

080035d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0d0      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d910      	bls.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 0207 	bic.w	r2, r3, #7
 8003602:	4965      	ldr	r1, [pc, #404]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0b8      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a58      	ldr	r2, [pc, #352]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800363e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003656:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	494d      	ldr	r1, [pc, #308]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d040      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07f      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e073      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06b      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4936      	ldr	r1, [pc, #216]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c8:	f7fe fb3a 	bl	8001d40 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fe fb36 	bl	8001d40 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e053      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d210      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	4922      	ldr	r1, [pc, #136]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e032      	b.n	800378e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4916      	ldr	r1, [pc, #88]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490e      	ldr	r1, [pc, #56]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003766:	f000 f821 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490a      	ldr	r1, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fa98 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
 80037a0:	080057b8 	.word	0x080057b8
 80037a4:	20000008 	.word	0x20000008
 80037a8:	2000000c 	.word	0x2000000c

080037ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	b490      	push	{r4, r7}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037b2:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037b4:	1d3c      	adds	r4, r7, #4
 80037b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037bc:	f240 2301 	movw	r3, #513	; 0x201
 80037c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037d6:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x40>
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x46>
 80037ea:	e02d      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	623b      	str	r3, [r7, #32]
      break;
 80037f0:	e02d      	b.n	800384e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	0c9b      	lsrs	r3, r3, #18
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037fe:	4413      	add	r3, r2
 8003800:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003804:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c5b      	lsrs	r3, r3, #17
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800381e:	4413      	add	r3, r2
 8003820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	fb02 f203 	mul.w	r2, r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	e004      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	623b      	str	r3, [r7, #32]
      break;
 8003846:	e002      	b.n	800384e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384a:	623b      	str	r3, [r7, #32]
      break;
 800384c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384e:	6a3b      	ldr	r3, [r7, #32]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc90      	pop	{r4, r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	080057a8 	.word	0x080057a8
 8003860:	40021000 	.word	0x40021000
 8003864:	007a1200 	.word	0x007a1200
 8003868:	003d0900 	.word	0x003d0900

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <HAL_RCC_GetHCLKFreq+0x10>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000008 	.word	0x20000008

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff2 	bl	800386c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	080057c8 	.word	0x080057c8

080038a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <RCC_Delay+0x34>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <RCC_Delay+0x38>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0a5b      	lsrs	r3, r3, #9
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038c4:	bf00      	nop
  }
  while (Delay --);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1e5a      	subs	r2, r3, #1
 80038ca:	60fa      	str	r2, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f9      	bne.n	80038c4 <RCC_Delay+0x1c>
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20000008 	.word	0x20000008
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d07d      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	4b4c      	ldr	r3, [pc, #304]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a4b      	ldr	r2, [pc, #300]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b49      	ldr	r3, [pc, #292]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d118      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a42      	ldr	r2, [pc, #264]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003944:	f7fe f9fc 	bl	8001d40 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	e008      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fe f9f8 	bl	8001d40 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e06d      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02e      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	429a      	cmp	r2, r3
 8003986:	d027      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003990:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003992:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003998:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fe f9c7 	bl	8001d40 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe f9c3 	bl	8001d40 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e036      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4917      	ldr	r1, [pc, #92]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	490b      	ldr	r1, [pc, #44]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42420440 	.word	0x42420440

08003a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e041      	b.n	8003ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd ffc0 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f000 fafc 	bl	800408c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d001      	beq.n	8003b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e03a      	b.n	8003b7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <HAL_TIM_Base_Start_IT+0x98>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00e      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x58>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d009      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x58>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_TIM_Base_Start_IT+0x9c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <HAL_TIM_Base_Start_IT+0x58>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d111      	bne.n	8003b6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d010      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6a:	e007      	b.n	8003b7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800

08003b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e041      	b.n	8003c2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f839 	bl	8003c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fa5a 	bl	800408c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_TIM_PWM_Start+0x24>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e022      	b.n	8003cae <HAL_TIM_PWM_Start+0x6a>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d109      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x3e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e015      	b.n	8003cae <HAL_TIM_PWM_Start+0x6a>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d109      	bne.n	8003c9c <HAL_TIM_PWM_Start+0x58>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e008      	b.n	8003cae <HAL_TIM_PWM_Start+0x6a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e05e      	b.n	8003d74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x82>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc4:	e013      	b.n	8003cee <HAL_TIM_PWM_Start+0xaa>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_PWM_Start+0x92>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	e00b      	b.n	8003cee <HAL_TIM_PWM_Start+0xaa>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0xa2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce4:	e003      	b.n	8003cee <HAL_TIM_PWM_Start+0xaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fc48 	bl	800458c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_TIM_PWM_Start+0x138>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d107      	bne.n	8003d16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <HAL_TIM_PWM_Start+0x138>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_TIM_PWM_Start+0xfa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d009      	beq.n	8003d3e <HAL_TIM_PWM_Start+0xfa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_TIM_PWM_Start+0x13c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_TIM_PWM_Start+0xfa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <HAL_TIM_PWM_Start+0x140>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d111      	bne.n	8003d62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d010      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	e007      	b.n	8003d72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800

08003d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0ac      	b.n	8003efc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	f200 809f 	bhi.w	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003ef1 	.word	0x08003ef1
 8003dc0:	08003ef1 	.word	0x08003ef1
 8003dc4:	08003ef1 	.word	0x08003ef1
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	08003ef1 	.word	0x08003ef1
 8003dd0:	08003ef1 	.word	0x08003ef1
 8003dd4:	08003ef1 	.word	0x08003ef1
 8003dd8:	08003e6f 	.word	0x08003e6f
 8003ddc:	08003ef1 	.word	0x08003ef1
 8003de0:	08003ef1 	.word	0x08003ef1
 8003de4:	08003ef1 	.word	0x08003ef1
 8003de8:	08003eaf 	.word	0x08003eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f9ac 	bl	8004150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0208 	orr.w	r2, r2, #8
 8003e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6999      	ldr	r1, [r3, #24]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	619a      	str	r2, [r3, #24]
      break;
 8003e2a:	e062      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f9f2 	bl	800421c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	021a      	lsls	r2, r3, #8
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]
      break;
 8003e6c:	e041      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fa3b 	bl	80042f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0208 	orr.w	r2, r2, #8
 8003e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0204 	bic.w	r2, r2, #4
 8003e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	61da      	str	r2, [r3, #28]
      break;
 8003eac:	e021      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fa85 	bl	80043c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	021a      	lsls	r2, r3, #8
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	61da      	str	r2, [r3, #28]
      break;
 8003eee:	e000      	b.n	8003ef2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_ConfigClockSource+0x18>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0b3      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x180>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d03e      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0xd0>
 8003f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5a:	f200 8087 	bhi.w	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	f000 8085 	beq.w	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d87f      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d01a      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0xa2>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d87b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f74:	2b60      	cmp	r3, #96	; 0x60
 8003f76:	d050      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x116>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d877      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f7c:	2b50      	cmp	r3, #80	; 0x50
 8003f7e:	d03c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xf6>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d873      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d058      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x136>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d86f      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f8c:	2b30      	cmp	r3, #48	; 0x30
 8003f8e:	d064      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x156>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d86b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d060      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x156>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d867      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x168>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x156>
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d05a      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fa4:	e062      	b.n	800406c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6899      	ldr	r1, [r3, #8]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f000 faca 	bl	800454e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	609a      	str	r2, [r3, #8]
      break;
 8003fd2:	e04e      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6899      	ldr	r1, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f000 fab3 	bl	800454e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff6:	609a      	str	r2, [r3, #8]
      break;
 8003ff8:	e03b      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	461a      	mov	r2, r3
 8004008:	f000 fa2a 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2150      	movs	r1, #80	; 0x50
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fa81 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8004018:	e02b      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	461a      	mov	r2, r3
 8004028:	f000 fa48 	bl	80044bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2160      	movs	r1, #96	; 0x60
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fa71 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8004038:	e01b      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fa0a 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fa61 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8004058:	e00b      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 fa58 	bl	800451a <TIM_ITRx_SetConfig>
        break;
 800406a:	e002      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004070:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a29      	ldr	r2, [pc, #164]	; (8004144 <TIM_Base_SetConfig+0xb8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a26      	ldr	r2, [pc, #152]	; (8004148 <TIM_Base_SetConfig+0xbc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a25      	ldr	r2, [pc, #148]	; (800414c <TIM_Base_SetConfig+0xc0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d108      	bne.n	80040ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <TIM_Base_SetConfig+0xb8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a19      	ldr	r2, [pc, #100]	; (8004148 <TIM_Base_SetConfig+0xbc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <TIM_Base_SetConfig+0xc0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a07      	ldr	r2, [pc, #28]	; (8004144 <TIM_Base_SetConfig+0xb8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d103      	bne.n	8004134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	615a      	str	r2, [r3, #20]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800

08004150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 0302 	bic.w	r3, r3, #2
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <TIM_OC1_SetConfig+0xc8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10c      	bne.n	80041c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0308 	bic.w	r3, r3, #8
 80041b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a13      	ldr	r2, [pc, #76]	; (8004218 <TIM_OC1_SetConfig+0xc8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d111      	bne.n	80041f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40012c00 	.word	0x40012c00

0800421c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0210 	bic.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <TIM_OC2_SetConfig+0xd0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d10d      	bne.n	8004298 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <TIM_OC2_SetConfig+0xd0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d113      	bne.n	80042c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00

080042f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <TIM_OC3_SetConfig+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10d      	bne.n	800436a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <TIM_OC3_SetConfig+0xd0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00

080043c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800440e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	031b      	lsls	r3, r3, #12
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a0f      	ldr	r2, [pc, #60]	; (800445c <TIM_OC4_SetConfig+0x98>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 0210 	bic.w	r2, r3, #16
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	031b      	lsls	r3, r3, #12
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	f043 0307 	orr.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	021a      	lsls	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	431a      	orrs	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2201      	movs	r2, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	401a      	ands	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e046      	b.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a16      	ldr	r2, [pc, #88]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d009      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a10      	ldr	r2, [pc, #64]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10c      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800

08004690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e03d      	b.n	8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
	...

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	2600      	movs	r6, #0
 8004738:	4d0c      	ldr	r5, [pc, #48]	; (800476c <__libc_init_array+0x38>)
 800473a:	4c0d      	ldr	r4, [pc, #52]	; (8004770 <__libc_init_array+0x3c>)
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	f001 f822 	bl	800578c <_init>
 8004748:	2600      	movs	r6, #0
 800474a:	4d0a      	ldr	r5, [pc, #40]	; (8004774 <__libc_init_array+0x40>)
 800474c:	4c0a      	ldr	r4, [pc, #40]	; (8004778 <__libc_init_array+0x44>)
 800474e:	1b64      	subs	r4, r4, r5
 8004750:	10a4      	asrs	r4, r4, #2
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f855 3b04 	ldr.w	r3, [r5], #4
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	f855 3b04 	ldr.w	r3, [r5], #4
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	080059a8 	.word	0x080059a8
 8004770:	080059a8 	.word	0x080059a8
 8004774:	080059a8 	.word	0x080059a8
 8004778:	080059ac 	.word	0x080059ac

0800477c <memset>:
 800477c:	4603      	mov	r3, r0
 800477e:	4402      	add	r2, r0
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	f803 1b01 	strb.w	r1, [r3], #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <sin>:
 800478c:	b530      	push	{r4, r5, lr}
 800478e:	4a20      	ldr	r2, [pc, #128]	; (8004810 <sin+0x84>)
 8004790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004794:	4293      	cmp	r3, r2
 8004796:	b087      	sub	sp, #28
 8004798:	dc06      	bgt.n	80047a8 <sin+0x1c>
 800479a:	2300      	movs	r3, #0
 800479c:	2200      	movs	r2, #0
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	f000 fe31 	bl	8005408 <__kernel_sin>
 80047a6:	e006      	b.n	80047b6 <sin+0x2a>
 80047a8:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <sin+0x88>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	dd05      	ble.n	80047ba <sin+0x2e>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	f7fb fcd1 	bl	8000158 <__aeabi_dsub>
 80047b6:	b007      	add	sp, #28
 80047b8:	bd30      	pop	{r4, r5, pc}
 80047ba:	aa02      	add	r2, sp, #8
 80047bc:	f000 f82c 	bl	8004818 <__ieee754_rem_pio2>
 80047c0:	f000 0003 	and.w	r0, r0, #3
 80047c4:	2801      	cmp	r0, #1
 80047c6:	d009      	beq.n	80047dc <sin+0x50>
 80047c8:	2802      	cmp	r0, #2
 80047ca:	d00e      	beq.n	80047ea <sin+0x5e>
 80047cc:	b9c0      	cbnz	r0, 8004800 <sin+0x74>
 80047ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047d2:	2301      	movs	r3, #1
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047da:	e7e2      	b.n	80047a2 <sin+0x16>
 80047dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047e4:	f000 fa08 	bl	8004bf8 <__kernel_cos>
 80047e8:	e7e5      	b.n	80047b6 <sin+0x2a>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f6:	f000 fe07 	bl	8005408 <__kernel_sin>
 80047fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80047fe:	e7da      	b.n	80047b6 <sin+0x2a>
 8004800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004808:	f000 f9f6 	bl	8004bf8 <__kernel_cos>
 800480c:	e7f5      	b.n	80047fa <sin+0x6e>
 800480e:	bf00      	nop
 8004810:	3fe921fb 	.word	0x3fe921fb
 8004814:	7fefffff 	.word	0x7fefffff

08004818 <__ieee754_rem_pio2>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	4614      	mov	r4, r2
 800481e:	4ac4      	ldr	r2, [pc, #784]	; (8004b30 <__ieee754_rem_pio2+0x318>)
 8004820:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004824:	b08d      	sub	sp, #52	; 0x34
 8004826:	4592      	cmp	sl, r2
 8004828:	9104      	str	r1, [sp, #16]
 800482a:	dc07      	bgt.n	800483c <__ieee754_rem_pio2+0x24>
 800482c:	2200      	movs	r2, #0
 800482e:	2300      	movs	r3, #0
 8004830:	e9c4 0100 	strd	r0, r1, [r4]
 8004834:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004838:	2500      	movs	r5, #0
 800483a:	e024      	b.n	8004886 <__ieee754_rem_pio2+0x6e>
 800483c:	4abd      	ldr	r2, [pc, #756]	; (8004b34 <__ieee754_rem_pio2+0x31c>)
 800483e:	4592      	cmp	sl, r2
 8004840:	dc72      	bgt.n	8004928 <__ieee754_rem_pio2+0x110>
 8004842:	9b04      	ldr	r3, [sp, #16]
 8004844:	4dbc      	ldr	r5, [pc, #752]	; (8004b38 <__ieee754_rem_pio2+0x320>)
 8004846:	2b00      	cmp	r3, #0
 8004848:	a3ab      	add	r3, pc, #684	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x2e0>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	dd36      	ble.n	80048be <__ieee754_rem_pio2+0xa6>
 8004850:	f7fb fc82 	bl	8000158 <__aeabi_dsub>
 8004854:	45aa      	cmp	sl, r5
 8004856:	4606      	mov	r6, r0
 8004858:	460f      	mov	r7, r1
 800485a:	d018      	beq.n	800488e <__ieee754_rem_pio2+0x76>
 800485c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x2e8>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f7fb fc79 	bl	8000158 <__aeabi_dsub>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4630      	mov	r0, r6
 800486c:	e9c4 2300 	strd	r2, r3, [r4]
 8004870:	4639      	mov	r1, r7
 8004872:	f7fb fc71 	bl	8000158 <__aeabi_dsub>
 8004876:	a3a2      	add	r3, pc, #648	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x2e8>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f7fb fc6c 	bl	8000158 <__aeabi_dsub>
 8004880:	2501      	movs	r5, #1
 8004882:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004886:	4628      	mov	r0, r5
 8004888:	b00d      	add	sp, #52	; 0x34
 800488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488e:	a39e      	add	r3, pc, #632	; (adr r3, 8004b08 <__ieee754_rem_pio2+0x2f0>)
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb fc60 	bl	8000158 <__aeabi_dsub>
 8004898:	a39d      	add	r3, pc, #628	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x2f8>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	4606      	mov	r6, r0
 80048a0:	460f      	mov	r7, r1
 80048a2:	f7fb fc59 	bl	8000158 <__aeabi_dsub>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4630      	mov	r0, r6
 80048ac:	e9c4 2300 	strd	r2, r3, [r4]
 80048b0:	4639      	mov	r1, r7
 80048b2:	f7fb fc51 	bl	8000158 <__aeabi_dsub>
 80048b6:	a396      	add	r3, pc, #600	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x2f8>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	e7de      	b.n	800487c <__ieee754_rem_pio2+0x64>
 80048be:	f7fb fc4d 	bl	800015c <__adddf3>
 80048c2:	45aa      	cmp	sl, r5
 80048c4:	4606      	mov	r6, r0
 80048c6:	460f      	mov	r7, r1
 80048c8:	d016      	beq.n	80048f8 <__ieee754_rem_pio2+0xe0>
 80048ca:	a38d      	add	r3, pc, #564	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x2e8>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fc44 	bl	800015c <__adddf3>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4630      	mov	r0, r6
 80048da:	e9c4 2300 	strd	r2, r3, [r4]
 80048de:	4639      	mov	r1, r7
 80048e0:	f7fb fc3a 	bl	8000158 <__aeabi_dsub>
 80048e4:	a386      	add	r3, pc, #536	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x2e8>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb fc37 	bl	800015c <__adddf3>
 80048ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048f6:	e7c6      	b.n	8004886 <__ieee754_rem_pio2+0x6e>
 80048f8:	a383      	add	r3, pc, #524	; (adr r3, 8004b08 <__ieee754_rem_pio2+0x2f0>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f7fb fc2d 	bl	800015c <__adddf3>
 8004902:	a383      	add	r3, pc, #524	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x2f8>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	4606      	mov	r6, r0
 800490a:	460f      	mov	r7, r1
 800490c:	f7fb fc26 	bl	800015c <__adddf3>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4630      	mov	r0, r6
 8004916:	e9c4 2300 	strd	r2, r3, [r4]
 800491a:	4639      	mov	r1, r7
 800491c:	f7fb fc1c 	bl	8000158 <__aeabi_dsub>
 8004920:	a37b      	add	r3, pc, #492	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x2f8>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	e7e0      	b.n	80048ea <__ieee754_rem_pio2+0xd2>
 8004928:	4a84      	ldr	r2, [pc, #528]	; (8004b3c <__ieee754_rem_pio2+0x324>)
 800492a:	4592      	cmp	sl, r2
 800492c:	f300 80d5 	bgt.w	8004ada <__ieee754_rem_pio2+0x2c2>
 8004930:	f000 fe20 	bl	8005574 <fabs>
 8004934:	a378      	add	r3, pc, #480	; (adr r3, 8004b18 <__ieee754_rem_pio2+0x300>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	4606      	mov	r6, r0
 800493c:	460f      	mov	r7, r1
 800493e:	f7fb fdc3 	bl	80004c8 <__aeabi_dmul>
 8004942:	2200      	movs	r2, #0
 8004944:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <__ieee754_rem_pio2+0x328>)
 8004946:	f7fb fc09 	bl	800015c <__adddf3>
 800494a:	f7fc f857 	bl	80009fc <__aeabi_d2iz>
 800494e:	4605      	mov	r5, r0
 8004950:	f7fb fd50 	bl	80003f4 <__aeabi_i2d>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800495c:	a366      	add	r3, pc, #408	; (adr r3, 8004af8 <__ieee754_rem_pio2+0x2e0>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f7fb fdb1 	bl	80004c8 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4630      	mov	r0, r6
 800496c:	4639      	mov	r1, r7
 800496e:	f7fb fbf3 	bl	8000158 <__aeabi_dsub>
 8004972:	a363      	add	r3, pc, #396	; (adr r3, 8004b00 <__ieee754_rem_pio2+0x2e8>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	4680      	mov	r8, r0
 800497a:	4689      	mov	r9, r1
 800497c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004980:	f7fb fda2 	bl	80004c8 <__aeabi_dmul>
 8004984:	2d1f      	cmp	r5, #31
 8004986:	4606      	mov	r6, r0
 8004988:	460f      	mov	r7, r1
 800498a:	dc0e      	bgt.n	80049aa <__ieee754_rem_pio2+0x192>
 800498c:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <__ieee754_rem_pio2+0x32c>)
 800498e:	1e6a      	subs	r2, r5, #1
 8004990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004994:	4553      	cmp	r3, sl
 8004996:	d008      	beq.n	80049aa <__ieee754_rem_pio2+0x192>
 8004998:	4632      	mov	r2, r6
 800499a:	463b      	mov	r3, r7
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fb fbda 	bl	8000158 <__aeabi_dsub>
 80049a4:	e9c4 0100 	strd	r0, r1, [r4]
 80049a8:	e013      	b.n	80049d2 <__ieee754_rem_pio2+0x1ba>
 80049aa:	463b      	mov	r3, r7
 80049ac:	4632      	mov	r2, r6
 80049ae:	4640      	mov	r0, r8
 80049b0:	4649      	mov	r1, r9
 80049b2:	f7fb fbd1 	bl	8000158 <__aeabi_dsub>
 80049b6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80049ba:	9305      	str	r3, [sp, #20]
 80049bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049c0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80049c4:	f1ba 0f10 	cmp.w	sl, #16
 80049c8:	dc1f      	bgt.n	8004a0a <__ieee754_rem_pio2+0x1f2>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	e9c4 2300 	strd	r2, r3, [r4]
 80049d2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80049d6:	4640      	mov	r0, r8
 80049d8:	4653      	mov	r3, sl
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fb fbbc 	bl	8000158 <__aeabi_dsub>
 80049e0:	4632      	mov	r2, r6
 80049e2:	463b      	mov	r3, r7
 80049e4:	f7fb fbb8 	bl	8000158 <__aeabi_dsub>
 80049e8:	460b      	mov	r3, r1
 80049ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049ee:	9904      	ldr	r1, [sp, #16]
 80049f0:	4602      	mov	r2, r0
 80049f2:	2900      	cmp	r1, #0
 80049f4:	f6bf af47 	bge.w	8004886 <__ieee754_rem_pio2+0x6e>
 80049f8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80049fc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004a00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a04:	60e3      	str	r3, [r4, #12]
 8004a06:	426d      	negs	r5, r5
 8004a08:	e73d      	b.n	8004886 <__ieee754_rem_pio2+0x6e>
 8004a0a:	a33f      	add	r3, pc, #252	; (adr r3, 8004b08 <__ieee754_rem_pio2+0x2f0>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a14:	f7fb fd58 	bl	80004c8 <__aeabi_dmul>
 8004a18:	4606      	mov	r6, r0
 8004a1a:	460f      	mov	r7, r1
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4640      	mov	r0, r8
 8004a22:	4649      	mov	r1, r9
 8004a24:	f7fb fb98 	bl	8000158 <__aeabi_dsub>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4682      	mov	sl, r0
 8004a2e:	468b      	mov	fp, r1
 8004a30:	4640      	mov	r0, r8
 8004a32:	4649      	mov	r1, r9
 8004a34:	f7fb fb90 	bl	8000158 <__aeabi_dsub>
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	f7fb fb8c 	bl	8000158 <__aeabi_dsub>
 8004a40:	a333      	add	r3, pc, #204	; (adr r3, 8004b10 <__ieee754_rem_pio2+0x2f8>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	4606      	mov	r6, r0
 8004a48:	460f      	mov	r7, r1
 8004a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a4e:	f7fb fd3b 	bl	80004c8 <__aeabi_dmul>
 8004a52:	4632      	mov	r2, r6
 8004a54:	463b      	mov	r3, r7
 8004a56:	f7fb fb7f 	bl	8000158 <__aeabi_dsub>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4606      	mov	r6, r0
 8004a60:	460f      	mov	r7, r1
 8004a62:	4650      	mov	r0, sl
 8004a64:	4659      	mov	r1, fp
 8004a66:	f7fb fb77 	bl	8000158 <__aeabi_dsub>
 8004a6a:	9a05      	ldr	r2, [sp, #20]
 8004a6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b31      	cmp	r3, #49	; 0x31
 8004a74:	dc06      	bgt.n	8004a84 <__ieee754_rem_pio2+0x26c>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	46d0      	mov	r8, sl
 8004a7c:	46d9      	mov	r9, fp
 8004a7e:	e9c4 2300 	strd	r2, r3, [r4]
 8004a82:	e7a6      	b.n	80049d2 <__ieee754_rem_pio2+0x1ba>
 8004a84:	a326      	add	r3, pc, #152	; (adr r3, 8004b20 <__ieee754_rem_pio2+0x308>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a8e:	f7fb fd1b 	bl	80004c8 <__aeabi_dmul>
 8004a92:	4606      	mov	r6, r0
 8004a94:	460f      	mov	r7, r1
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4650      	mov	r0, sl
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	f7fb fb5b 	bl	8000158 <__aeabi_dsub>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4680      	mov	r8, r0
 8004aa8:	4689      	mov	r9, r1
 8004aaa:	4650      	mov	r0, sl
 8004aac:	4659      	mov	r1, fp
 8004aae:	f7fb fb53 	bl	8000158 <__aeabi_dsub>
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	f7fb fb4f 	bl	8000158 <__aeabi_dsub>
 8004aba:	a31b      	add	r3, pc, #108	; (adr r3, 8004b28 <__ieee754_rem_pio2+0x310>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ac8:	f7fb fcfe 	bl	80004c8 <__aeabi_dmul>
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	f7fb fb42 	bl	8000158 <__aeabi_dsub>
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	e75e      	b.n	8004998 <__ieee754_rem_pio2+0x180>
 8004ada:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <__ieee754_rem_pio2+0x330>)
 8004adc:	4592      	cmp	sl, r2
 8004ade:	dd35      	ble.n	8004b4c <__ieee754_rem_pio2+0x334>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	f7fb fb38 	bl	8000158 <__aeabi_dsub>
 8004ae8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004aec:	e9c4 0100 	strd	r0, r1, [r4]
 8004af0:	e6a2      	b.n	8004838 <__ieee754_rem_pio2+0x20>
 8004af2:	bf00      	nop
 8004af4:	f3af 8000 	nop.w
 8004af8:	54400000 	.word	0x54400000
 8004afc:	3ff921fb 	.word	0x3ff921fb
 8004b00:	1a626331 	.word	0x1a626331
 8004b04:	3dd0b461 	.word	0x3dd0b461
 8004b08:	1a600000 	.word	0x1a600000
 8004b0c:	3dd0b461 	.word	0x3dd0b461
 8004b10:	2e037073 	.word	0x2e037073
 8004b14:	3ba3198a 	.word	0x3ba3198a
 8004b18:	6dc9c883 	.word	0x6dc9c883
 8004b1c:	3fe45f30 	.word	0x3fe45f30
 8004b20:	2e000000 	.word	0x2e000000
 8004b24:	3ba3198a 	.word	0x3ba3198a
 8004b28:	252049c1 	.word	0x252049c1
 8004b2c:	397b839a 	.word	0x397b839a
 8004b30:	3fe921fb 	.word	0x3fe921fb
 8004b34:	4002d97b 	.word	0x4002d97b
 8004b38:	3ff921fb 	.word	0x3ff921fb
 8004b3c:	413921fb 	.word	0x413921fb
 8004b40:	3fe00000 	.word	0x3fe00000
 8004b44:	080057d0 	.word	0x080057d0
 8004b48:	7fefffff 	.word	0x7fefffff
 8004b4c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004b50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004b54:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004b58:	460f      	mov	r7, r1
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	f7fb ff4e 	bl	80009fc <__aeabi_d2iz>
 8004b60:	f7fb fc48 	bl	80003f4 <__aeabi_i2d>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b70:	f7fb faf2 	bl	8000158 <__aeabi_dsub>
 8004b74:	2200      	movs	r2, #0
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <__ieee754_rem_pio2+0x3d8>)
 8004b78:	f7fb fca6 	bl	80004c8 <__aeabi_dmul>
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	4606      	mov	r6, r0
 8004b80:	f7fb ff3c 	bl	80009fc <__aeabi_d2iz>
 8004b84:	f7fb fc36 	bl	80003f4 <__aeabi_i2d>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	4639      	mov	r1, r7
 8004b90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b94:	f7fb fae0 	bl	8000158 <__aeabi_dsub>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <__ieee754_rem_pio2+0x3d8>)
 8004b9c:	f7fb fc94 	bl	80004c8 <__aeabi_dmul>
 8004ba0:	f04f 0803 	mov.w	r8, #3
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	2700      	movs	r7, #0
 8004ba8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004bac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	46c2      	mov	sl, r8
 8004bba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004bbe:	f7fb feeb 	bl	8000998 <__aeabi_dcmpeq>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d1f4      	bne.n	8004bb0 <__ieee754_rem_pio2+0x398>
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <__ieee754_rem_pio2+0x3dc>)
 8004bc8:	462a      	mov	r2, r5
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	2302      	movs	r3, #2
 8004bce:	4621      	mov	r1, r4
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	a806      	add	r0, sp, #24
 8004bd4:	4653      	mov	r3, sl
 8004bd6:	f000 f8cd 	bl	8004d74 <__kernel_rem_pio2>
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	4605      	mov	r5, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f6bf ae51 	bge.w	8004886 <__ieee754_rem_pio2+0x6e>
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	68e3      	ldr	r3, [r4, #12]
 8004bee:	e707      	b.n	8004a00 <__ieee754_rem_pio2+0x1e8>
 8004bf0:	41700000 	.word	0x41700000
 8004bf4:	08005850 	.word	0x08005850

08004bf8 <__kernel_cos>:
 8004bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004c04:	4680      	mov	r8, r0
 8004c06:	460f      	mov	r7, r1
 8004c08:	e9cd 2300 	strd	r2, r3, [sp]
 8004c0c:	da04      	bge.n	8004c18 <__kernel_cos+0x20>
 8004c0e:	f7fb fef5 	bl	80009fc <__aeabi_d2iz>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f000 8086 	beq.w	8004d24 <__kernel_cos+0x12c>
 8004c18:	4642      	mov	r2, r8
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4639      	mov	r1, r7
 8004c20:	f7fb fc52 	bl	80004c8 <__aeabi_dmul>
 8004c24:	2200      	movs	r2, #0
 8004c26:	4b4e      	ldr	r3, [pc, #312]	; (8004d60 <__kernel_cos+0x168>)
 8004c28:	4604      	mov	r4, r0
 8004c2a:	460d      	mov	r5, r1
 8004c2c:	f7fb fc4c 	bl	80004c8 <__aeabi_dmul>
 8004c30:	a33f      	add	r3, pc, #252	; (adr r3, 8004d30 <__kernel_cos+0x138>)
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	4682      	mov	sl, r0
 8004c38:	468b      	mov	fp, r1
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f7fb fc43 	bl	80004c8 <__aeabi_dmul>
 8004c42:	a33d      	add	r3, pc, #244	; (adr r3, 8004d38 <__kernel_cos+0x140>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb fa88 	bl	800015c <__adddf3>
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	462b      	mov	r3, r5
 8004c50:	f7fb fc3a 	bl	80004c8 <__aeabi_dmul>
 8004c54:	a33a      	add	r3, pc, #232	; (adr r3, 8004d40 <__kernel_cos+0x148>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fa7d 	bl	8000158 <__aeabi_dsub>
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	f7fb fc31 	bl	80004c8 <__aeabi_dmul>
 8004c66:	a338      	add	r3, pc, #224	; (adr r3, 8004d48 <__kernel_cos+0x150>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fa76 	bl	800015c <__adddf3>
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	f7fb fc28 	bl	80004c8 <__aeabi_dmul>
 8004c78:	a335      	add	r3, pc, #212	; (adr r3, 8004d50 <__kernel_cos+0x158>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fa6b 	bl	8000158 <__aeabi_dsub>
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	f7fb fc1f 	bl	80004c8 <__aeabi_dmul>
 8004c8a:	a333      	add	r3, pc, #204	; (adr r3, 8004d58 <__kernel_cos+0x160>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f7fb fa64 	bl	800015c <__adddf3>
 8004c94:	4622      	mov	r2, r4
 8004c96:	462b      	mov	r3, r5
 8004c98:	f7fb fc16 	bl	80004c8 <__aeabi_dmul>
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	f7fb fc12 	bl	80004c8 <__aeabi_dmul>
 8004ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	4640      	mov	r0, r8
 8004cae:	4639      	mov	r1, r7
 8004cb0:	f7fb fc0a 	bl	80004c8 <__aeabi_dmul>
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f7fb fa4c 	bl	8000158 <__aeabi_dsub>
 8004cc0:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <__kernel_cos+0x16c>)
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	429e      	cmp	r6, r3
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	dc0e      	bgt.n	8004ce8 <__kernel_cos+0xf0>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4650      	mov	r0, sl
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	f7fb fa41 	bl	8000158 <__aeabi_dsub>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	2000      	movs	r0, #0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4922      	ldr	r1, [pc, #136]	; (8004d68 <__kernel_cos+0x170>)
 8004cde:	f7fb fa3b 	bl	8000158 <__aeabi_dsub>
 8004ce2:	b003      	add	sp, #12
 8004ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce8:	2400      	movs	r4, #0
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <__kernel_cos+0x174>)
 8004cec:	4622      	mov	r2, r4
 8004cee:	429e      	cmp	r6, r3
 8004cf0:	bfcc      	ite	gt
 8004cf2:	4d1f      	ldrgt	r5, [pc, #124]	; (8004d70 <__kernel_cos+0x178>)
 8004cf4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004cf8:	462b      	mov	r3, r5
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	491a      	ldr	r1, [pc, #104]	; (8004d68 <__kernel_cos+0x170>)
 8004cfe:	f7fb fa2b 	bl	8000158 <__aeabi_dsub>
 8004d02:	4622      	mov	r2, r4
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	462b      	mov	r3, r5
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	f7fb fa23 	bl	8000158 <__aeabi_dsub>
 8004d12:	4642      	mov	r2, r8
 8004d14:	464b      	mov	r3, r9
 8004d16:	f7fb fa1f 	bl	8000158 <__aeabi_dsub>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4630      	mov	r0, r6
 8004d20:	4639      	mov	r1, r7
 8004d22:	e7dc      	b.n	8004cde <__kernel_cos+0xe6>
 8004d24:	2000      	movs	r0, #0
 8004d26:	4910      	ldr	r1, [pc, #64]	; (8004d68 <__kernel_cos+0x170>)
 8004d28:	e7db      	b.n	8004ce2 <__kernel_cos+0xea>
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	be8838d4 	.word	0xbe8838d4
 8004d34:	bda8fae9 	.word	0xbda8fae9
 8004d38:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d3c:	3e21ee9e 	.word	0x3e21ee9e
 8004d40:	809c52ad 	.word	0x809c52ad
 8004d44:	3e927e4f 	.word	0x3e927e4f
 8004d48:	19cb1590 	.word	0x19cb1590
 8004d4c:	3efa01a0 	.word	0x3efa01a0
 8004d50:	16c15177 	.word	0x16c15177
 8004d54:	3f56c16c 	.word	0x3f56c16c
 8004d58:	5555554c 	.word	0x5555554c
 8004d5c:	3fa55555 	.word	0x3fa55555
 8004d60:	3fe00000 	.word	0x3fe00000
 8004d64:	3fd33332 	.word	0x3fd33332
 8004d68:	3ff00000 	.word	0x3ff00000
 8004d6c:	3fe90000 	.word	0x3fe90000
 8004d70:	3fd20000 	.word	0x3fd20000

08004d74 <__kernel_rem_pio2>:
 8004d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004d7c:	9308      	str	r3, [sp, #32]
 8004d7e:	9101      	str	r1, [sp, #4]
 8004d80:	4bc0      	ldr	r3, [pc, #768]	; (8005084 <__kernel_rem_pio2+0x310>)
 8004d82:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004d84:	f112 0f14 	cmn.w	r2, #20
 8004d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d8c:	bfa8      	it	ge
 8004d8e:	1ed4      	subge	r4, r2, #3
 8004d90:	9304      	str	r3, [sp, #16]
 8004d92:	9b08      	ldr	r3, [sp, #32]
 8004d94:	bfb8      	it	lt
 8004d96:	2400      	movlt	r4, #0
 8004d98:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004d9c:	9306      	str	r3, [sp, #24]
 8004d9e:	bfa4      	itt	ge
 8004da0:	2318      	movge	r3, #24
 8004da2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004da6:	f06f 0317 	mvn.w	r3, #23
 8004daa:	fb04 3303 	mla	r3, r4, r3, r3
 8004dae:	eb03 0a02 	add.w	sl, r3, r2
 8004db2:	9a06      	ldr	r2, [sp, #24]
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	1aa7      	subs	r7, r4, r2
 8004db8:	eb03 0802 	add.w	r8, r3, r2
 8004dbc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004dbe:	2500      	movs	r5, #0
 8004dc0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9009      	str	r0, [sp, #36]	; 0x24
 8004dca:	ae20      	add	r6, sp, #128	; 0x80
 8004dcc:	4545      	cmp	r5, r8
 8004dce:	dd19      	ble.n	8004e04 <__kernel_rem_pio2+0x90>
 8004dd0:	9b08      	ldr	r3, [sp, #32]
 8004dd2:	aa20      	add	r2, sp, #128	; 0x80
 8004dd4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004dd8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004ddc:	f1c3 0301 	rsb	r3, r3, #1
 8004de0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004de4:	9307      	str	r3, [sp, #28]
 8004de6:	9b07      	ldr	r3, [sp, #28]
 8004de8:	9a04      	ldr	r2, [sp, #16]
 8004dea:	4443      	add	r3, r8
 8004dec:	429a      	cmp	r2, r3
 8004dee:	db35      	blt.n	8004e5c <__kernel_rem_pio2+0xe8>
 8004df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df2:	2200      	movs	r2, #0
 8004df4:	f1a3 0908 	sub.w	r9, r3, #8
 8004df8:	2300      	movs	r3, #0
 8004dfa:	462f      	mov	r7, r5
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e02:	e01f      	b.n	8004e44 <__kernel_rem_pio2+0xd0>
 8004e04:	42ef      	cmn	r7, r5
 8004e06:	d40b      	bmi.n	8004e20 <__kernel_rem_pio2+0xac>
 8004e08:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e10:	f7fb faf0 	bl	80003f4 <__aeabi_i2d>
 8004e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e18:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	e7d5      	b.n	8004dcc <__kernel_rem_pio2+0x58>
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	e7f8      	b.n	8004e18 <__kernel_rem_pio2+0xa4>
 8004e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004e2e:	f7fb fb4b 	bl	80004c8 <__aeabi_dmul>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e3a:	f7fb f98f 	bl	800015c <__adddf3>
 8004e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e42:	3601      	adds	r6, #1
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	3f08      	subs	r7, #8
 8004e48:	429e      	cmp	r6, r3
 8004e4a:	ddec      	ble.n	8004e26 <__kernel_rem_pio2+0xb2>
 8004e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e50:	3508      	adds	r5, #8
 8004e52:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004e56:	f108 0801 	add.w	r8, r8, #1
 8004e5a:	e7c4      	b.n	8004de6 <__kernel_rem_pio2+0x72>
 8004e5c:	9b04      	ldr	r3, [sp, #16]
 8004e5e:	aa0c      	add	r2, sp, #48	; 0x30
 8004e60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e66:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004e68:	9f04      	ldr	r7, [sp, #16]
 8004e6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e70:	463e      	mov	r6, r7
 8004e72:	ab98      	add	r3, sp, #608	; 0x260
 8004e74:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004e78:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e7c:	f8cd b008 	str.w	fp, [sp, #8]
 8004e80:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	dc71      	bgt.n	8004f6c <__kernel_rem_pio2+0x1f8>
 8004e88:	4652      	mov	r2, sl
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	f000 fbf7 	bl	8005680 <scalbn>
 8004e92:	2200      	movs	r2, #0
 8004e94:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	f7fb fb14 	bl	80004c8 <__aeabi_dmul>
 8004ea0:	f000 fb6e 	bl	8005580 <floor>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4b78      	ldr	r3, [pc, #480]	; (8005088 <__kernel_rem_pio2+0x314>)
 8004ea8:	f7fb fb0e 	bl	80004c8 <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7fb f950 	bl	8000158 <__aeabi_dsub>
 8004eb8:	460d      	mov	r5, r1
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f7fb fd9e 	bl	80009fc <__aeabi_d2iz>
 8004ec0:	9007      	str	r0, [sp, #28]
 8004ec2:	f7fb fa97 	bl	80003f4 <__aeabi_i2d>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	f7fb f943 	bl	8000158 <__aeabi_dsub>
 8004ed2:	f1ba 0f00 	cmp.w	sl, #0
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	4689      	mov	r9, r1
 8004eda:	dd70      	ble.n	8004fbe <__kernel_rem_pio2+0x24a>
 8004edc:	1e7a      	subs	r2, r7, #1
 8004ede:	ab0c      	add	r3, sp, #48	; 0x30
 8004ee0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ee4:	9c07      	ldr	r4, [sp, #28]
 8004ee6:	f1ca 0118 	rsb	r1, sl, #24
 8004eea:	fa40 f301 	asr.w	r3, r0, r1
 8004eee:	441c      	add	r4, r3
 8004ef0:	408b      	lsls	r3, r1
 8004ef2:	1ac0      	subs	r0, r0, r3
 8004ef4:	ab0c      	add	r3, sp, #48	; 0x30
 8004ef6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004efa:	f1ca 0317 	rsb	r3, sl, #23
 8004efe:	9407      	str	r4, [sp, #28]
 8004f00:	fa40 f303 	asr.w	r3, r0, r3
 8004f04:	9302      	str	r3, [sp, #8]
 8004f06:	9b02      	ldr	r3, [sp, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dd66      	ble.n	8004fda <__kernel_rem_pio2+0x266>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f12:	4614      	mov	r4, r2
 8004f14:	9b07      	ldr	r3, [sp, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	9307      	str	r3, [sp, #28]
 8004f1a:	4297      	cmp	r7, r2
 8004f1c:	f300 809f 	bgt.w	800505e <__kernel_rem_pio2+0x2ea>
 8004f20:	f1ba 0f00 	cmp.w	sl, #0
 8004f24:	dd07      	ble.n	8004f36 <__kernel_rem_pio2+0x1c2>
 8004f26:	f1ba 0f01 	cmp.w	sl, #1
 8004f2a:	f000 80b9 	beq.w	80050a0 <__kernel_rem_pio2+0x32c>
 8004f2e:	f1ba 0f02 	cmp.w	sl, #2
 8004f32:	f000 80bf 	beq.w	80050b4 <__kernel_rem_pio2+0x340>
 8004f36:	9b02      	ldr	r3, [sp, #8]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d14e      	bne.n	8004fda <__kernel_rem_pio2+0x266>
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	2000      	movs	r0, #0
 8004f42:	4952      	ldr	r1, [pc, #328]	; (800508c <__kernel_rem_pio2+0x318>)
 8004f44:	f7fb f908 	bl	8000158 <__aeabi_dsub>
 8004f48:	4680      	mov	r8, r0
 8004f4a:	4689      	mov	r9, r1
 8004f4c:	2c00      	cmp	r4, #0
 8004f4e:	d044      	beq.n	8004fda <__kernel_rem_pio2+0x266>
 8004f50:	4652      	mov	r2, sl
 8004f52:	2000      	movs	r0, #0
 8004f54:	494d      	ldr	r1, [pc, #308]	; (800508c <__kernel_rem_pio2+0x318>)
 8004f56:	f000 fb93 	bl	8005680 <scalbn>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f7fb f8f9 	bl	8000158 <__aeabi_dsub>
 8004f66:	4680      	mov	r8, r0
 8004f68:	4689      	mov	r9, r1
 8004f6a:	e036      	b.n	8004fda <__kernel_rem_pio2+0x266>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4b48      	ldr	r3, [pc, #288]	; (8005090 <__kernel_rem_pio2+0x31c>)
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fb faa8 	bl	80004c8 <__aeabi_dmul>
 8004f78:	f7fb fd40 	bl	80009fc <__aeabi_d2iz>
 8004f7c:	f7fb fa3a 	bl	80003f4 <__aeabi_i2d>
 8004f80:	2200      	movs	r2, #0
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <__kernel_rem_pio2+0x320>)
 8004f84:	4680      	mov	r8, r0
 8004f86:	4689      	mov	r9, r1
 8004f88:	f7fb fa9e 	bl	80004c8 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb f8e0 	bl	8000158 <__aeabi_dsub>
 8004f98:	f7fb fd30 	bl	80009fc <__aeabi_d2iz>
 8004f9c:	9b02      	ldr	r3, [sp, #8]
 8004f9e:	3e01      	subs	r6, #1
 8004fa0:	f843 0b04 	str.w	r0, [r3], #4
 8004fa4:	9302      	str	r3, [sp, #8]
 8004fa6:	ab70      	add	r3, sp, #448	; 0x1c0
 8004fa8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fac:	4640      	mov	r0, r8
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb f8d2 	bl	800015c <__adddf3>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	460d      	mov	r5, r1
 8004fbc:	e762      	b.n	8004e84 <__kernel_rem_pio2+0x110>
 8004fbe:	d105      	bne.n	8004fcc <__kernel_rem_pio2+0x258>
 8004fc0:	1e7b      	subs	r3, r7, #1
 8004fc2:	aa0c      	add	r2, sp, #48	; 0x30
 8004fc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fc8:	15c3      	asrs	r3, r0, #23
 8004fca:	e79b      	b.n	8004f04 <__kernel_rem_pio2+0x190>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4b32      	ldr	r3, [pc, #200]	; (8005098 <__kernel_rem_pio2+0x324>)
 8004fd0:	f7fb fd00 	bl	80009d4 <__aeabi_dcmpge>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d13f      	bne.n	8005058 <__kernel_rem_pio2+0x2e4>
 8004fd8:	9002      	str	r0, [sp, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	f7fb fcd9 	bl	8000998 <__aeabi_dcmpeq>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f000 80b5 	beq.w	8005156 <__kernel_rem_pio2+0x3e2>
 8004fec:	1e7c      	subs	r4, r7, #1
 8004fee:	4623      	mov	r3, r4
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	9904      	ldr	r1, [sp, #16]
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	da64      	bge.n	80050c2 <__kernel_rem_pio2+0x34e>
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d078      	beq.n	80050ee <__kernel_rem_pio2+0x37a>
 8004ffc:	ab0c      	add	r3, sp, #48	; 0x30
 8004ffe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005002:	f1aa 0a18 	sub.w	sl, sl, #24
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80a3 	beq.w	8005152 <__kernel_rem_pio2+0x3de>
 800500c:	4652      	mov	r2, sl
 800500e:	2000      	movs	r0, #0
 8005010:	491e      	ldr	r1, [pc, #120]	; (800508c <__kernel_rem_pio2+0x318>)
 8005012:	f000 fb35 	bl	8005680 <scalbn>
 8005016:	46a2      	mov	sl, r4
 8005018:	4606      	mov	r6, r0
 800501a:	460f      	mov	r7, r1
 800501c:	f04f 0800 	mov.w	r8, #0
 8005020:	00e3      	lsls	r3, r4, #3
 8005022:	9306      	str	r3, [sp, #24]
 8005024:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8005090 <__kernel_rem_pio2+0x31c>
 8005028:	ab70      	add	r3, sp, #448	; 0x1c0
 800502a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800502e:	f1ba 0f00 	cmp.w	sl, #0
 8005032:	f280 80c6 	bge.w	80051c2 <__kernel_rem_pio2+0x44e>
 8005036:	4627      	mov	r7, r4
 8005038:	f04f 0800 	mov.w	r8, #0
 800503c:	2f00      	cmp	r7, #0
 800503e:	f2c0 80f3 	blt.w	8005228 <__kernel_rem_pio2+0x4b4>
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <__kernel_rem_pio2+0x328>)
 8005044:	f04f 0a00 	mov.w	sl, #0
 8005048:	461d      	mov	r5, r3
 800504a:	ab70      	add	r3, sp, #448	; 0x1c0
 800504c:	f04f 0b00 	mov.w	fp, #0
 8005050:	2600      	movs	r6, #0
 8005052:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005056:	e0d9      	b.n	800520c <__kernel_rem_pio2+0x498>
 8005058:	2302      	movs	r3, #2
 800505a:	9302      	str	r3, [sp, #8]
 800505c:	e756      	b.n	8004f0c <__kernel_rem_pio2+0x198>
 800505e:	f8db 3000 	ldr.w	r3, [fp]
 8005062:	b954      	cbnz	r4, 800507a <__kernel_rem_pio2+0x306>
 8005064:	b123      	cbz	r3, 8005070 <__kernel_rem_pio2+0x2fc>
 8005066:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800506a:	f8cb 3000 	str.w	r3, [fp]
 800506e:	2301      	movs	r3, #1
 8005070:	461c      	mov	r4, r3
 8005072:	3201      	adds	r2, #1
 8005074:	f10b 0b04 	add.w	fp, fp, #4
 8005078:	e74f      	b.n	8004f1a <__kernel_rem_pio2+0x1a6>
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	f8cb 3000 	str.w	r3, [fp]
 8005080:	4623      	mov	r3, r4
 8005082:	e7f5      	b.n	8005070 <__kernel_rem_pio2+0x2fc>
 8005084:	08005998 	.word	0x08005998
 8005088:	40200000 	.word	0x40200000
 800508c:	3ff00000 	.word	0x3ff00000
 8005090:	3e700000 	.word	0x3e700000
 8005094:	41700000 	.word	0x41700000
 8005098:	3fe00000 	.word	0x3fe00000
 800509c:	08005958 	.word	0x08005958
 80050a0:	1e7a      	subs	r2, r7, #1
 80050a2:	ab0c      	add	r3, sp, #48	; 0x30
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050ac:	a90c      	add	r1, sp, #48	; 0x30
 80050ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80050b2:	e740      	b.n	8004f36 <__kernel_rem_pio2+0x1c2>
 80050b4:	1e7a      	subs	r2, r7, #1
 80050b6:	ab0c      	add	r3, sp, #48	; 0x30
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80050c0:	e7f4      	b.n	80050ac <__kernel_rem_pio2+0x338>
 80050c2:	a90c      	add	r1, sp, #48	; 0x30
 80050c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	430a      	orrs	r2, r1
 80050cc:	e791      	b.n	8004ff2 <__kernel_rem_pio2+0x27e>
 80050ce:	3401      	adds	r4, #1
 80050d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d0fa      	beq.n	80050ce <__kernel_rem_pio2+0x35a>
 80050d8:	9b08      	ldr	r3, [sp, #32]
 80050da:	1c7e      	adds	r6, r7, #1
 80050dc:	18fd      	adds	r5, r7, r3
 80050de:	ab20      	add	r3, sp, #128	; 0x80
 80050e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80050e4:	443c      	add	r4, r7
 80050e6:	42b4      	cmp	r4, r6
 80050e8:	da04      	bge.n	80050f4 <__kernel_rem_pio2+0x380>
 80050ea:	4627      	mov	r7, r4
 80050ec:	e6c0      	b.n	8004e70 <__kernel_rem_pio2+0xfc>
 80050ee:	2401      	movs	r4, #1
 80050f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f2:	e7ed      	b.n	80050d0 <__kernel_rem_pio2+0x35c>
 80050f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f6:	462f      	mov	r7, r5
 80050f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80050fc:	f7fb f97a 	bl	80003f4 <__aeabi_i2d>
 8005100:	f04f 0b00 	mov.w	fp, #0
 8005104:	f04f 0800 	mov.w	r8, #0
 8005108:	f04f 0900 	mov.w	r9, #0
 800510c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8005112:	3b08      	subs	r3, #8
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	9b06      	ldr	r3, [sp, #24]
 8005118:	459b      	cmp	fp, r3
 800511a:	dd07      	ble.n	800512c <__kernel_rem_pio2+0x3b8>
 800511c:	ab70      	add	r3, sp, #448	; 0x1c0
 800511e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005122:	463d      	mov	r5, r7
 8005124:	e9c3 8900 	strd	r8, r9, [r3]
 8005128:	3601      	adds	r6, #1
 800512a:	e7dc      	b.n	80050e6 <__kernel_rem_pio2+0x372>
 800512c:	9902      	ldr	r1, [sp, #8]
 800512e:	f10b 0b01 	add.w	fp, fp, #1
 8005132:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005136:	9102      	str	r1, [sp, #8]
 8005138:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800513c:	f7fb f9c4 	bl	80004c8 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4640      	mov	r0, r8
 8005146:	4649      	mov	r1, r9
 8005148:	f7fb f808 	bl	800015c <__adddf3>
 800514c:	4680      	mov	r8, r0
 800514e:	4689      	mov	r9, r1
 8005150:	e7e1      	b.n	8005116 <__kernel_rem_pio2+0x3a2>
 8005152:	3c01      	subs	r4, #1
 8005154:	e752      	b.n	8004ffc <__kernel_rem_pio2+0x288>
 8005156:	f1ca 0200 	rsb	r2, sl, #0
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f000 fa8f 	bl	8005680 <scalbn>
 8005162:	2200      	movs	r2, #0
 8005164:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <__kernel_rem_pio2+0x688>)
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	f7fb fc33 	bl	80009d4 <__aeabi_dcmpge>
 800516e:	b1f8      	cbz	r0, 80051b0 <__kernel_rem_pio2+0x43c>
 8005170:	2200      	movs	r2, #0
 8005172:	4ba3      	ldr	r3, [pc, #652]	; (8005400 <__kernel_rem_pio2+0x68c>)
 8005174:	4620      	mov	r0, r4
 8005176:	4629      	mov	r1, r5
 8005178:	f7fb f9a6 	bl	80004c8 <__aeabi_dmul>
 800517c:	f7fb fc3e 	bl	80009fc <__aeabi_d2iz>
 8005180:	4606      	mov	r6, r0
 8005182:	f7fb f937 	bl	80003f4 <__aeabi_i2d>
 8005186:	2200      	movs	r2, #0
 8005188:	4b9c      	ldr	r3, [pc, #624]	; (80053fc <__kernel_rem_pio2+0x688>)
 800518a:	f7fb f99d 	bl	80004c8 <__aeabi_dmul>
 800518e:	460b      	mov	r3, r1
 8005190:	4602      	mov	r2, r0
 8005192:	4629      	mov	r1, r5
 8005194:	4620      	mov	r0, r4
 8005196:	f7fa ffdf 	bl	8000158 <__aeabi_dsub>
 800519a:	f7fb fc2f 	bl	80009fc <__aeabi_d2iz>
 800519e:	1c7c      	adds	r4, r7, #1
 80051a0:	ab0c      	add	r3, sp, #48	; 0x30
 80051a2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80051a6:	f10a 0a18 	add.w	sl, sl, #24
 80051aa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80051ae:	e72d      	b.n	800500c <__kernel_rem_pio2+0x298>
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb fc22 	bl	80009fc <__aeabi_d2iz>
 80051b8:	ab0c      	add	r3, sp, #48	; 0x30
 80051ba:	463c      	mov	r4, r7
 80051bc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80051c0:	e724      	b.n	800500c <__kernel_rem_pio2+0x298>
 80051c2:	ab0c      	add	r3, sp, #48	; 0x30
 80051c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80051c8:	f7fb f914 	bl	80003f4 <__aeabi_i2d>
 80051cc:	4632      	mov	r2, r6
 80051ce:	463b      	mov	r3, r7
 80051d0:	f7fb f97a 	bl	80004c8 <__aeabi_dmul>
 80051d4:	4642      	mov	r2, r8
 80051d6:	e86b 0102 	strd	r0, r1, [fp], #-8
 80051da:	464b      	mov	r3, r9
 80051dc:	4630      	mov	r0, r6
 80051de:	4639      	mov	r1, r7
 80051e0:	f7fb f972 	bl	80004c8 <__aeabi_dmul>
 80051e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80051e8:	4606      	mov	r6, r0
 80051ea:	460f      	mov	r7, r1
 80051ec:	e71f      	b.n	800502e <__kernel_rem_pio2+0x2ba>
 80051ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80051f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80051f6:	f7fb f967 	bl	80004c8 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4650      	mov	r0, sl
 8005200:	4659      	mov	r1, fp
 8005202:	f7fa ffab 	bl	800015c <__adddf3>
 8005206:	4682      	mov	sl, r0
 8005208:	468b      	mov	fp, r1
 800520a:	3601      	adds	r6, #1
 800520c:	9b04      	ldr	r3, [sp, #16]
 800520e:	429e      	cmp	r6, r3
 8005210:	dc01      	bgt.n	8005216 <__kernel_rem_pio2+0x4a2>
 8005212:	45b0      	cmp	r8, r6
 8005214:	daeb      	bge.n	80051ee <__kernel_rem_pio2+0x47a>
 8005216:	ab48      	add	r3, sp, #288	; 0x120
 8005218:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800521c:	e9c3 ab00 	strd	sl, fp, [r3]
 8005220:	3f01      	subs	r7, #1
 8005222:	f108 0801 	add.w	r8, r8, #1
 8005226:	e709      	b.n	800503c <__kernel_rem_pio2+0x2c8>
 8005228:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800522a:	2b02      	cmp	r3, #2
 800522c:	dc09      	bgt.n	8005242 <__kernel_rem_pio2+0x4ce>
 800522e:	2b00      	cmp	r3, #0
 8005230:	dc34      	bgt.n	800529c <__kernel_rem_pio2+0x528>
 8005232:	d05e      	beq.n	80052f2 <__kernel_rem_pio2+0x57e>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	f003 0007 	and.w	r0, r3, #7
 800523a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005242:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005244:	2b03      	cmp	r3, #3
 8005246:	d1f5      	bne.n	8005234 <__kernel_rem_pio2+0x4c0>
 8005248:	9a06      	ldr	r2, [sp, #24]
 800524a:	ab48      	add	r3, sp, #288	; 0x120
 800524c:	441a      	add	r2, r3
 800524e:	4615      	mov	r5, r2
 8005250:	4692      	mov	sl, r2
 8005252:	46a3      	mov	fp, r4
 8005254:	f1bb 0f00 	cmp.w	fp, #0
 8005258:	dc7a      	bgt.n	8005350 <__kernel_rem_pio2+0x5dc>
 800525a:	46aa      	mov	sl, r5
 800525c:	46a3      	mov	fp, r4
 800525e:	f1bb 0f01 	cmp.w	fp, #1
 8005262:	f300 8094 	bgt.w	800538e <__kernel_rem_pio2+0x61a>
 8005266:	2700      	movs	r7, #0
 8005268:	463e      	mov	r6, r7
 800526a:	2c01      	cmp	r4, #1
 800526c:	f300 80ae 	bgt.w	80053cc <__kernel_rem_pio2+0x658>
 8005270:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8005274:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f040 80b0 	bne.w	80053e0 <__kernel_rem_pio2+0x66c>
 8005280:	4603      	mov	r3, r0
 8005282:	462a      	mov	r2, r5
 8005284:	9801      	ldr	r0, [sp, #4]
 8005286:	e9c0 2300 	strd	r2, r3, [r0]
 800528a:	4622      	mov	r2, r4
 800528c:	460b      	mov	r3, r1
 800528e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005292:	463a      	mov	r2, r7
 8005294:	4633      	mov	r3, r6
 8005296:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800529a:	e7cb      	b.n	8005234 <__kernel_rem_pio2+0x4c0>
 800529c:	2000      	movs	r0, #0
 800529e:	9a06      	ldr	r2, [sp, #24]
 80052a0:	ab48      	add	r3, sp, #288	; 0x120
 80052a2:	441a      	add	r2, r3
 80052a4:	4615      	mov	r5, r2
 80052a6:	46a0      	mov	r8, r4
 80052a8:	4601      	mov	r1, r0
 80052aa:	f1b8 0f00 	cmp.w	r8, #0
 80052ae:	da3c      	bge.n	800532a <__kernel_rem_pio2+0x5b6>
 80052b0:	9b02      	ldr	r3, [sp, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d040      	beq.n	8005338 <__kernel_rem_pio2+0x5c4>
 80052b6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80052ba:	4602      	mov	r2, r0
 80052bc:	462b      	mov	r3, r5
 80052be:	9d01      	ldr	r5, [sp, #4]
 80052c0:	2601      	movs	r6, #1
 80052c2:	e9c5 2300 	strd	r2, r3, [r5]
 80052c6:	460b      	mov	r3, r1
 80052c8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80052cc:	f7fa ff44 	bl	8000158 <__aeabi_dsub>
 80052d0:	4684      	mov	ip, r0
 80052d2:	460f      	mov	r7, r1
 80052d4:	ad48      	add	r5, sp, #288	; 0x120
 80052d6:	42b4      	cmp	r4, r6
 80052d8:	f105 0508 	add.w	r5, r5, #8
 80052dc:	da2e      	bge.n	800533c <__kernel_rem_pio2+0x5c8>
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	b10b      	cbz	r3, 80052e6 <__kernel_rem_pio2+0x572>
 80052e2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80052e6:	4662      	mov	r2, ip
 80052e8:	463b      	mov	r3, r7
 80052ea:	9901      	ldr	r1, [sp, #4]
 80052ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80052f0:	e7a0      	b.n	8005234 <__kernel_rem_pio2+0x4c0>
 80052f2:	9a06      	ldr	r2, [sp, #24]
 80052f4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80052f6:	ab48      	add	r3, sp, #288	; 0x120
 80052f8:	441a      	add	r2, r3
 80052fa:	4615      	mov	r5, r2
 80052fc:	4637      	mov	r7, r6
 80052fe:	2c00      	cmp	r4, #0
 8005300:	da09      	bge.n	8005316 <__kernel_rem_pio2+0x5a2>
 8005302:	9b02      	ldr	r3, [sp, #8]
 8005304:	b10b      	cbz	r3, 800530a <__kernel_rem_pio2+0x596>
 8005306:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800530a:	4632      	mov	r2, r6
 800530c:	463b      	mov	r3, r7
 800530e:	9901      	ldr	r1, [sp, #4]
 8005310:	e9c1 2300 	strd	r2, r3, [r1]
 8005314:	e78e      	b.n	8005234 <__kernel_rem_pio2+0x4c0>
 8005316:	4630      	mov	r0, r6
 8005318:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800531c:	4639      	mov	r1, r7
 800531e:	f7fa ff1d 	bl	800015c <__adddf3>
 8005322:	3c01      	subs	r4, #1
 8005324:	4606      	mov	r6, r0
 8005326:	460f      	mov	r7, r1
 8005328:	e7e9      	b.n	80052fe <__kernel_rem_pio2+0x58a>
 800532a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800532e:	f7fa ff15 	bl	800015c <__adddf3>
 8005332:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005336:	e7b8      	b.n	80052aa <__kernel_rem_pio2+0x536>
 8005338:	460d      	mov	r5, r1
 800533a:	e7be      	b.n	80052ba <__kernel_rem_pio2+0x546>
 800533c:	4660      	mov	r0, ip
 800533e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005342:	4639      	mov	r1, r7
 8005344:	f7fa ff0a 	bl	800015c <__adddf3>
 8005348:	3601      	adds	r6, #1
 800534a:	4684      	mov	ip, r0
 800534c:	460f      	mov	r7, r1
 800534e:	e7c2      	b.n	80052d6 <__kernel_rem_pio2+0x562>
 8005350:	e9da 6700 	ldrd	r6, r7, [sl]
 8005354:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	4640      	mov	r0, r8
 800535e:	4649      	mov	r1, r9
 8005360:	f7fa fefc 	bl	800015c <__adddf3>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800536c:	4640      	mov	r0, r8
 800536e:	4649      	mov	r1, r9
 8005370:	f7fa fef2 	bl	8000158 <__aeabi_dsub>
 8005374:	4632      	mov	r2, r6
 8005376:	463b      	mov	r3, r7
 8005378:	f7fa fef0 	bl	800015c <__adddf3>
 800537c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005380:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005384:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005388:	e9ca 2300 	strd	r2, r3, [sl]
 800538c:	e762      	b.n	8005254 <__kernel_rem_pio2+0x4e0>
 800538e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005392:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005396:	4642      	mov	r2, r8
 8005398:	464b      	mov	r3, r9
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fa fedd 	bl	800015c <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053aa:	4630      	mov	r0, r6
 80053ac:	4639      	mov	r1, r7
 80053ae:	f7fa fed3 	bl	8000158 <__aeabi_dsub>
 80053b2:	4642      	mov	r2, r8
 80053b4:	464b      	mov	r3, r9
 80053b6:	f7fa fed1 	bl	800015c <__adddf3>
 80053ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053be:	e86a 0102 	strd	r0, r1, [sl], #-8
 80053c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80053c6:	e9ca 2300 	strd	r2, r3, [sl]
 80053ca:	e748      	b.n	800525e <__kernel_rem_pio2+0x4ea>
 80053cc:	4638      	mov	r0, r7
 80053ce:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80053d2:	4631      	mov	r1, r6
 80053d4:	f7fa fec2 	bl	800015c <__adddf3>
 80053d8:	3c01      	subs	r4, #1
 80053da:	4607      	mov	r7, r0
 80053dc:	460e      	mov	r6, r1
 80053de:	e744      	b.n	800526a <__kernel_rem_pio2+0x4f6>
 80053e0:	9b01      	ldr	r3, [sp, #4]
 80053e2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80053e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80053ea:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80053ee:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80053f2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80053f6:	601d      	str	r5, [r3, #0]
 80053f8:	615e      	str	r6, [r3, #20]
 80053fa:	e71b      	b.n	8005234 <__kernel_rem_pio2+0x4c0>
 80053fc:	41700000 	.word	0x41700000
 8005400:	3e700000 	.word	0x3e700000
 8005404:	00000000 	.word	0x00000000

08005408 <__kernel_sin>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	e9cd 2300 	strd	r2, r3, [sp]
 8005412:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005416:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800541a:	4682      	mov	sl, r0
 800541c:	460c      	mov	r4, r1
 800541e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005420:	da03      	bge.n	800542a <__kernel_sin+0x22>
 8005422:	f7fb faeb 	bl	80009fc <__aeabi_d2iz>
 8005426:	2800      	cmp	r0, #0
 8005428:	d050      	beq.n	80054cc <__kernel_sin+0xc4>
 800542a:	4652      	mov	r2, sl
 800542c:	4623      	mov	r3, r4
 800542e:	4650      	mov	r0, sl
 8005430:	4621      	mov	r1, r4
 8005432:	f7fb f849 	bl	80004c8 <__aeabi_dmul>
 8005436:	4606      	mov	r6, r0
 8005438:	460f      	mov	r7, r1
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4650      	mov	r0, sl
 8005440:	4621      	mov	r1, r4
 8005442:	f7fb f841 	bl	80004c8 <__aeabi_dmul>
 8005446:	a33e      	add	r3, pc, #248	; (adr r3, 8005540 <__kernel_sin+0x138>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	4680      	mov	r8, r0
 800544e:	4689      	mov	r9, r1
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb f838 	bl	80004c8 <__aeabi_dmul>
 8005458:	a33b      	add	r3, pc, #236	; (adr r3, 8005548 <__kernel_sin+0x140>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f7fa fe7b 	bl	8000158 <__aeabi_dsub>
 8005462:	4632      	mov	r2, r6
 8005464:	463b      	mov	r3, r7
 8005466:	f7fb f82f 	bl	80004c8 <__aeabi_dmul>
 800546a:	a339      	add	r3, pc, #228	; (adr r3, 8005550 <__kernel_sin+0x148>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fa fe74 	bl	800015c <__adddf3>
 8005474:	4632      	mov	r2, r6
 8005476:	463b      	mov	r3, r7
 8005478:	f7fb f826 	bl	80004c8 <__aeabi_dmul>
 800547c:	a336      	add	r3, pc, #216	; (adr r3, 8005558 <__kernel_sin+0x150>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fa fe69 	bl	8000158 <__aeabi_dsub>
 8005486:	4632      	mov	r2, r6
 8005488:	463b      	mov	r3, r7
 800548a:	f7fb f81d 	bl	80004c8 <__aeabi_dmul>
 800548e:	a334      	add	r3, pc, #208	; (adr r3, 8005560 <__kernel_sin+0x158>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f7fa fe62 	bl	800015c <__adddf3>
 8005498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800549c:	b9dd      	cbnz	r5, 80054d6 <__kernel_sin+0xce>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4630      	mov	r0, r6
 80054a4:	4639      	mov	r1, r7
 80054a6:	f7fb f80f 	bl	80004c8 <__aeabi_dmul>
 80054aa:	a32f      	add	r3, pc, #188	; (adr r3, 8005568 <__kernel_sin+0x160>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fa fe52 	bl	8000158 <__aeabi_dsub>
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	f7fb f806 	bl	80004c8 <__aeabi_dmul>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4650      	mov	r0, sl
 80054c2:	4621      	mov	r1, r4
 80054c4:	f7fa fe4a 	bl	800015c <__adddf3>
 80054c8:	4682      	mov	sl, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4650      	mov	r0, sl
 80054ce:	4621      	mov	r1, r4
 80054d0:	b006      	add	sp, #24
 80054d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d6:	2200      	movs	r2, #0
 80054d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <__kernel_sin+0x168>)
 80054de:	f7fa fff3 	bl	80004c8 <__aeabi_dmul>
 80054e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fa ffeb 	bl	80004c8 <__aeabi_dmul>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054fa:	f7fa fe2d 	bl	8000158 <__aeabi_dsub>
 80054fe:	4632      	mov	r2, r6
 8005500:	463b      	mov	r3, r7
 8005502:	f7fa ffe1 	bl	80004c8 <__aeabi_dmul>
 8005506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800550a:	f7fa fe25 	bl	8000158 <__aeabi_dsub>
 800550e:	a316      	add	r3, pc, #88	; (adr r3, 8005568 <__kernel_sin+0x160>)
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fa ffd4 	bl	80004c8 <__aeabi_dmul>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4630      	mov	r0, r6
 8005526:	4639      	mov	r1, r7
 8005528:	f7fa fe18 	bl	800015c <__adddf3>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4650      	mov	r0, sl
 8005532:	4621      	mov	r1, r4
 8005534:	f7fa fe10 	bl	8000158 <__aeabi_dsub>
 8005538:	e7c6      	b.n	80054c8 <__kernel_sin+0xc0>
 800553a:	bf00      	nop
 800553c:	f3af 8000 	nop.w
 8005540:	5acfd57c 	.word	0x5acfd57c
 8005544:	3de5d93a 	.word	0x3de5d93a
 8005548:	8a2b9ceb 	.word	0x8a2b9ceb
 800554c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005550:	57b1fe7d 	.word	0x57b1fe7d
 8005554:	3ec71de3 	.word	0x3ec71de3
 8005558:	19c161d5 	.word	0x19c161d5
 800555c:	3f2a01a0 	.word	0x3f2a01a0
 8005560:	1110f8a6 	.word	0x1110f8a6
 8005564:	3f811111 	.word	0x3f811111
 8005568:	55555549 	.word	0x55555549
 800556c:	3fc55555 	.word	0x3fc55555
 8005570:	3fe00000 	.word	0x3fe00000

08005574 <fabs>:
 8005574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005578:	4770      	bx	lr
 800557a:	0000      	movs	r0, r0
 800557c:	0000      	movs	r0, r0
	...

08005580 <floor>:
 8005580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005584:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005588:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800558c:	2e13      	cmp	r6, #19
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4607      	mov	r7, r0
 8005594:	460c      	mov	r4, r1
 8005596:	4605      	mov	r5, r0
 8005598:	dc34      	bgt.n	8005604 <floor+0x84>
 800559a:	2e00      	cmp	r6, #0
 800559c:	da15      	bge.n	80055ca <floor+0x4a>
 800559e:	a334      	add	r3, pc, #208	; (adr r3, 8005670 <floor+0xf0>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f7fa fdda 	bl	800015c <__adddf3>
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	f7fb fa1c 	bl	80009e8 <__aeabi_dcmpgt>
 80055b0:	b140      	cbz	r0, 80055c4 <floor+0x44>
 80055b2:	2c00      	cmp	r4, #0
 80055b4:	da59      	bge.n	800566a <floor+0xea>
 80055b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80055ba:	ea57 0503 	orrs.w	r5, r7, r3
 80055be:	d001      	beq.n	80055c4 <floor+0x44>
 80055c0:	2500      	movs	r5, #0
 80055c2:	4c2d      	ldr	r4, [pc, #180]	; (8005678 <floor+0xf8>)
 80055c4:	4623      	mov	r3, r4
 80055c6:	462f      	mov	r7, r5
 80055c8:	e025      	b.n	8005616 <floor+0x96>
 80055ca:	4a2c      	ldr	r2, [pc, #176]	; (800567c <floor+0xfc>)
 80055cc:	fa42 f806 	asr.w	r8, r2, r6
 80055d0:	ea01 0208 	and.w	r2, r1, r8
 80055d4:	4302      	orrs	r2, r0
 80055d6:	d01e      	beq.n	8005616 <floor+0x96>
 80055d8:	a325      	add	r3, pc, #148	; (adr r3, 8005670 <floor+0xf0>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fa fdbd 	bl	800015c <__adddf3>
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f7fb f9ff 	bl	80009e8 <__aeabi_dcmpgt>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d0ea      	beq.n	80055c4 <floor+0x44>
 80055ee:	2c00      	cmp	r4, #0
 80055f0:	bfbe      	ittt	lt
 80055f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80055f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80055fa:	19a4      	addlt	r4, r4, r6
 80055fc:	2500      	movs	r5, #0
 80055fe:	ea24 0408 	bic.w	r4, r4, r8
 8005602:	e7df      	b.n	80055c4 <floor+0x44>
 8005604:	2e33      	cmp	r6, #51	; 0x33
 8005606:	dd0a      	ble.n	800561e <floor+0x9e>
 8005608:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800560c:	d103      	bne.n	8005616 <floor+0x96>
 800560e:	f7fa fda5 	bl	800015c <__adddf3>
 8005612:	4607      	mov	r7, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4638      	mov	r0, r7
 8005618:	4619      	mov	r1, r3
 800561a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005622:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005626:	fa22 f808 	lsr.w	r8, r2, r8
 800562a:	ea18 0f00 	tst.w	r8, r0
 800562e:	d0f2      	beq.n	8005616 <floor+0x96>
 8005630:	a30f      	add	r3, pc, #60	; (adr r3, 8005670 <floor+0xf0>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fd91 	bl	800015c <__adddf3>
 800563a:	2200      	movs	r2, #0
 800563c:	2300      	movs	r3, #0
 800563e:	f7fb f9d3 	bl	80009e8 <__aeabi_dcmpgt>
 8005642:	2800      	cmp	r0, #0
 8005644:	d0be      	beq.n	80055c4 <floor+0x44>
 8005646:	2c00      	cmp	r4, #0
 8005648:	da02      	bge.n	8005650 <floor+0xd0>
 800564a:	2e14      	cmp	r6, #20
 800564c:	d103      	bne.n	8005656 <floor+0xd6>
 800564e:	3401      	adds	r4, #1
 8005650:	ea25 0508 	bic.w	r5, r5, r8
 8005654:	e7b6      	b.n	80055c4 <floor+0x44>
 8005656:	2301      	movs	r3, #1
 8005658:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800565c:	fa03 f606 	lsl.w	r6, r3, r6
 8005660:	4435      	add	r5, r6
 8005662:	42bd      	cmp	r5, r7
 8005664:	bf38      	it	cc
 8005666:	18e4      	addcc	r4, r4, r3
 8005668:	e7f2      	b.n	8005650 <floor+0xd0>
 800566a:	2500      	movs	r5, #0
 800566c:	462c      	mov	r4, r5
 800566e:	e7a9      	b.n	80055c4 <floor+0x44>
 8005670:	8800759c 	.word	0x8800759c
 8005674:	7e37e43c 	.word	0x7e37e43c
 8005678:	bff00000 	.word	0xbff00000
 800567c:	000fffff 	.word	0x000fffff

08005680 <scalbn>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005686:	4604      	mov	r4, r0
 8005688:	460d      	mov	r5, r1
 800568a:	4617      	mov	r7, r2
 800568c:	460b      	mov	r3, r1
 800568e:	b996      	cbnz	r6, 80056b6 <scalbn+0x36>
 8005690:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005694:	4303      	orrs	r3, r0
 8005696:	d039      	beq.n	800570c <scalbn+0x8c>
 8005698:	4b35      	ldr	r3, [pc, #212]	; (8005770 <scalbn+0xf0>)
 800569a:	2200      	movs	r2, #0
 800569c:	f7fa ff14 	bl	80004c8 <__aeabi_dmul>
 80056a0:	4b34      	ldr	r3, [pc, #208]	; (8005774 <scalbn+0xf4>)
 80056a2:	4604      	mov	r4, r0
 80056a4:	429f      	cmp	r7, r3
 80056a6:	460d      	mov	r5, r1
 80056a8:	da0f      	bge.n	80056ca <scalbn+0x4a>
 80056aa:	a32d      	add	r3, pc, #180	; (adr r3, 8005760 <scalbn+0xe0>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa ff0a 	bl	80004c8 <__aeabi_dmul>
 80056b4:	e006      	b.n	80056c4 <scalbn+0x44>
 80056b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80056ba:	4296      	cmp	r6, r2
 80056bc:	d10a      	bne.n	80056d4 <scalbn+0x54>
 80056be:	4602      	mov	r2, r0
 80056c0:	f7fa fd4c 	bl	800015c <__adddf3>
 80056c4:	4604      	mov	r4, r0
 80056c6:	460d      	mov	r5, r1
 80056c8:	e020      	b.n	800570c <scalbn+0x8c>
 80056ca:	460b      	mov	r3, r1
 80056cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80056d0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80056d4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80056d8:	19b9      	adds	r1, r7, r6
 80056da:	4291      	cmp	r1, r2
 80056dc:	dd0e      	ble.n	80056fc <scalbn+0x7c>
 80056de:	a322      	add	r3, pc, #136	; (adr r3, 8005768 <scalbn+0xe8>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80056e8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80056ec:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80056f0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80056f4:	4820      	ldr	r0, [pc, #128]	; (8005778 <scalbn+0xf8>)
 80056f6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80056fa:	e7d9      	b.n	80056b0 <scalbn+0x30>
 80056fc:	2900      	cmp	r1, #0
 80056fe:	dd08      	ble.n	8005712 <scalbn+0x92>
 8005700:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005708:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005712:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005716:	da16      	bge.n	8005746 <scalbn+0xc6>
 8005718:	f24c 3350 	movw	r3, #50000	; 0xc350
 800571c:	429f      	cmp	r7, r3
 800571e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005722:	dd08      	ble.n	8005736 <scalbn+0xb6>
 8005724:	4c15      	ldr	r4, [pc, #84]	; (800577c <scalbn+0xfc>)
 8005726:	4814      	ldr	r0, [pc, #80]	; (8005778 <scalbn+0xf8>)
 8005728:	f363 74df 	bfi	r4, r3, #31, #1
 800572c:	a30e      	add	r3, pc, #56	; (adr r3, 8005768 <scalbn+0xe8>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	4621      	mov	r1, r4
 8005734:	e7bc      	b.n	80056b0 <scalbn+0x30>
 8005736:	4c12      	ldr	r4, [pc, #72]	; (8005780 <scalbn+0x100>)
 8005738:	4812      	ldr	r0, [pc, #72]	; (8005784 <scalbn+0x104>)
 800573a:	f363 74df 	bfi	r4, r3, #31, #1
 800573e:	a308      	add	r3, pc, #32	; (adr r3, 8005760 <scalbn+0xe0>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	e7f5      	b.n	8005732 <scalbn+0xb2>
 8005746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800574a:	3136      	adds	r1, #54	; 0x36
 800574c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005750:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	2200      	movs	r2, #0
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <scalbn+0x108>)
 800575c:	e7a8      	b.n	80056b0 <scalbn+0x30>
 800575e:	bf00      	nop
 8005760:	c2f8f359 	.word	0xc2f8f359
 8005764:	01a56e1f 	.word	0x01a56e1f
 8005768:	8800759c 	.word	0x8800759c
 800576c:	7e37e43c 	.word	0x7e37e43c
 8005770:	43500000 	.word	0x43500000
 8005774:	ffff3cb0 	.word	0xffff3cb0
 8005778:	8800759c 	.word	0x8800759c
 800577c:	7e37e43c 	.word	0x7e37e43c
 8005780:	01a56e1f 	.word	0x01a56e1f
 8005784:	c2f8f359 	.word	0xc2f8f359
 8005788:	3c900000 	.word	0x3c900000

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
