
prn_s2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080058d8  080058d8  000158d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad0  08005ad0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ad0  08005ad0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ad0  08005ad0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000001c  08005af4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08005af4  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b32d  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8b  00000000  00000000  0002b372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002cf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0002da18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017af6  00000000  00000000  0002e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfde  00000000  00000000  00045f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbf2  00000000  00000000  00051f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000deb1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  000deb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	080058bc 	.word	0x080058bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	080058bc 	.word	0x080058bc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__gesf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000af0:	e006      	b.n	8000b00 <__cmpsf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__lesf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpsf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpsf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b16:	d011      	beq.n	8000b3c <__cmpsf2+0x40>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b1e:	bf18      	it	ne
 8000b20:	ea90 0f01 	teqne	r0, r1
 8000b24:	bf58      	it	pl
 8000b26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b2a:	bf88      	it	hi
 8000b2c:	17c8      	asrhi	r0, r1, #31
 8000b2e:	bf38      	it	cc
 8000b30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b34:	bf18      	it	ne
 8000b36:	f040 0001 	orrne.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	d102      	bne.n	8000b48 <__cmpsf2+0x4c>
 8000b42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b46:	d105      	bne.n	8000b54 <__cmpsf2+0x58>
 8000b48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b4c:	d1e4      	bne.n	8000b18 <__cmpsf2+0x1c>
 8000b4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b52:	d0e1      	beq.n	8000b18 <__cmpsf2+0x1c>
 8000b54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_cfrcmple>:
 8000b5c:	4684      	mov	ip, r0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4661      	mov	r1, ip
 8000b62:	e7ff      	b.n	8000b64 <__aeabi_cfcmpeq>

08000b64 <__aeabi_cfcmpeq>:
 8000b64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b66:	f7ff ffc9 	bl	8000afc <__cmpsf2>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	bf48      	it	mi
 8000b6e:	f110 0f00 	cmnmi.w	r0, #0
 8000b72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b74 <__aeabi_fcmpeq>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff fff4 	bl	8000b64 <__aeabi_cfcmpeq>
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2001      	moveq	r0, #1
 8000b80:	2000      	movne	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_fcmplt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffea 	bl	8000b64 <__aeabi_cfcmpeq>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_fcmple>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffe0 	bl	8000b64 <__aeabi_cfcmpeq>
 8000ba4:	bf94      	ite	ls
 8000ba6:	2001      	movls	r0, #1
 8000ba8:	2000      	movhi	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fcmpge>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffd2 	bl	8000b5c <__aeabi_cfrcmple>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmpgt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffc8 	bl	8000b5c <__aeabi_cfrcmple>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 f8ed 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 fac7 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fdeb 	bl	80017c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bea:	f000 fc5f 	bl	80014ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bee:	f000 fcdd 	bl	80015ac <MX_TIM3_Init>
  MX_DMA_Init();
 8000bf2:	f000 fdc7 	bl	8001784 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bf6:	f000 fb19 	bl	800122c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000bfa:	f000 fd4d 	bl	8001698 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000bfe:	f000 fb9b 	bl	8001338 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Create SPWM Array (DO NOT CHANGE)

  for (int i=0; i<(sinDivision/2); i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	e054      	b.n	8000cb2 <main+0xda>
  {
	  temp = sin((i+0.5) * 2 * M_PI / sinDivision) * period;
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fbf3 	bl	80003f4 <__aeabi_i2d>
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	4bbf      	ldr	r3, [pc, #764]	; (8000f10 <main+0x338>)
 8000c14:	f7ff faa2 	bl	800015c <__adddf3>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	f7ff fa9a 	bl	800015c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	a3b3      	add	r3, pc, #716	; (adr r3, 8000f00 <main+0x328>)
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	f7ff fc47 	bl	80004c8 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4614      	mov	r4, r2
 8000c40:	461d      	mov	r5, r3
 8000c42:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fbd4 	bl	80003f4 <__aeabi_i2d>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4620      	mov	r0, r4
 8000c52:	4629      	mov	r1, r5
 8000c54:	f7ff fd62 	bl	800071c <__aeabi_ddiv>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f003 fe2a 	bl	80048b8 <sin>
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	4baa      	ldr	r3, [pc, #680]	; (8000f14 <main+0x33c>)
 8000c6a:	f7ff fc2d 	bl	80004c8 <__aeabi_dmul>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f7ff fee9 	bl	8000a4c <__aeabi_d2f>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4aa6      	ldr	r2, [pc, #664]	; (8000f18 <main+0x340>)
 8000c7e:	6013      	str	r3, [r2, #0]
	  lookUp[i] = (int)(temp+0.5);
 8000c80:	4ba5      	ldr	r3, [pc, #660]	; (8000f18 <main+0x340>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbc7 	bl	8000418 <__aeabi_f2d>
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4ba0      	ldr	r3, [pc, #640]	; (8000f10 <main+0x338>)
 8000c90:	f7ff fa64 	bl	800015c <__adddf3>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f7ff feae 	bl	80009fc <__aeabi_d2iz>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4a9d      	ldr	r2, [pc, #628]	; (8000f1c <main+0x344>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<(sinDivision/2); i++)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cb6:	0fda      	lsrs	r2, r3, #31
 8000cb8:	4413      	add	r3, r2
 8000cba:	105b      	asrs	r3, r3, #1
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	dba1      	blt.n	8000c08 <main+0x30>
  }

  htim2.Instance->CCR2 = 0;
 8000cc4:	4b96      	ldr	r3, [pc, #600]	; (8000f20 <main+0x348>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR3 = 0;
 8000ccc:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <main+0x348>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_Base_Start_IT(&htim2);
 8000cd4:	4892      	ldr	r0, [pc, #584]	; (8000f20 <main+0x348>)
 8000cd6:	f002 fe63 	bl	80039a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4890      	ldr	r0, [pc, #576]	; (8000f20 <main+0x348>)
 8000cde:	f002 ff09 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	488e      	ldr	r0, [pc, #568]	; (8000f20 <main+0x348>)
 8000ce6:	f002 ff05 	bl	8003af4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	488d      	ldr	r0, [pc, #564]	; (8000f24 <main+0x34c>)
 8000cee:	f002 ff01 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	488b      	ldr	r0, [pc, #556]	; (8000f24 <main+0x34c>)
 8000cf6:	f002 fefd 	bl	8003af4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4889      	ldr	r0, [pc, #548]	; (8000f24 <main+0x34c>)
 8000cfe:	f002 fef9 	bl	8003af4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	4888      	ldr	r0, [pc, #544]	; (8000f28 <main+0x350>)
 8000d06:	f002 fef5 	bl	8003af4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4887      	ldr	r0, [pc, #540]	; (8000f2c <main+0x354>)
 8000d0e:	f002 fef1 	bl	8003af4 <HAL_TIM_PWM_Start>

  // Set all PWM to Zero
  TIM1->CCR1 = nowTrafoSwitchingValue;
 8000d12:	4b87      	ldr	r3, [pc, #540]	; (8000f30 <main+0x358>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b87      	ldr	r3, [pc, #540]	; (8000f34 <main+0x35c>)
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = nowIsolatedBuckValue;
 8000d1a:	4b87      	ldr	r3, [pc, #540]	; (8000f38 <main+0x360>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b85      	ldr	r3, [pc, #532]	; (8000f34 <main+0x35c>)
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = maxTrafoSwitchingValue;
 8000d22:	4b86      	ldr	r3, [pc, #536]	; (8000f3c <main+0x364>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b83      	ldr	r3, [pc, #524]	; (8000f34 <main+0x35c>)
 8000d28:	63da      	str	r2, [r3, #60]	; 0x3c

  TIM3->CCR1 = nowBoostValue;
 8000d2a:	4b85      	ldr	r3, [pc, #532]	; (8000f40 <main+0x368>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b85      	ldr	r3, [pc, #532]	; (8000f44 <main+0x36c>)
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34

  TIM4->CCR1 = nowInputGateValue;
 8000d32:	4b85      	ldr	r3, [pc, #532]	; (8000f48 <main+0x370>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b85      	ldr	r3, [pc, #532]	; (8000f4c <main+0x374>)
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // increase led counter
	  ledCounter += 1;
 8000d3a:	4b85      	ldr	r3, [pc, #532]	; (8000f50 <main+0x378>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4a83      	ldr	r2, [pc, #524]	; (8000f50 <main+0x378>)
 8000d42:	6013      	str	r3, [r2, #0]

	  // Read Sensor
	  HAL_ADC_Start_DMA(&hadc1, adcReading, 6);
 8000d44:	2206      	movs	r2, #6
 8000d46:	4983      	ldr	r1, [pc, #524]	; (8000f54 <main+0x37c>)
 8000d48:	4883      	ldr	r0, [pc, #524]	; (8000f58 <main+0x380>)
 8000d4a:	f001 f995 	bl	8002078 <HAL_ADC_Start_DMA>

	  adcValue0 = adcReading[0];
 8000d4e:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <main+0x37c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <main+0x384>)
 8000d56:	601a      	str	r2, [r3, #0]
	  adcValue1 = adcReading[1];
 8000d58:	4b7e      	ldr	r3, [pc, #504]	; (8000f54 <main+0x37c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b80      	ldr	r3, [pc, #512]	; (8000f60 <main+0x388>)
 8000d60:	601a      	str	r2, [r3, #0]
	  adcValue2 = adcReading[2];
 8000d62:	4b7c      	ldr	r3, [pc, #496]	; (8000f54 <main+0x37c>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b7e      	ldr	r3, [pc, #504]	; (8000f64 <main+0x38c>)
 8000d6a:	601a      	str	r2, [r3, #0]
	  adcValue3 = adcReading[3];
 8000d6c:	4b79      	ldr	r3, [pc, #484]	; (8000f54 <main+0x37c>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b7d      	ldr	r3, [pc, #500]	; (8000f68 <main+0x390>)
 8000d74:	601a      	str	r2, [r3, #0]
	  adcValue4 = adcReading[4];
 8000d76:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <main+0x37c>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <main+0x394>)
 8000d7e:	601a      	str	r2, [r3, #0]
	  adcValue5 = adcReading[5];
 8000d80:	4b74      	ldr	r3, [pc, #464]	; (8000f54 <main+0x37c>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b7a      	ldr	r3, [pc, #488]	; (8000f70 <main+0x398>)
 8000d88:	601a      	str	r2, [r3, #0]

	  batteryVoltage = ((adcValue0 / 4096.0) * 3.3) * 21 ;
 8000d8a:	4b74      	ldr	r3, [pc, #464]	; (8000f5c <main+0x384>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb30 	bl	80003f4 <__aeabi_i2d>
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <main+0x39c>)
 8000d9a:	f7ff fcbf 	bl	800071c <__aeabi_ddiv>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	a358      	add	r3, pc, #352	; (adr r3, 8000f08 <main+0x330>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fb8c 	bl	80004c8 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	4b6e      	ldr	r3, [pc, #440]	; (8000f78 <main+0x3a0>)
 8000dbe:	f7ff fb83 	bl	80004c8 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fe3f 	bl	8000a4c <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	; (8000f7c <main+0x3a4>)
 8000dd2:	6013      	str	r3, [r2, #0]
	  inputVoltage = ((adcValue1 / 4096.0) * 3.3) * 21 ;
 8000dd4:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <main+0x388>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb0b 	bl	80003f4 <__aeabi_i2d>
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b64      	ldr	r3, [pc, #400]	; (8000f74 <main+0x39c>)
 8000de4:	f7ff fc9a 	bl	800071c <__aeabi_ddiv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	a345      	add	r3, pc, #276	; (adr r3, 8000f08 <main+0x330>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fb67 	bl	80004c8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <main+0x3a0>)
 8000e08:	f7ff fb5e 	bl	80004c8 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fe1a 	bl	8000a4c <__aeabi_d2f>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a59      	ldr	r2, [pc, #356]	; (8000f80 <main+0x3a8>)
 8000e1c:	6013      	str	r3, [r2, #0]
	  ctVoltage = ((adcValue3 / 4096.0) * 3.3) * 21 ;
 8000e1e:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <main+0x390>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fae6 	bl	80003f4 <__aeabi_i2d>
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <main+0x39c>)
 8000e2e:	f7ff fc75 	bl	800071c <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	a333      	add	r3, pc, #204	; (adr r3, 8000f08 <main+0x330>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fb42 	bl	80004c8 <__aeabi_dmul>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <main+0x3a0>)
 8000e52:	f7ff fb39 	bl	80004c8 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff fdf5 	bl	8000a4c <__aeabi_d2f>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a47      	ldr	r2, [pc, #284]	; (8000f84 <main+0x3ac>)
 8000e66:	6013      	str	r3, [r2, #0]

	  temperature1 = ((adcValue4 / 4096) * 3.3) * 100;
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <main+0x394>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da01      	bge.n	8000e74 <main+0x29c>
 8000e70:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e74:	131b      	asrs	r3, r3, #12
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fabc 	bl	80003f4 <__aeabi_i2d>
 8000e7c:	a322      	add	r3, pc, #136	; (adr r3, 8000f08 <main+0x330>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff fb21 	bl	80004c8 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <main+0x3b0>)
 8000e94:	f7ff fb18 	bl	80004c8 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fdd4 	bl	8000a4c <__aeabi_d2f>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <main+0x3b4>)
 8000ea8:	6013      	str	r3, [r2, #0]
	  temperature2 = ((adcValue5 / 4096) * 3.3) * 100;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <main+0x398>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da01      	bge.n	8000eb6 <main+0x2de>
 8000eb2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000eb6:	131b      	asrs	r3, r3, #12
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fa9b 	bl	80003f4 <__aeabi_i2d>
 8000ebe:	a312      	add	r3, pc, #72	; (adr r3, 8000f08 <main+0x330>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fb00 	bl	80004c8 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <main+0x3b0>)
 8000ed6:	f7ff faf7 	bl	80004c8 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fdb3 	bl	8000a4c <__aeabi_d2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <main+0x3b8>)
 8000eea:	6013      	str	r3, [r2, #0]
		  inverterMode = 0;
	  }
	  */

	  // Decide Mode to be used
	  inverterMode = 1;
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <main+0x3bc>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

	  // If Charging Mode is used
	  if (inverterMode == 0)
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <main+0x3bc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80a1 	bne.w	800103e <main+0x466>
 8000efc:	e04c      	b.n	8000f98 <main+0x3c0>
 8000efe:	bf00      	nop
 8000f00:	54442d18 	.word	0x54442d18
 8000f04:	400921fb 	.word	0x400921fb
 8000f08:	66666666 	.word	0x66666666
 8000f0c:	400a6666 	.word	0x400a6666
 8000f10:	3fe00000 	.word	0x3fe00000
 8000f14:	4082c000 	.word	0x4082c000
 8000f18:	200000dc 	.word	0x200000dc
 8000f1c:	200000e0 	.word	0x200000e0
 8000f20:	20000450 	.word	0x20000450
 8000f24:	20000400 	.word	0x20000400
 8000f28:	2000033c 	.word	0x2000033c
 8000f2c:	2000007c 	.word	0x2000007c
 8000f30:	20000048 	.word	0x20000048
 8000f34:	40012c00 	.word	0x40012c00
 8000f38:	2000003c 	.word	0x2000003c
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20000040 	.word	0x20000040
 8000f44:	40000400 	.word	0x40000400
 8000f48:	20000044 	.word	0x20000044
 8000f4c:	40000800 	.word	0x40000800
 8000f50:	20000064 	.word	0x20000064
 8000f54:	200000c4 	.word	0x200000c4
 8000f58:	20000384 	.word	0x20000384
 8000f5c:	2000004c 	.word	0x2000004c
 8000f60:	20000050 	.word	0x20000050
 8000f64:	20000054 	.word	0x20000054
 8000f68:	20000058 	.word	0x20000058
 8000f6c:	2000005c 	.word	0x2000005c
 8000f70:	20000060 	.word	0x20000060
 8000f74:	40b00000 	.word	0x40b00000
 8000f78:	40350000 	.word	0x40350000
 8000f7c:	2000044c 	.word	0x2000044c
 8000f80:	200003b8 	.word	0x200003b8
 8000f84:	200003b4 	.word	0x200003b4
 8000f88:	40590000 	.word	0x40590000
 8000f8c:	20000078 	.word	0x20000078
 8000f90:	20000498 	.word	0x20000498
 8000f94:	20000038 	.word	0x20000038
	  {
		  // Turn off inverter mode mosfet
		  HAL_GPIO_WritePin(GPIOB, FORWARD_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4861      	ldr	r0, [pc, #388]	; (8001124 <main+0x54c>)
 8000f9e:	f001 ffdf 	bl	8002f60 <HAL_GPIO_WritePin>

		  // Stop Input Voltage
		  nowInputGateValue = 0;
 8000fa2:	4b61      	ldr	r3, [pc, #388]	; (8001128 <main+0x550>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
		  TIM4->CCR1 = nowInputGateValue;
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <main+0x550>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b5f      	ldr	r3, [pc, #380]	; (800112c <main+0x554>)
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34

		  // Stop isolated buck converter
		  nowIsolatedBuckValue = 0;
 8000fb0:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <main+0x558>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		  TIM1->CCR2 = nowIsolatedBuckValue;
 8000fb6:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <main+0x558>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <main+0x55c>)
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38


		  // Run Boost Converter
		  nowBoostValue = maxBoostValue * 30.0 / 100.0;
 8000fbe:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <main+0x560>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa16 	bl	80003f4 <__aeabi_i2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b5b      	ldr	r3, [pc, #364]	; (800113c <main+0x564>)
 8000fce:	f7ff fa7b 	bl	80004c8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <main+0x568>)
 8000fe0:	f7ff fb9c 	bl	800071c <__aeabi_ddiv>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd06 	bl	80009fc <__aeabi_d2iz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a54      	ldr	r2, [pc, #336]	; (8001144 <main+0x56c>)
 8000ff4:	6013      	str	r3, [r2, #0]
		  TIM3->CCR1 = nowBoostValue;
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <main+0x56c>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <main+0x570>)
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34


		  // Activate charging mode mosfet
		  // if ctVoltage become zero
		  // to prevent short circuit
		  if (ctVoltage == 0)
 8000ffe:	4b53      	ldr	r3, [pc, #332]	; (800114c <main+0x574>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 0100 	mov.w	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fdb4 	bl	8000b74 <__aeabi_fcmpeq>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <main+0x44a>
		  {
			  HAL_GPIO_WritePin(GPIOB, REVERSE_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2108      	movs	r1, #8
 8001016:	4843      	ldr	r0, [pc, #268]	; (8001124 <main+0x54c>)
 8001018:	f001 ffa2 	bl	8002f60 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 ff2f 	bl	8001e80 <HAL_Delay>
		  }


		  if (ledCounter >= 5000)
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <main+0x578>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f241 3287 	movw	r2, #4999	; 0x1387
 800102a:	4293      	cmp	r3, r2
 800102c:	dd07      	ble.n	800103e <main+0x466>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800102e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001032:	4848      	ldr	r0, [pc, #288]	; (8001154 <main+0x57c>)
 8001034:	f001 ffac 	bl	8002f90 <HAL_GPIO_TogglePin>
			  ledCounter = 0;
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <main+0x578>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
		  }
	  }

	  // If Inverter Mode is used
	  if (inverterMode == 1)
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <main+0x580>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f47f ae79 	bne.w	8000d3a <main+0x162>
	  {
		  // Turn off charging mode mosfet
		  HAL_GPIO_WritePin(GPIOB, REVERSE_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2108      	movs	r1, #8
 800104c:	4835      	ldr	r0, [pc, #212]	; (8001124 <main+0x54c>)
 800104e:	f001 ff87 	bl	8002f60 <HAL_GPIO_WritePin>

		  // Stop Boost Converter
		  nowBoostValue = 0;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <main+0x56c>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
		  TIM3->CCR1 = nowBoostValue;
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <main+0x56c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <main+0x570>)
 800105e:	635a      	str	r2, [r3, #52]	; 0x34

		  // Run Isolated Buck Converter at 50% duty cycle
		  nowIsolatedBuckValue = maxIsolatedBuckValue / 2;
 8001060:	4b3e      	ldr	r3, [pc, #248]	; (800115c <main+0x584>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0fda      	lsrs	r2, r3, #31
 8001066:	4413      	add	r3, r2
 8001068:	105b      	asrs	r3, r3, #1
 800106a:	461a      	mov	r2, r3
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <main+0x558>)
 800106e:	601a      	str	r2, [r3, #0]
		  TIM1->CCR2 = nowIsolatedBuckValue;
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <main+0x558>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <main+0x55c>)
 8001076:	639a      	str	r2, [r3, #56]	; 0x38

		  // Run Switching for Trafo at 50% duty cycle
		  nowTrafoSwitchingValue = maxTrafoSwitchingValue / 2;
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <main+0x588>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0fda      	lsrs	r2, r3, #31
 800107e:	4413      	add	r3, r2
 8001080:	105b      	asrs	r3, r3, #1
 8001082:	461a      	mov	r2, r3
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <main+0x58c>)
 8001086:	601a      	str	r2, [r3, #0]
		  TIM1->CCR1 = nowTrafoSwitchingValue;
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <main+0x58c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <main+0x55c>)
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM1->CCR3 = nowTrafoSwitchingValue;
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <main+0x58c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <main+0x55c>)
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c

		  // Activate Forward Mosfet
		  HAL_GPIO_WritePin(GPIOB, FORWARD_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2110      	movs	r1, #16
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <main+0x54c>)
 800109e:	f001 ff5f 	bl	8002f60 <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(GPIOB, FORWARD_Pin, GPIO_PIN_RESET);

		  // Conditioning input voltage
		  // set to x Volt
		  if(batteryVoltage < 10)
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <main+0x590>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4931      	ldr	r1, [pc, #196]	; (800116c <main+0x594>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd6d 	bl	8000b88 <__aeabi_fcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <main+0x4e6>
		  {
			  nowInputGateValue = nowInputGateValue+1;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <main+0x550>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <main+0x550>)
 80010bc:	6013      	str	r3, [r2, #0]
		  }
		  if(batteryVoltage > 10)
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <main+0x590>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	492a      	ldr	r1, [pc, #168]	; (800116c <main+0x594>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fd7d 	bl	8000bc4 <__aeabi_fcmpgt>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <main+0x502>
		  {
			  nowInputGateValue = nowInputGateValue-1;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <main+0x550>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <main+0x550>)
 80010d8:	6013      	str	r3, [r2, #0]
		  }
		  if(batteryVoltage == 10)
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <main+0x590>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4923      	ldr	r1, [pc, #140]	; (800116c <main+0x594>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fd47 	bl	8000b74 <__aeabi_fcmpeq>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <main+0x51c>
		  {
			  nowInputGateValue = nowInputGateValue;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <main+0x550>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <main+0x550>)
 80010f2:	6013      	str	r3, [r2, #0]
		  }
		  //TIM4->CCR1 = nowInputGateValue;
		  TIM4->CCR1 = maxInputGateValue/2;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <main+0x598>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0fda      	lsrs	r2, r3, #31
 80010fa:	4413      	add	r3, r2
 80010fc:	105b      	asrs	r3, r3, #1
 80010fe:	461a      	mov	r2, r3
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <main+0x554>)
 8001102:	635a      	str	r2, [r3, #52]	; 0x34

		  if (ledCounter >= 20000)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <main+0x578>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800110c:	4293      	cmp	r3, r2
 800110e:	f77f ae14 	ble.w	8000d3a <main+0x162>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <main+0x57c>)
 8001118:	f001 ff3a 	bl	8002f90 <HAL_GPIO_TogglePin>
			  ledCounter = 0;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <main+0x578>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	  ledCounter += 1;
 8001122:	e60a      	b.n	8000d3a <main+0x162>
 8001124:	40010c00 	.word	0x40010c00
 8001128:	20000044 	.word	0x20000044
 800112c:	40000800 	.word	0x40000800
 8001130:	2000003c 	.word	0x2000003c
 8001134:	40012c00 	.word	0x40012c00
 8001138:	20000004 	.word	0x20000004
 800113c:	403e0000 	.word	0x403e0000
 8001140:	40590000 	.word	0x40590000
 8001144:	20000040 	.word	0x20000040
 8001148:	40000400 	.word	0x40000400
 800114c:	200003b4 	.word	0x200003b4
 8001150:	20000064 	.word	0x20000064
 8001154:	40011000 	.word	0x40011000
 8001158:	20000038 	.word	0x20000038
 800115c:	20000000 	.word	0x20000000
 8001160:	2000000c 	.word	0x2000000c
 8001164:	20000048 	.word	0x20000048
 8001168:	2000044c 	.word	0x2000044c
 800116c:	41200000 	.word	0x41200000
 8001170:	20000008 	.word	0x20000008

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2228      	movs	r2, #40	; 0x28
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fb90 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fefa 	bl	8002fc4 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011d6:	f000 fbdd 	bl	8001994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 f964 	bl	80034c4 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001202:	f000 fbc7 	bl	8001994 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001206:	2302      	movs	r3, #2
 8001208:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800120a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fabe 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800121e:	f000 fbb9 	bl	8001994 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	; 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800123c:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <MX_ADC1_Init+0x104>)
 800123e:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <MX_ADC1_Init+0x108>)
 8001240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <MX_ADC1_Init+0x104>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124a:	4b39      	ldr	r3, [pc, #228]	; (8001330 <MX_ADC1_Init+0x104>)
 800124c:	2200      	movs	r2, #0
 800124e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <MX_ADC1_Init+0x104>)
 8001252:	2200      	movs	r2, #0
 8001254:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <MX_ADC1_Init+0x104>)
 8001258:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <MX_ADC1_Init+0x104>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MX_ADC1_Init+0x104>)
 8001266:	2206      	movs	r2, #6
 8001268:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126a:	4831      	ldr	r0, [pc, #196]	; (8001330 <MX_ADC1_Init+0x104>)
 800126c:	f000 fe2c 	bl	8001ec8 <HAL_ADC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 fb8d 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127e:	2301      	movs	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001282:	2307      	movs	r3, #7
 8001284:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <MX_ADC1_Init+0x104>)
 800128c:	f000 ffee 	bl	800226c <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 fb7d 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800129a:	2303      	movs	r3, #3
 800129c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800129e:	2302      	movs	r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4822      	ldr	r0, [pc, #136]	; (8001330 <MX_ADC1_Init+0x104>)
 80012a8:	f000 ffe0 	bl	800226c <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012b2:	f000 fb6f 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012ba:	2303      	movs	r3, #3
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	481b      	ldr	r0, [pc, #108]	; (8001330 <MX_ADC1_Init+0x104>)
 80012c4:	f000 ffd2 	bl	800226c <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012ce:	f000 fb61 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012d2:	2305      	movs	r3, #5
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_ADC1_Init+0x104>)
 80012e0:	f000 ffc4 	bl	800226c <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012ea:	f000 fb53 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012ee:	2308      	movs	r3, #8
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012f2:	2305      	movs	r3, #5
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_ADC1_Init+0x104>)
 80012fc:	f000 ffb6 	bl	800226c <HAL_ADC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001306:	f000 fb45 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800130a:	2309      	movs	r3, #9
 800130c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800130e:	2306      	movs	r3, #6
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_ADC1_Init+0x104>)
 8001318:	f000 ffa8 	bl	800226c <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001322:	f000 fb37 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000384 	.word	0x20000384
 8001334:	40012400 	.word	0x40012400

08001338 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2220      	movs	r2, #32
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fa99 	bl	80048a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001376:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <MX_TIM1_Init+0x170>)
 800137a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <MX_TIM1_Init+0x16c>)
 800137e:	2209      	movs	r2, #9
 8001380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 144;
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <MX_TIM1_Init+0x16c>)
 800138a:	2290      	movs	r2, #144	; 0x90
 800138c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <MX_TIM1_Init+0x16c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a0:	4840      	ldr	r0, [pc, #256]	; (80014a4 <MX_TIM1_Init+0x16c>)
 80013a2:	f002 faad 	bl	8003900 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013ac:	f000 faf2 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ba:	4619      	mov	r1, r3
 80013bc:	4839      	ldr	r0, [pc, #228]	; (80014a4 <MX_TIM1_Init+0x16c>)
 80013be:	f002 fe01 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013c8:	f000 fae4 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013cc:	4835      	ldr	r0, [pc, #212]	; (80014a4 <MX_TIM1_Init+0x16c>)
 80013ce:	f002 fb39 	bl	8003a44 <HAL_TIM_PWM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013d8:	f000 fadc 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	4619      	mov	r1, r3
 80013ea:	482e      	ldr	r0, [pc, #184]	; (80014a4 <MX_TIM1_Init+0x16c>)
 80013ec:	f003 f976 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013f6:	f000 facd 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001402:	2302      	movs	r3, #2
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	2200      	movs	r2, #0
 800141c:	4619      	mov	r1, r3
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001420:	f002 fd12 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800142a:	f000 fab3 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	2204      	movs	r2, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001438:	f002 fd06 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001442:	f000 faa7 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	2208      	movs	r2, #8
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001454:	f002 fcf8 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800145e:	f000 fa99 	bl	8001994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001486:	f003 f987 	bl	8004798 <HAL_TIMEx_ConfigBreakDeadTime>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001490:	f000 fa80 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM1_Init+0x16c>)
 8001496:	f000 fb95 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3758      	adds	r7, #88	; 0x58
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000400 	.word	0x20000400
 80014a8:	40012c00 	.word	0x40012c00

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM2_Init+0xfc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001504:	4828      	ldr	r0, [pc, #160]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001506:	f002 f9fb 	bl	8003900 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001510:	f000 fa40 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151e:	4619      	mov	r1, r3
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001522:	f002 fd4f 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800152c:	f000 fa32 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001530:	481d      	ldr	r0, [pc, #116]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001532:	f002 fa87 	bl	8003a44 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800153c:	f000 fa2a 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4619      	mov	r1, r3
 800154e:	4816      	ldr	r0, [pc, #88]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001550:	f003 f8c4 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800155a:	f000 fa1b 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	; 0x60
 8001560:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001566:	2302      	movs	r3, #2
 8001568:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2204      	movs	r2, #4
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM2_Init+0xfc>)
 8001576:	f002 fc67 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001580:	f000 fa08 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2208      	movs	r2, #8
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM2_Init+0xfc>)
 800158c:	f002 fc5c 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001596:	f000 f9fd 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM2_Init+0xfc>)
 800159c:	f000 fb12 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3738      	adds	r7, #56	; 0x38
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000450 	.word	0x20000450

080015ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_TIM3_Init+0xe4>)
 80015de:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <MX_TIM3_Init+0xe8>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_TIM3_Init+0xe4>)
 80015e4:	2209      	movs	r2, #9
 80015e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_TIM3_Init+0xe4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 288;
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_TIM3_Init+0xe4>)
 80015f0:	f44f 7290 	mov.w	r2, #288	; 0x120
 80015f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_TIM3_Init+0xe4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_TIM3_Init+0xe4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001602:	4823      	ldr	r0, [pc, #140]	; (8001690 <MX_TIM3_Init+0xe4>)
 8001604:	f002 f97c 	bl	8003900 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800160e:	f000 f9c1 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161c:	4619      	mov	r1, r3
 800161e:	481c      	ldr	r0, [pc, #112]	; (8001690 <MX_TIM3_Init+0xe4>)
 8001620:	f002 fcd0 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800162a:	f000 f9b3 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800162e:	4818      	ldr	r0, [pc, #96]	; (8001690 <MX_TIM3_Init+0xe4>)
 8001630:	f002 fa08 	bl	8003a44 <HAL_TIM_PWM_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800163a:	f000 f9ab 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <MX_TIM3_Init+0xe4>)
 800164e:	f003 f845 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001658:	f000 f99c 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165c:	2360      	movs	r3, #96	; 0x60
 800165e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001664:	2302      	movs	r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <MX_TIM3_Init+0xe4>)
 8001674:	f002 fbe8 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800167e:	f000 f989 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <MX_TIM3_Init+0xe4>)
 8001684:	f000 fa9e 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 8001688:	bf00      	nop
 800168a:	3738      	adds	r7, #56	; 0x38
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000033c 	.word	0x2000033c
 8001694:	40000400 	.word	0x40000400

08001698 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	; 0x38
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <MX_TIM4_Init+0xe4>)
 80016ca:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <MX_TIM4_Init+0xe8>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <MX_TIM4_Init+0xe4>)
 80016d0:	2247      	movs	r2, #71	; 0x47
 80016d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <MX_TIM4_Init+0xe4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <MX_TIM4_Init+0xe4>)
 80016dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <MX_TIM4_Init+0xe4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <MX_TIM4_Init+0xe4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ee:	4823      	ldr	r0, [pc, #140]	; (800177c <MX_TIM4_Init+0xe4>)
 80016f0:	f002 f906 	bl	8003900 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016fa:	f000 f94b 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001708:	4619      	mov	r1, r3
 800170a:	481c      	ldr	r0, [pc, #112]	; (800177c <MX_TIM4_Init+0xe4>)
 800170c:	f002 fc5a 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001716:	f000 f93d 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <MX_TIM4_Init+0xe4>)
 800171c:	f002 f992 	bl	8003a44 <HAL_TIM_PWM_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001726:	f000 f935 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	4619      	mov	r1, r3
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <MX_TIM4_Init+0xe4>)
 800173a:	f002 ffcf 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001744:	f000 f926 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	; 0x60
 800174a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001750:	2302      	movs	r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <MX_TIM4_Init+0xe4>)
 8001760:	f002 fb72 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800176a:	f000 f913 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <MX_TIM4_Init+0xe4>)
 8001770:	f000 fa28 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3738      	adds	r7, #56	; 0x38
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000007c 	.word	0x2000007c
 8001780:	40000800 	.word	0x40000800

08001784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_DMA_Init+0x38>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <MX_DMA_Init+0x38>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6153      	str	r3, [r2, #20]
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_DMA_Init+0x38>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	200b      	movs	r0, #11
 80017a8:	f001 f831 	bl	800280e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017ac:	200b      	movs	r0, #11
 80017ae:	f001 f84a 	bl	8002846 <HAL_NVIC_EnableIRQ>

}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MX_GPIO_Init+0xcc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a2c      	ldr	r2, [pc, #176]	; (800188c <MX_GPIO_Init+0xcc>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_GPIO_Init+0xcc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <MX_GPIO_Init+0xcc>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <MX_GPIO_Init+0xcc>)
 80017f2:	f043 0320 	orr.w	r3, r3, #32
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <MX_GPIO_Init+0xcc>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_GPIO_Init+0xcc>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <MX_GPIO_Init+0xcc>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <MX_GPIO_Init+0xcc>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_GPIO_Init+0xcc>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <MX_GPIO_Init+0xcc>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_GPIO_Init+0xcc>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183a:	4815      	ldr	r0, [pc, #84]	; (8001890 <MX_GPIO_Init+0xd0>)
 800183c:	f001 fb90 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REVERSE_Pin|FORWARD_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2118      	movs	r1, #24
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <MX_GPIO_Init+0xd4>)
 8001846:	f001 fb8b 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800184a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2302      	movs	r3, #2
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4619      	mov	r1, r3
 8001862:	480b      	ldr	r0, [pc, #44]	; (8001890 <MX_GPIO_Init+0xd0>)
 8001864:	f001 f9f8 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : REVERSE_Pin FORWARD_Pin */
  GPIO_InitStruct.Pin = REVERSE_Pin|FORWARD_Pin;
 8001868:	2318      	movs	r3, #24
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2302      	movs	r3, #2
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_GPIO_Init+0xd4>)
 8001880:	f001 f9ea 	bl	8002c58 <HAL_GPIO_Init>

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40011000 	.word	0x40011000
 8001894:	40010c00 	.word	0x40010c00

08001898 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	static int num=0;
	static int delay1=0;
	static int toggling=0;
	static int delay2=0;

	if(delay1 == 1)
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10f      	bne.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		delay2++;
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a34      	ldr	r2, [pc, #208]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018b0:	6013      	str	r3, [r2, #0]
		if(delay2>=5)
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	dd2d      	ble.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
			delay2=0;
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
			delay1=0;
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e026      	b.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x7e>
		}
	}
	else if(num>= sinDivision/2)
 80018c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80018cc:	0fda      	lsrs	r2, r3, #31
 80018ce:	4413      	add	r3, r2
 80018d0:	105b      	asrs	r3, r3, #1
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dc1c      	bgt.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		num = 0;
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
		delay1++;
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018ea:	6013      	str	r3, [r2, #0]
		htim2.Instance->CCR2 = 0;
 80018ec:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 0;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
		if(toggling == 0)
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			toggling++;
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e002      	b.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x7e>
		}
		else
		{
			toggling = 0;
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
		}
	}
	if(toggling == 0 && delay1 !=1)
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d110      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d00c      	beq.n	8001940 <HAL_TIM_PeriodElapsedCallback+0xa8>
	{
		htim2.Instance->CCR2 = lookUp[num];
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4918      	ldr	r1, [pc, #96]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001930:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 0;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	63da      	str	r2, [r3, #60]	; 0x3c
 800193e:	e013      	b.n	8001968 <HAL_TIM_PeriodElapsedCallback+0xd0>
	}
	else if(toggling == 1 && delay1 !=1)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10f      	bne.n	8001968 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d00b      	beq.n	8001968 <HAL_TIM_PeriodElapsedCallback+0xd0>
	{
		htim2.Instance->CCR2 = 0;
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2200      	movs	r2, #0
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = lookUp[num];
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	490b      	ldr	r1, [pc, #44]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001962:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	num++;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000068 	.word	0x20000068
 8001980:	2000006c 	.word	0x2000006c
 8001984:	20000070 	.word	0x20000070
 8001988:	20000450 	.word	0x20000450
 800198c:	20000074 	.word	0x20000074
 8001990:	200000e0 	.word	0x200000e0

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	e7fe      	b.n	800199c <Error_Handler+0x8>
	...

080019a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_MspInit+0x5c>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a14      	ldr	r2, [pc, #80]	; (80019fc <HAL_MspInit+0x5c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_MspInit+0x5c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_MspInit+0x5c>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_MspInit+0x5c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_MspInit+0x5c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_MspInit+0x60>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_MspInit+0x60>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000

08001a04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a33      	ldr	r2, [pc, #204]	; (8001aec <HAL_ADC_MspInit+0xe8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d15f      	bne.n	8001ae4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a2b      	ldr	r2, [pc, #172]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_ADC_MspInit+0xec>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a6c:	2339      	movs	r3, #57	; 0x39
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a70:	2303      	movs	r3, #3
 8001a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	481e      	ldr	r0, [pc, #120]	; (8001af4 <HAL_ADC_MspInit+0xf0>)
 8001a7c:	f001 f8ec 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a80:	2303      	movs	r3, #3
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	481a      	ldr	r0, [pc, #104]	; (8001af8 <HAL_ADC_MspInit+0xf4>)
 8001a90:	f001 f8e2 	bl	8002c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_ADC_MspInit+0xfc>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001abe:	2220      	movs	r2, #32
 8001ac0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001aca:	f000 fed7 	bl	800287c <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001ad4:	f7ff ff5e 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001adc:	621a      	str	r2, [r3, #32]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_ADC_MspInit+0xf8>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012400 	.word	0x40012400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	200003bc 	.word	0x200003bc
 8001b00:	40020008 	.word	0x40020008

08001b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_TIM_Base_MspInit+0xb0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10c      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b2e:	e03c      	b.n	8001baa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d114      	bne.n	8001b64 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	201c      	movs	r0, #28
 8001b58:	f000 fe59 	bl	800280e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b5c:	201c      	movs	r0, #28
 8001b5e:	f000 fe72 	bl	8002846 <HAL_NVIC_EnableIRQ>
}
 8001b62:	e022      	b.n	8001baa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <HAL_TIM_Base_MspInit+0xb8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10c      	bne.n	8001b88 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	e010      	b.n	8001baa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_TIM_Base_MspInit+0xbc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10b      	bne.n	8001baa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_TIM_Base_MspInit+0xb4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40000400 	.word	0x40000400
 8001bc0:	40000800 	.word	0x40000800

08001bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0318 	add.w	r3, r7, #24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3d      	ldr	r2, [pc, #244]	; (8001cd4 <HAL_TIM_MspPostInit+0x110>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d119      	bne.n	8001c18 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bfc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2302      	movs	r3, #2
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4832      	ldr	r0, [pc, #200]	; (8001cdc <HAL_TIM_MspPostInit+0x118>)
 8001c12:	f001 f821 	bl	8002c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c16:	e058      	b.n	8001cca <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c20:	d118      	bne.n	8001c54 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	6193      	str	r3, [r2, #24]
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2302      	movs	r3, #2
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4823      	ldr	r0, [pc, #140]	; (8001cdc <HAL_TIM_MspPostInit+0x118>)
 8001c4e:	f001 f803 	bl	8002c58 <HAL_GPIO_Init>
}
 8001c52:	e03a      	b.n	8001cca <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_TIM_MspPostInit+0x11c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d118      	bne.n	8001c90 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c76:	2340      	movs	r3, #64	; 0x40
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4814      	ldr	r0, [pc, #80]	; (8001cdc <HAL_TIM_MspPostInit+0x118>)
 8001c8a:	f000 ffe5 	bl	8002c58 <HAL_GPIO_Init>
}
 8001c8e:	e01c      	b.n	8001cca <HAL_TIM_MspPostInit+0x106>
  else if(htim->Instance==TIM4)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <HAL_TIM_MspPostInit+0x120>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d117      	bne.n	8001cca <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_TIM_MspPostInit+0x114>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <HAL_TIM_MspPostInit+0x124>)
 8001cc6:	f000 ffc7 	bl	8002c58 <HAL_GPIO_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40010c00 	.word	0x40010c00

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f000 f889 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Channel1_IRQHandler+0x10>)
 8001d42:	f000 fe55 	bl	80029f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003bc 	.word	0x200003bc

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f001 ff6f 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000450 	.word	0x20000450

08001d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	; (8001da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	; (8001db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d96:	f7ff ffe5 	bl	8001d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f002 fd61 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7fe ff1b 	bl	8000bd8 <main>
  bx lr
 8001da2:	4770      	bx	lr
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001dac:	08005ad8 	.word	0x08005ad8
  ldr r2, =_sbss
 8001db0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001db4:	200004a0 	.word	0x200004a0

08001db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC1_2_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_Init+0x28>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_Init+0x28>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 fd13 	bl	80027f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff fde2 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fd2b 	bl	8002862 <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e24:	f000 fcf3 	bl	800280e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000010 	.word	0x20000010
 8001e40:	20000018 	.word	0x20000018
 8001e44:	20000014 	.word	0x20000014

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x20>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_IncTick+0x20>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000018 	.word	0x20000018
 8001e68:	2000049c 	.word	0x2000049c

08001e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_GetTick+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	2000049c 	.word	0x2000049c

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffe0 	bl	8001e6c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000018 	.word	0x20000018

08001ec8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0be      	b.n	8002068 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fd7c 	bl	8001a04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 faff 	bl	8002510 <ADC_ConversionStop_Disable>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 8099 	bne.w	8002056 <HAL_ADC_Init+0x18e>
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8095 	bne.w	8002056 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f34:	f023 0302 	bic.w	r3, r3, #2
 8001f38:	f043 0202 	orr.w	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7b1b      	ldrb	r3, [r3, #12]
 8001f4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_Init+0xa2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d102      	bne.n	8001f70 <HAL_ADC_Init+0xa8>
 8001f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6e:	e000      	b.n	8001f72 <HAL_ADC_Init+0xaa>
 8001f70:	2300      	movs	r3, #0
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7d1b      	ldrb	r3, [r3, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d119      	bne.n	8001fb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7b1b      	ldrb	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	035a      	lsls	r2, r3, #13
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_ADC_Init+0x1a8>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe4:	d003      	beq.n	8001fee <HAL_ADC_Init+0x126>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	430a      	orrs	r2, r1
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_ADC_Init+0x1ac>)
 8002014:	4013      	ands	r3, r2
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	d10b      	bne.n	8002034 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002032:	e018      	b.n	8002066 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f023 0312 	bic.w	r3, r3, #18
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002054:	e007      	b.n	8002066 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f043 0210 	orr.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	ffe1f7fd 	.word	0xffe1f7fd
 8002074:	ff1f0efe 	.word	0xff1f0efe

08002078 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a64      	ldr	r2, [pc, #400]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d004      	beq.n	800209c <HAL_ADC_Start_DMA+0x24>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a63      	ldr	r2, [pc, #396]	; (8002224 <HAL_ADC_Start_DMA+0x1ac>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d106      	bne.n	80020aa <HAL_ADC_Start_DMA+0x32>
 800209c:	4b60      	ldr	r3, [pc, #384]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 80b3 	bne.w	8002210 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_Start_DMA+0x40>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0ae      	b.n	8002216 <HAL_ADC_Start_DMA+0x19e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f9cb 	bl	800245c <ADC_Enable>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 809a 	bne.w	8002206 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_ADC_Start_DMA+0x1ac>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_Start_DMA+0x84>
 80020f0:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d026      	beq.n	8002164 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800211e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002126:	e01d      	b.n	8002164 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a39      	ldr	r2, [pc, #228]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_ADC_Start_DMA+0xd0>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a38      	ldr	r2, [pc, #224]	; (8002224 <HAL_ADC_Start_DMA+0x1ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d10d      	bne.n	8002164 <HAL_ADC_Start_DMA+0xec>
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_ADC_Start_DMA+0x1a8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f023 0206 	bic.w	r2, r3, #6
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
 800217c:	e002      	b.n	8002184 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_ADC_Start_DMA+0x1b0>)
 8002192:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_ADC_Start_DMA+0x1b4>)
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <HAL_ADC_Start_DMA+0x1b8>)
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0202 	mvn.w	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a18      	ldr	r0, [r3, #32]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	334c      	adds	r3, #76	; 0x4c
 80021c8:	4619      	mov	r1, r3
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f000 fbaf 	bl	8002930 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021e0:	d108      	bne.n	80021f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80021f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80021f2:	e00f      	b.n	8002214 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002202:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002204:	e006      	b.n	8002214 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800220e:	e001      	b.n	8002214 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002214:	7dfb      	ldrb	r3, [r7, #23]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012400 	.word	0x40012400
 8002224:	40012800 	.word	0x40012800
 8002228:	08002593 	.word	0x08002593
 800222c:	0800260f 	.word	0x0800260f
 8002230:	0800262b 	.word	0x0800262b

08002234 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
	...

0800226c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x20>
 8002288:	2302      	movs	r3, #2
 800228a:	e0dc      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1da>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d81c      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b05      	subs	r3, #5
 80022ae:	221f      	movs	r2, #31
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4019      	ands	r1, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b05      	subs	r3, #5
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	635a      	str	r2, [r3, #52]	; 0x34
 80022d4:	e03c      	b.n	8002350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d81c      	bhi.n	8002318 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b23      	subs	r3, #35	; 0x23
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4019      	ands	r1, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	3b23      	subs	r3, #35	; 0x23
 800230a:	fa00 f203 	lsl.w	r2, r0, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
 8002316:	e01b      	b.n	8002350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b41      	subs	r3, #65	; 0x41
 800232a:	221f      	movs	r2, #31
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	; 0x41
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b09      	cmp	r3, #9
 8002356:	d91c      	bls.n	8002392 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	3b1e      	subs	r3, #30
 800236a:	2207      	movs	r2, #7
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	e019      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	2207      	movs	r2, #7
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4019      	ands	r1, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6898      	ldr	r0, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	fa00 f203 	lsl.w	r2, r0, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d003      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d2:	2b11      	cmp	r3, #17
 80023d4:	d132      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_ADC_ConfigChannel+0x1e4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d125      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d126      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d11a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_ADC_ConfigChannel+0x1e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <HAL_ADC_ConfigChannel+0x1ec>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9a      	lsrs	r2, r3, #18
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800241c:	e002      	b.n	8002424 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_ConfigChannel+0x1b2>
 800242a:	e007      	b.n	800243c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40012400 	.word	0x40012400
 8002454:	20000010 	.word	0x20000010
 8002458:	431bde83 	.word	0x431bde83

0800245c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d040      	beq.n	80024fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <ADC_Enable+0xac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <ADC_Enable+0xb0>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002498:	e002      	b.n	80024a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024a6:	f7ff fce1 	bl	8001e6c <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	e01f      	b.n	80024ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ae:	f7ff fcdd 	bl	8001e6c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d918      	bls.n	80024ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d011      	beq.n	80024ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e007      	b.n	80024fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d1d8      	bne.n	80024ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000010 	.word	0x20000010
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12e      	bne.n	8002588 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800253a:	f7ff fc97 	bl	8001e6c <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002540:	e01b      	b.n	800257a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002542:	f7ff fc93 	bl	8001e6c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d914      	bls.n	800257a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10d      	bne.n	800257a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d0dc      	beq.n	8002542 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d127      	bne.n	80025fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025c6:	d115      	bne.n	80025f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fe1d 	bl	8002234 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025fa:	e004      	b.n	8002606 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff fe12 	bl	8002246 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff fe01 	bl	8002258 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <__NVIC_EnableIRQ+0x34>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c4:	d301      	bcc.n	80027ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00f      	b.n	80027ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <SysTick_Config+0x40>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d2:	210f      	movs	r1, #15
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d8:	f7ff ff90 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SysTick_Config+0x40>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <SysTick_Config+0x40>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	e000e010 	.word	0xe000e010

080027f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff2d 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff42 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff90 	bl	8002750 <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5f 	bl	80026fc <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff35 	bl	80026c4 <__NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffa2 	bl	80027b4 <SysTick_Config>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e043      	b.n	800291a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_DMA_Init+0xa8>)
 800289a:	4413      	add	r3, r2
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_DMA_Init+0xac>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_DMA_Init+0xb0>)
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	bffdfff8 	.word	0xbffdfff8
 8002928:	cccccccd 	.word	0xcccccccd
 800292c:	40020000 	.word	0x40020000

08002930 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Start_IT+0x20>
 800294c:	2302      	movs	r3, #2
 800294e:	e04a      	b.n	80029e6 <HAL_DMA_Start_IT+0xb6>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800295e:	2b01      	cmp	r3, #1
 8002960:	d13a      	bne.n	80029d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f938 	bl	8002bfc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 020e 	orr.w	r2, r2, #14
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e00f      	b.n	80029c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0204 	bic.w	r2, r2, #4
 80029b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 020a 	orr.w	r2, r2, #10
 80029c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e005      	b.n	80029e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d04f      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xc8>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d04a      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a66      	ldr	r2, [pc, #408]	; (8002be0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d029      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xae>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d022      	beq.n	8002a9a <HAL_DMA_IRQHandler+0xaa>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0xa4>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_DMA_IRQHandler+0x1fc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d012      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x9e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a60      	ldr	r2, [pc, #384]	; (8002bf0 <HAL_DMA_IRQHandler+0x200>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x98>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	; (8002bf4 <HAL_DMA_IRQHandler+0x204>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x92>
 8002a7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a80:	e00e      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a86:	e00b      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a8c:	e008      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a92:	e005      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a98:	e002      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	e000      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_DMA_IRQHandler+0x208>)
 8002aa2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8094 	beq.w	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ab6:	e08e      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2202      	movs	r2, #2
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d056      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x186>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d051      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 020a 	bic.w	r2, r2, #10
 8002aee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <HAL_DMA_IRQHandler+0x1f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d029      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x166>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <HAL_DMA_IRQHandler+0x1f4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x162>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01a      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x15c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a34      	ldr	r2, [pc, #208]	; (8002bec <HAL_DMA_IRQHandler+0x1fc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x156>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <HAL_DMA_IRQHandler+0x200>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x150>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <HAL_DMA_IRQHandler+0x204>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x14a>
 8002b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b38:	e00e      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	e00b      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b44:	e008      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4a:	e005      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	e002      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b52:	2320      	movs	r3, #32
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b56:	2302      	movs	r3, #2
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_DMA_IRQHandler+0x208>)
 8002b5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d034      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b74:	e02f      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d028      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1e8>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 020e 	bic.w	r2, r2, #14
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
    }
  }
  return;
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
}
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40020008 	.word	0x40020008
 8002be4:	4002001c 	.word	0x4002001c
 8002be8:	40020030 	.word	0x40020030
 8002bec:	40020044 	.word	0x40020044
 8002bf0:	40020058 	.word	0x40020058
 8002bf4:	4002006c 	.word	0x4002006c
 8002bf8:	40020000 	.word	0x40020000

08002bfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d108      	bne.n	8002c3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c3a:	e007      	b.n	8002c4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	e169      	b.n	8002f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8158 	bne.w	8002f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a9a      	ldr	r2, [pc, #616]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002c94:	4a98      	ldr	r2, [pc, #608]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d875      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002c9a:	4a98      	ldr	r2, [pc, #608]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a96      	ldr	r2, [pc, #600]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a96      	ldr	r2, [pc, #600]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d052      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cac:	4a94      	ldr	r2, [pc, #592]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d869      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a94      	ldr	r2, [pc, #592]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04c      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a92      	ldr	r2, [pc, #584]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d863      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a92      	ldr	r2, [pc, #584]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d046      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a90      	ldr	r2, [pc, #576]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d85d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d82a      	bhi.n	8002d24 <HAL_GPIO_Init+0xcc>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d859      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_GPIO_Init+0x80>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d3f 	.word	0x08002d3f
 8002ce4:	08002d81 	.word	0x08002d81
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d87 	.word	0x08002d87
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002d87 	.word	0x08002d87
 8002cf8:	08002d87 	.word	0x08002d87
 8002cfc:	08002d87 	.word	0x08002d87
 8002d00:	08002d87 	.word	0x08002d87
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d87 	.word	0x08002d87
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d87 	.word	0x08002d87
 8002d18:	08002d87 	.word	0x08002d87
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	4a79      	ldr	r2, [pc, #484]	; (8002f0c <HAL_GPIO_Init+0x2b4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2a:	e02c      	b.n	8002d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e029      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	e024      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3308      	adds	r3, #8
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e01f      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e01a      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e013      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	611a      	str	r2, [r3, #16]
          break;
 8002d72:	e009      	b.n	8002d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	615a      	str	r2, [r3, #20]
          break;
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          break;
 8002d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d801      	bhi.n	8002d92 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_Init+0x13e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d802      	bhi.n	8002da4 <HAL_GPIO_Init+0x14c>
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x152>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3b08      	subs	r3, #8
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	210f      	movs	r1, #15
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80b1 	beq.w	8002f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df0:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <HAL_GPIO_Init+0x2c0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_GPIO_Init+0x1ec>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_GPIO_Init+0x2c4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00d      	beq.n	8002e40 <HAL_GPIO_Init+0x1e8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <HAL_GPIO_Init+0x1e4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_GPIO_Init+0x1e0>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e004      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e44:	2300      	movs	r3, #0
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	f002 0203 	and.w	r2, r2, #3
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	4093      	lsls	r3, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e56:	492f      	ldr	r1, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	492c      	ldr	r1, [pc, #176]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4928      	ldr	r1, [pc, #160]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4922      	ldr	r1, [pc, #136]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	491e      	ldr	r1, [pc, #120]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4918      	ldr	r1, [pc, #96]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4914      	ldr	r1, [pc, #80]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d021      	beq.n	8002f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
 8002ef4:	e021      	b.n	8002f3a <HAL_GPIO_Init+0x2e2>
 8002ef6:	bf00      	nop
 8002ef8:	10320000 	.word	0x10320000
 8002efc:	10310000 	.word	0x10310000
 8002f00:	10220000 	.word	0x10220000
 8002f04:	10210000 	.word	0x10210000
 8002f08:	10120000 	.word	0x10120000
 8002f0c:	10110000 	.word	0x10110000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010800 	.word	0x40010800
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4909      	ldr	r1, [pc, #36]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f47f ae8e 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	372c      	adds	r7, #44	; 0x2c
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	43d9      	mvns	r1, r3
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	611a      	str	r2, [r3, #16]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e26c      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe4:	4b92      	ldr	r3, [pc, #584]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00c      	beq.n	800300a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4b89      	ldr	r3, [pc, #548]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x12c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d168      	bne.n	80030f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e246      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x76>
 800302c:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7f      	ldr	r2, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e02e      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x98>
 8003042:	4b7b      	ldr	r3, [pc, #492]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7a      	ldr	r2, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b78      	ldr	r3, [pc, #480]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a77      	ldr	r2, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xbc>
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a71      	ldr	r2, [pc, #452]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6a      	ldr	r2, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a67      	ldr	r2, [pc, #412]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fee4 	bl	8001e6c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fee0 	bl	8001e6c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1fa      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe4>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fed0 	bl	8001e6c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe fecc 	bl	8001e6c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1e6      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x10c>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1ba      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4939      	ldr	r1, [pc, #228]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe fe85 	bl	8001e6c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe fe81 	bl	8001e6c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e19b      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4927      	ldr	r1, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fe64 	bl	8001e6c <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe fe60 	bl	8001e6c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e17a      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03a      	beq.n	8003248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7fe fe44 	bl	8001e6c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fe fe40 	bl	8001e6c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e15a      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f000 faa6 	bl	8003758 <RCC_Delay>
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fe fe2a 	bl	8001e6c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321a:	e00f      	b.n	800323c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7fe fe26 	bl	8001e6c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d908      	bls.n	800323c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e140      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	42420000 	.word	0x42420000
 8003238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b9e      	ldr	r3, [pc, #632]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e9      	bne.n	800321c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a6 	beq.w	80033a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b97      	ldr	r3, [pc, #604]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b94      	ldr	r3, [pc, #592]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a93      	ldr	r2, [pc, #588]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	4b91      	ldr	r3, [pc, #580]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b8e      	ldr	r3, [pc, #568]	; (80034bc <HAL_RCC_OscConfig+0x4f8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b8b      	ldr	r3, [pc, #556]	; (80034bc <HAL_RCC_OscConfig+0x4f8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a8a      	ldr	r2, [pc, #552]	; (80034bc <HAL_RCC_OscConfig+0x4f8>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fe fde7 	bl	8001e6c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fe fde3 	bl	8001e6c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0fd      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b81      	ldr	r3, [pc, #516]	; (80034bc <HAL_RCC_OscConfig+0x4f8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x312>
 80032c8:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a7a      	ldr	r2, [pc, #488]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e02d      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x334>
 80032de:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a75      	ldr	r2, [pc, #468]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6213      	str	r3, [r2, #32]
 80032ea:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a72      	ldr	r2, [pc, #456]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	6213      	str	r3, [r2, #32]
 80032f6:	e01c      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d10c      	bne.n	800331a <HAL_RCC_OscConfig+0x356>
 8003300:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a6c      	ldr	r2, [pc, #432]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	f043 0304 	orr.w	r3, r3, #4
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4a69      	ldr	r2, [pc, #420]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6213      	str	r3, [r2, #32]
 8003318:	e00b      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 800331a:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a63      	ldr	r2, [pc, #396]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d015      	beq.n	8003366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fd97 	bl	8001e6c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fd93 	bl	8001e6c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0ab      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ee      	beq.n	8003342 <HAL_RCC_OscConfig+0x37e>
 8003364:	e014      	b.n	8003390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fe fd81 	bl	8001e6c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fd7d 	bl	8001e6c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e095      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ee      	bne.n	800336e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4a47      	ldr	r2, [pc, #284]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8081 	beq.w	80034ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ac:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d061      	beq.n	800347c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d146      	bne.n	800344e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <HAL_RCC_OscConfig+0x4fc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe fd51 	bl	8001e6c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fe fd4d 	bl	8001e6c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e067      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	492d      	ldr	r1, [pc, #180]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a19      	ldr	r1, [r3, #32]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	430b      	orrs	r3, r1
 800341a:	4927      	ldr	r1, [pc, #156]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x4fc>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fd21 	bl	8001e6c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fd1d 	bl	8001e6c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e037      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x46a>
 800344c:	e02f      	b.n	80034ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_RCC_OscConfig+0x4fc>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fd0a 	bl	8001e6c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fd06 	bl	8001e6c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e020      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x498>
 800347a:	e018      	b.n	80034ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e013      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	429a      	cmp	r2, r3
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40007000 	.word	0x40007000
 80034c0:	42420060 	.word	0x42420060

080034c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d0      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d910      	bls.n	8003508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0207 	bic.w	r2, r3, #7
 80034ee:	4965      	ldr	r1, [pc, #404]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b8      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800352a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494d      	ldr	r1, [pc, #308]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d040      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07f      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e073      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06b      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4936      	ldr	r1, [pc, #216]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe fc5a 	bl	8001e6c <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe fc56 	bl	8001e6c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e053      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d210      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4922      	ldr	r1, [pc, #136]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490e      	ldr	r1, [pc, #56]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f821 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8003656:	4602      	mov	r2, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	490a      	ldr	r1, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	5ccb      	ldrb	r3, [r1, r3]
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1cc>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1d0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fbb8 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40022000 	.word	0x40022000
 8003688:	40021000 	.word	0x40021000
 800368c:	080058e8 	.word	0x080058e8
 8003690:	20000010 	.word	0x20000010
 8003694:	20000014 	.word	0x20000014

08003698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	b490      	push	{r4, r7}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036a0:	1d3c      	adds	r4, r7, #4
 80036a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036a8:	f240 2301 	movw	r3, #513	; 0x201
 80036ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d002      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x40>
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x46>
 80036d6:	e02d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036da:	623b      	str	r3, [r7, #32]
      break;
 80036dc:	e02d      	b.n	800373a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	0c9b      	lsrs	r3, r3, #18
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036ea:	4413      	add	r3, r2
 80036ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c5b      	lsrs	r3, r3, #17
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800370a:	4413      	add	r3, r2
 800370c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003710:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003716:	fb02 f203 	mul.w	r2, r2, r3
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	e004      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	623b      	str	r3, [r7, #32]
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003736:	623b      	str	r3, [r7, #32]
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	6a3b      	ldr	r3, [r7, #32]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bc90      	pop	{r4, r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	080058d8 	.word	0x080058d8
 800374c:	40021000 	.word	0x40021000
 8003750:	007a1200 	.word	0x007a1200
 8003754:	003d0900 	.word	0x003d0900

08003758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <RCC_Delay+0x34>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <RCC_Delay+0x38>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0a5b      	lsrs	r3, r3, #9
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003774:	bf00      	nop
  }
  while (Delay --);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	60fa      	str	r2, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f9      	bne.n	8003774 <RCC_Delay+0x1c>
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000010 	.word	0x20000010
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d07d      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	61d3      	str	r3, [r2, #28]
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d118      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e8:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f4:	f7fe fb3a 	bl	8001e6c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fa:	e008      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fe fb36 	bl	8001e6c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e06d      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d02e      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	429a      	cmp	r2, r3
 8003836:	d027      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d014      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7fe fb05 	bl	8001e6c <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe fb01 	bl	8001e6c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e036      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ee      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4917      	ldr	r1, [pc, #92]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	4313      	orrs	r3, r2
 8003898:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4904      	ldr	r1, [pc, #16]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
 80038fc:	42420440 	.word	0x42420440

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e041      	b.n	8003996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe f8ec 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 fc28 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e03a      	b.n	8003a2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_Base_Start_IT+0x98>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x58>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d009      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x58>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_TIM_Base_Start_IT+0x9c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x58>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <HAL_TIM_Base_Start_IT+0xa0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d010      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1a:	e007      	b.n	8003a2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800

08003a44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e041      	b.n	8003ada <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f839 	bl	8003ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f000 fb86 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x24>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e022      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d109      	bne.n	8003b32 <HAL_TIM_PWM_Start+0x3e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e015      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d109      	bne.n	8003b4c <HAL_TIM_PWM_Start+0x58>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e008      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e05e      	b.n	8003c24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x82>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b74:	e013      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0x92>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_PWM_Start+0xa2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b94:	e003      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fd74 	bl	8004694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_TIM_PWM_Start+0x138>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_TIM_PWM_Start+0x138>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_TIM_PWM_Start+0xfa>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd8:	d009      	beq.n	8003bee <HAL_TIM_PWM_Start+0xfa>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <HAL_TIM_PWM_Start+0x13c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIM_PWM_Start+0xfa>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_TIM_PWM_Start+0x140>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d010      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	e007      	b.n	8003c22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa6f 	bl	800415e <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa62 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa71 	bl	8004170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa45 	bl	800415e <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa38 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa47 	bl	8004170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa1b 	bl	800415e <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa0e 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa1d 	bl	8004170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9f1 	bl	800415e <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9e4 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f9f3 	bl	8004170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fd6e 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fd32 	bl	800484c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9b7 	bl	8004182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0220 	mvn.w	r2, #32
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fcfd 	bl	800483a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0ac      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	f200 809f 	bhi.w	8003fb0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003fb1 	.word	0x08003fb1
 8003e80:	08003fb1 	.word	0x08003fb1
 8003e84:	08003fb1 	.word	0x08003fb1
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	08003fb1 	.word	0x08003fb1
 8003e90:	08003fb1 	.word	0x08003fb1
 8003e94:	08003fb1 	.word	0x08003fb1
 8003e98:	08003f2f 	.word	0x08003f2f
 8003e9c:	08003fb1 	.word	0x08003fb1
 8003ea0:	08003fb1 	.word	0x08003fb1
 8003ea4:	08003fb1 	.word	0x08003fb1
 8003ea8:	08003f6f 	.word	0x08003f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f9d0 	bl	8004258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0208 	orr.w	r2, r2, #8
 8003ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6999      	ldr	r1, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	619a      	str	r2, [r3, #24]
      break;
 8003eea:	e062      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fa16 	bl	8004324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6999      	ldr	r1, [r3, #24]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	619a      	str	r2, [r3, #24]
      break;
 8003f2c:	e041      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa5f 	bl	80043f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0208 	orr.w	r2, r2, #8
 8003f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0204 	bic.w	r2, r2, #4
 8003f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	61da      	str	r2, [r3, #28]
      break;
 8003f6c:	e021      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 faa9 	bl	80044cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	021a      	lsls	r2, r3, #8
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	61da      	str	r2, [r3, #28]
      break;
 8003fae:	e000      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIM_ConfigClockSource+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0b3      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x180>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004002:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004014:	d03e      	beq.n	8004094 <HAL_TIM_ConfigClockSource+0xd0>
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401a:	f200 8087 	bhi.w	800412c <HAL_TIM_ConfigClockSource+0x168>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	f000 8085 	beq.w	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402a:	d87f      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d01a      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0xa2>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d87b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 8004034:	2b60      	cmp	r3, #96	; 0x60
 8004036:	d050      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x116>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d877      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 800403c:	2b50      	cmp	r3, #80	; 0x50
 800403e:	d03c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0xf6>
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d873      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d058      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x136>
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d86f      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 800404c:	2b30      	cmp	r3, #48	; 0x30
 800404e:	d064      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x156>
 8004050:	2b30      	cmp	r3, #48	; 0x30
 8004052:	d86b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d060      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x156>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d867      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x168>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05c      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x156>
 8004060:	2b10      	cmp	r3, #16
 8004062:	d05a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004064:	e062      	b.n	800412c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f000 faee 	bl	8004656 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004088:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
      break;
 8004092:	e04e      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f000 fad7 	bl	8004656 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040b6:	609a      	str	r2, [r3, #8]
      break;
 80040b8:	e03b      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fa4e 	bl	8004568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2150      	movs	r1, #80	; 0x50
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 faa5 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e02b      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 fa6c 	bl	80045c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2160      	movs	r1, #96	; 0x60
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fa95 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 80040f8:	e01b      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	461a      	mov	r2, r3
 8004108:	f000 fa2e 	bl	8004568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2140      	movs	r1, #64	; 0x40
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fa85 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8004118:	e00b      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 fa7c 	bl	8004622 <TIM_ITRx_SetConfig>
        break;
 800412a:	e002      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a29      	ldr	r2, [pc, #164]	; (800424c <TIM_Base_SetConfig+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <TIM_Base_SetConfig+0x30>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d007      	beq.n	80041c4 <TIM_Base_SetConfig+0x30>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <TIM_Base_SetConfig+0xbc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_Base_SetConfig+0x30>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a25      	ldr	r2, [pc, #148]	; (8004254 <TIM_Base_SetConfig+0xc0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d108      	bne.n	80041d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1c      	ldr	r2, [pc, #112]	; (800424c <TIM_Base_SetConfig+0xb8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0x62>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0x62>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <TIM_Base_SetConfig+0xbc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <TIM_Base_SetConfig+0xc0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a07      	ldr	r2, [pc, #28]	; (800424c <TIM_Base_SetConfig+0xb8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	615a      	str	r2, [r3, #20]
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800

08004258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f023 0302 	bic.w	r3, r3, #2
 80042a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <TIM_OC1_SetConfig+0xc8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10c      	bne.n	80042ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0308 	bic.w	r3, r3, #8
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <TIM_OC1_SetConfig+0xc8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40012c00 	.word	0x40012c00

08004324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0210 	bic.w	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0320 	bic.w	r3, r3, #32
 800436e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <TIM_OC2_SetConfig+0xd0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10d      	bne.n	80043a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <TIM_OC2_SetConfig+0xd0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d113      	bne.n	80043d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00

080043f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <TIM_OC3_SetConfig+0xd0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10d      	bne.n	8004472 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800445c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <TIM_OC3_SetConfig+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d113      	bne.n	80044a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40012c00 	.word	0x40012c00

080044cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <TIM_OC4_SetConfig+0x98>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d109      	bne.n	8004540 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	40012c00 	.word	0x40012c00

08004568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 030a 	bic.w	r3, r3, #10
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f023 0210 	bic.w	r2, r3, #16
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	031b      	lsls	r3, r3, #12
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	621a      	str	r2, [r3, #32]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	f043 0307 	orr.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004656:	b480      	push	{r7}
 8004658:	b087      	sub	sp, #28
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004670:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	021a      	lsls	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	431a      	orrs	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	609a      	str	r2, [r3, #8]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2201      	movs	r2, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1a      	ldr	r2, [r3, #32]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	401a      	ands	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	fa01 f303 	lsl.w	r3, r1, r3
 80046cc:	431a      	orrs	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e046      	b.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d009      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a12      	ldr	r2, [pc, #72]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a10      	ldr	r2, [pc, #64]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10c      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800

08004798 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e03d      	b.n	8004830 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
	...

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	2600      	movs	r6, #0
 8004864:	4d0c      	ldr	r5, [pc, #48]	; (8004898 <__libc_init_array+0x38>)
 8004866:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	f001 f824 	bl	80058bc <_init>
 8004874:	2600      	movs	r6, #0
 8004876:	4d0a      	ldr	r5, [pc, #40]	; (80048a0 <__libc_init_array+0x40>)
 8004878:	4c0a      	ldr	r4, [pc, #40]	; (80048a4 <__libc_init_array+0x44>)
 800487a:	1b64      	subs	r4, r4, r5
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f855 3b04 	ldr.w	r3, [r5], #4
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08005ad0 	.word	0x08005ad0
 800489c:	08005ad0 	.word	0x08005ad0
 80048a0:	08005ad0 	.word	0x08005ad0
 80048a4:	08005ad4 	.word	0x08005ad4

080048a8 <memset>:
 80048a8:	4603      	mov	r3, r0
 80048aa:	4402      	add	r2, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <sin>:
 80048b8:	b530      	push	{r4, r5, lr}
 80048ba:	4a20      	ldr	r2, [pc, #128]	; (800493c <sin+0x84>)
 80048bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048c0:	4293      	cmp	r3, r2
 80048c2:	b087      	sub	sp, #28
 80048c4:	dc06      	bgt.n	80048d4 <sin+0x1c>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2200      	movs	r2, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	f000 fe33 	bl	8005538 <__kernel_sin>
 80048d2:	e006      	b.n	80048e2 <sin+0x2a>
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <sin+0x88>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	dd05      	ble.n	80048e6 <sin+0x2e>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	f7fb fc3b 	bl	8000158 <__aeabi_dsub>
 80048e2:	b007      	add	sp, #28
 80048e4:	bd30      	pop	{r4, r5, pc}
 80048e6:	aa02      	add	r2, sp, #8
 80048e8:	f000 f82e 	bl	8004948 <__ieee754_rem_pio2>
 80048ec:	f000 0003 	and.w	r0, r0, #3
 80048f0:	2801      	cmp	r0, #1
 80048f2:	d009      	beq.n	8004908 <sin+0x50>
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d00e      	beq.n	8004916 <sin+0x5e>
 80048f8:	b9c0      	cbnz	r0, 800492c <sin+0x74>
 80048fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fe:	2301      	movs	r3, #1
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004906:	e7e2      	b.n	80048ce <sin+0x16>
 8004908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800490c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004910:	f000 fa0a 	bl	8004d28 <__kernel_cos>
 8004914:	e7e5      	b.n	80048e2 <sin+0x2a>
 8004916:	2301      	movs	r3, #1
 8004918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004922:	f000 fe09 	bl	8005538 <__kernel_sin>
 8004926:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800492a:	e7da      	b.n	80048e2 <sin+0x2a>
 800492c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004934:	f000 f9f8 	bl	8004d28 <__kernel_cos>
 8004938:	e7f5      	b.n	8004926 <sin+0x6e>
 800493a:	bf00      	nop
 800493c:	3fe921fb 	.word	0x3fe921fb
 8004940:	7fefffff 	.word	0x7fefffff
 8004944:	00000000 	.word	0x00000000

08004948 <__ieee754_rem_pio2>:
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	4614      	mov	r4, r2
 800494e:	4ac4      	ldr	r2, [pc, #784]	; (8004c60 <__ieee754_rem_pio2+0x318>)
 8004950:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004954:	b08d      	sub	sp, #52	; 0x34
 8004956:	4592      	cmp	sl, r2
 8004958:	9104      	str	r1, [sp, #16]
 800495a:	dc07      	bgt.n	800496c <__ieee754_rem_pio2+0x24>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	e9c4 0100 	strd	r0, r1, [r4]
 8004964:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004968:	2500      	movs	r5, #0
 800496a:	e024      	b.n	80049b6 <__ieee754_rem_pio2+0x6e>
 800496c:	4abd      	ldr	r2, [pc, #756]	; (8004c64 <__ieee754_rem_pio2+0x31c>)
 800496e:	4592      	cmp	sl, r2
 8004970:	dc72      	bgt.n	8004a58 <__ieee754_rem_pio2+0x110>
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	4dbc      	ldr	r5, [pc, #752]	; (8004c68 <__ieee754_rem_pio2+0x320>)
 8004976:	2b00      	cmp	r3, #0
 8004978:	a3ab      	add	r3, pc, #684	; (adr r3, 8004c28 <__ieee754_rem_pio2+0x2e0>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	dd36      	ble.n	80049ee <__ieee754_rem_pio2+0xa6>
 8004980:	f7fb fbea 	bl	8000158 <__aeabi_dsub>
 8004984:	45aa      	cmp	sl, r5
 8004986:	4606      	mov	r6, r0
 8004988:	460f      	mov	r7, r1
 800498a:	d018      	beq.n	80049be <__ieee754_rem_pio2+0x76>
 800498c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004c30 <__ieee754_rem_pio2+0x2e8>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fb fbe1 	bl	8000158 <__aeabi_dsub>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4630      	mov	r0, r6
 800499c:	e9c4 2300 	strd	r2, r3, [r4]
 80049a0:	4639      	mov	r1, r7
 80049a2:	f7fb fbd9 	bl	8000158 <__aeabi_dsub>
 80049a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8004c30 <__ieee754_rem_pio2+0x2e8>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fb fbd4 	bl	8000158 <__aeabi_dsub>
 80049b0:	2501      	movs	r5, #1
 80049b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049b6:	4628      	mov	r0, r5
 80049b8:	b00d      	add	sp, #52	; 0x34
 80049ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049be:	a39e      	add	r3, pc, #632	; (adr r3, 8004c38 <__ieee754_rem_pio2+0x2f0>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fbc8 	bl	8000158 <__aeabi_dsub>
 80049c8:	a39d      	add	r3, pc, #628	; (adr r3, 8004c40 <__ieee754_rem_pio2+0x2f8>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	4606      	mov	r6, r0
 80049d0:	460f      	mov	r7, r1
 80049d2:	f7fb fbc1 	bl	8000158 <__aeabi_dsub>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4630      	mov	r0, r6
 80049dc:	e9c4 2300 	strd	r2, r3, [r4]
 80049e0:	4639      	mov	r1, r7
 80049e2:	f7fb fbb9 	bl	8000158 <__aeabi_dsub>
 80049e6:	a396      	add	r3, pc, #600	; (adr r3, 8004c40 <__ieee754_rem_pio2+0x2f8>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	e7de      	b.n	80049ac <__ieee754_rem_pio2+0x64>
 80049ee:	f7fb fbb5 	bl	800015c <__adddf3>
 80049f2:	45aa      	cmp	sl, r5
 80049f4:	4606      	mov	r6, r0
 80049f6:	460f      	mov	r7, r1
 80049f8:	d016      	beq.n	8004a28 <__ieee754_rem_pio2+0xe0>
 80049fa:	a38d      	add	r3, pc, #564	; (adr r3, 8004c30 <__ieee754_rem_pio2+0x2e8>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f7fb fbac 	bl	800015c <__adddf3>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4630      	mov	r0, r6
 8004a0a:	e9c4 2300 	strd	r2, r3, [r4]
 8004a0e:	4639      	mov	r1, r7
 8004a10:	f7fb fba2 	bl	8000158 <__aeabi_dsub>
 8004a14:	a386      	add	r3, pc, #536	; (adr r3, 8004c30 <__ieee754_rem_pio2+0x2e8>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fb9f 	bl	800015c <__adddf3>
 8004a1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004a22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a26:	e7c6      	b.n	80049b6 <__ieee754_rem_pio2+0x6e>
 8004a28:	a383      	add	r3, pc, #524	; (adr r3, 8004c38 <__ieee754_rem_pio2+0x2f0>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb fb95 	bl	800015c <__adddf3>
 8004a32:	a383      	add	r3, pc, #524	; (adr r3, 8004c40 <__ieee754_rem_pio2+0x2f8>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	4606      	mov	r6, r0
 8004a3a:	460f      	mov	r7, r1
 8004a3c:	f7fb fb8e 	bl	800015c <__adddf3>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4630      	mov	r0, r6
 8004a46:	e9c4 2300 	strd	r2, r3, [r4]
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fb fb84 	bl	8000158 <__aeabi_dsub>
 8004a50:	a37b      	add	r3, pc, #492	; (adr r3, 8004c40 <__ieee754_rem_pio2+0x2f8>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	e7e0      	b.n	8004a1a <__ieee754_rem_pio2+0xd2>
 8004a58:	4a84      	ldr	r2, [pc, #528]	; (8004c6c <__ieee754_rem_pio2+0x324>)
 8004a5a:	4592      	cmp	sl, r2
 8004a5c:	f300 80d5 	bgt.w	8004c0a <__ieee754_rem_pio2+0x2c2>
 8004a60:	f000 fe20 	bl	80056a4 <fabs>
 8004a64:	a378      	add	r3, pc, #480	; (adr r3, 8004c48 <__ieee754_rem_pio2+0x300>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	f7fb fd2b 	bl	80004c8 <__aeabi_dmul>
 8004a72:	2200      	movs	r2, #0
 8004a74:	4b7e      	ldr	r3, [pc, #504]	; (8004c70 <__ieee754_rem_pio2+0x328>)
 8004a76:	f7fb fb71 	bl	800015c <__adddf3>
 8004a7a:	f7fb ffbf 	bl	80009fc <__aeabi_d2iz>
 8004a7e:	4605      	mov	r5, r0
 8004a80:	f7fb fcb8 	bl	80003f4 <__aeabi_i2d>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a8c:	a366      	add	r3, pc, #408	; (adr r3, 8004c28 <__ieee754_rem_pio2+0x2e0>)
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f7fb fd19 	bl	80004c8 <__aeabi_dmul>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	f7fb fb5b 	bl	8000158 <__aeabi_dsub>
 8004aa2:	a363      	add	r3, pc, #396	; (adr r3, 8004c30 <__ieee754_rem_pio2+0x2e8>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	4689      	mov	r9, r1
 8004aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab0:	f7fb fd0a 	bl	80004c8 <__aeabi_dmul>
 8004ab4:	2d1f      	cmp	r5, #31
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	460f      	mov	r7, r1
 8004aba:	dc0e      	bgt.n	8004ada <__ieee754_rem_pio2+0x192>
 8004abc:	4b6d      	ldr	r3, [pc, #436]	; (8004c74 <__ieee754_rem_pio2+0x32c>)
 8004abe:	1e6a      	subs	r2, r5, #1
 8004ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac4:	4553      	cmp	r3, sl
 8004ac6:	d008      	beq.n	8004ada <__ieee754_rem_pio2+0x192>
 8004ac8:	4632      	mov	r2, r6
 8004aca:	463b      	mov	r3, r7
 8004acc:	4640      	mov	r0, r8
 8004ace:	4649      	mov	r1, r9
 8004ad0:	f7fb fb42 	bl	8000158 <__aeabi_dsub>
 8004ad4:	e9c4 0100 	strd	r0, r1, [r4]
 8004ad8:	e013      	b.n	8004b02 <__ieee754_rem_pio2+0x1ba>
 8004ada:	463b      	mov	r3, r7
 8004adc:	4632      	mov	r2, r6
 8004ade:	4640      	mov	r0, r8
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	f7fb fb39 	bl	8000158 <__aeabi_dsub>
 8004ae6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004af0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8004af4:	f1ba 0f10 	cmp.w	sl, #16
 8004af8:	dc1f      	bgt.n	8004b3a <__ieee754_rem_pio2+0x1f2>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	e9c4 2300 	strd	r2, r3, [r4]
 8004b02:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004b06:	4640      	mov	r0, r8
 8004b08:	4653      	mov	r3, sl
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	f7fb fb24 	bl	8000158 <__aeabi_dsub>
 8004b10:	4632      	mov	r2, r6
 8004b12:	463b      	mov	r3, r7
 8004b14:	f7fb fb20 	bl	8000158 <__aeabi_dsub>
 8004b18:	460b      	mov	r3, r1
 8004b1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b1e:	9904      	ldr	r1, [sp, #16]
 8004b20:	4602      	mov	r2, r0
 8004b22:	2900      	cmp	r1, #0
 8004b24:	f6bf af47 	bge.w	80049b6 <__ieee754_rem_pio2+0x6e>
 8004b28:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004b2c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004b30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b34:	60e3      	str	r3, [r4, #12]
 8004b36:	426d      	negs	r5, r5
 8004b38:	e73d      	b.n	80049b6 <__ieee754_rem_pio2+0x6e>
 8004b3a:	a33f      	add	r3, pc, #252	; (adr r3, 8004c38 <__ieee754_rem_pio2+0x2f0>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b44:	f7fb fcc0 	bl	80004c8 <__aeabi_dmul>
 8004b48:	4606      	mov	r6, r0
 8004b4a:	460f      	mov	r7, r1
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4640      	mov	r0, r8
 8004b52:	4649      	mov	r1, r9
 8004b54:	f7fb fb00 	bl	8000158 <__aeabi_dsub>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4682      	mov	sl, r0
 8004b5e:	468b      	mov	fp, r1
 8004b60:	4640      	mov	r0, r8
 8004b62:	4649      	mov	r1, r9
 8004b64:	f7fb faf8 	bl	8000158 <__aeabi_dsub>
 8004b68:	4632      	mov	r2, r6
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	f7fb faf4 	bl	8000158 <__aeabi_dsub>
 8004b70:	a333      	add	r3, pc, #204	; (adr r3, 8004c40 <__ieee754_rem_pio2+0x2f8>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	4606      	mov	r6, r0
 8004b78:	460f      	mov	r7, r1
 8004b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7e:	f7fb fca3 	bl	80004c8 <__aeabi_dmul>
 8004b82:	4632      	mov	r2, r6
 8004b84:	463b      	mov	r3, r7
 8004b86:	f7fb fae7 	bl	8000158 <__aeabi_dsub>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460f      	mov	r7, r1
 8004b92:	4650      	mov	r0, sl
 8004b94:	4659      	mov	r1, fp
 8004b96:	f7fb fadf 	bl	8000158 <__aeabi_dsub>
 8004b9a:	9a05      	ldr	r2, [sp, #20]
 8004b9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b31      	cmp	r3, #49	; 0x31
 8004ba4:	dc06      	bgt.n	8004bb4 <__ieee754_rem_pio2+0x26c>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	46d0      	mov	r8, sl
 8004bac:	46d9      	mov	r9, fp
 8004bae:	e9c4 2300 	strd	r2, r3, [r4]
 8004bb2:	e7a6      	b.n	8004b02 <__ieee754_rem_pio2+0x1ba>
 8004bb4:	a326      	add	r3, pc, #152	; (adr r3, 8004c50 <__ieee754_rem_pio2+0x308>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bbe:	f7fb fc83 	bl	80004c8 <__aeabi_dmul>
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460f      	mov	r7, r1
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4650      	mov	r0, sl
 8004bcc:	4659      	mov	r1, fp
 8004bce:	f7fb fac3 	bl	8000158 <__aeabi_dsub>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4680      	mov	r8, r0
 8004bd8:	4689      	mov	r9, r1
 8004bda:	4650      	mov	r0, sl
 8004bdc:	4659      	mov	r1, fp
 8004bde:	f7fb fabb 	bl	8000158 <__aeabi_dsub>
 8004be2:	4632      	mov	r2, r6
 8004be4:	463b      	mov	r3, r7
 8004be6:	f7fb fab7 	bl	8000158 <__aeabi_dsub>
 8004bea:	a31b      	add	r3, pc, #108	; (adr r3, 8004c58 <__ieee754_rem_pio2+0x310>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	4606      	mov	r6, r0
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bf8:	f7fb fc66 	bl	80004c8 <__aeabi_dmul>
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	463b      	mov	r3, r7
 8004c00:	f7fb faaa 	bl	8000158 <__aeabi_dsub>
 8004c04:	4606      	mov	r6, r0
 8004c06:	460f      	mov	r7, r1
 8004c08:	e75e      	b.n	8004ac8 <__ieee754_rem_pio2+0x180>
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <__ieee754_rem_pio2+0x330>)
 8004c0c:	4592      	cmp	sl, r2
 8004c0e:	dd35      	ble.n	8004c7c <__ieee754_rem_pio2+0x334>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	f7fb faa0 	bl	8000158 <__aeabi_dsub>
 8004c18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c1c:	e9c4 0100 	strd	r0, r1, [r4]
 8004c20:	e6a2      	b.n	8004968 <__ieee754_rem_pio2+0x20>
 8004c22:	bf00      	nop
 8004c24:	f3af 8000 	nop.w
 8004c28:	54400000 	.word	0x54400000
 8004c2c:	3ff921fb 	.word	0x3ff921fb
 8004c30:	1a626331 	.word	0x1a626331
 8004c34:	3dd0b461 	.word	0x3dd0b461
 8004c38:	1a600000 	.word	0x1a600000
 8004c3c:	3dd0b461 	.word	0x3dd0b461
 8004c40:	2e037073 	.word	0x2e037073
 8004c44:	3ba3198a 	.word	0x3ba3198a
 8004c48:	6dc9c883 	.word	0x6dc9c883
 8004c4c:	3fe45f30 	.word	0x3fe45f30
 8004c50:	2e000000 	.word	0x2e000000
 8004c54:	3ba3198a 	.word	0x3ba3198a
 8004c58:	252049c1 	.word	0x252049c1
 8004c5c:	397b839a 	.word	0x397b839a
 8004c60:	3fe921fb 	.word	0x3fe921fb
 8004c64:	4002d97b 	.word	0x4002d97b
 8004c68:	3ff921fb 	.word	0x3ff921fb
 8004c6c:	413921fb 	.word	0x413921fb
 8004c70:	3fe00000 	.word	0x3fe00000
 8004c74:	080058f8 	.word	0x080058f8
 8004c78:	7fefffff 	.word	0x7fefffff
 8004c7c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004c80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004c84:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004c88:	460f      	mov	r7, r1
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	f7fb feb6 	bl	80009fc <__aeabi_d2iz>
 8004c90:	f7fb fbb0 	bl	80003f4 <__aeabi_i2d>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4630      	mov	r0, r6
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ca0:	f7fb fa5a 	bl	8000158 <__aeabi_dsub>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <__ieee754_rem_pio2+0x3d8>)
 8004ca8:	f7fb fc0e 	bl	80004c8 <__aeabi_dmul>
 8004cac:	460f      	mov	r7, r1
 8004cae:	4606      	mov	r6, r0
 8004cb0:	f7fb fea4 	bl	80009fc <__aeabi_d2iz>
 8004cb4:	f7fb fb9e 	bl	80003f4 <__aeabi_i2d>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cc4:	f7fb fa48 	bl	8000158 <__aeabi_dsub>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <__ieee754_rem_pio2+0x3d8>)
 8004ccc:	f7fb fbfc 	bl	80004c8 <__aeabi_dmul>
 8004cd0:	f04f 0803 	mov.w	r8, #3
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	2700      	movs	r7, #0
 8004cd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cdc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	46c2      	mov	sl, r8
 8004cea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004cee:	f7fb fe53 	bl	8000998 <__aeabi_dcmpeq>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d1f4      	bne.n	8004ce0 <__ieee754_rem_pio2+0x398>
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <__ieee754_rem_pio2+0x3dc>)
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	4621      	mov	r1, r4
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	a806      	add	r0, sp, #24
 8004d04:	4653      	mov	r3, sl
 8004d06:	f000 f8cd 	bl	8004ea4 <__kernel_rem_pio2>
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f6bf ae51 	bge.w	80049b6 <__ieee754_rem_pio2+0x6e>
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d1a:	6063      	str	r3, [r4, #4]
 8004d1c:	68e3      	ldr	r3, [r4, #12]
 8004d1e:	e707      	b.n	8004b30 <__ieee754_rem_pio2+0x1e8>
 8004d20:	41700000 	.word	0x41700000
 8004d24:	08005978 	.word	0x08005978

08004d28 <__kernel_cos>:
 8004d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004d30:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004d34:	4680      	mov	r8, r0
 8004d36:	460f      	mov	r7, r1
 8004d38:	e9cd 2300 	strd	r2, r3, [sp]
 8004d3c:	da04      	bge.n	8004d48 <__kernel_cos+0x20>
 8004d3e:	f7fb fe5d 	bl	80009fc <__aeabi_d2iz>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f000 8086 	beq.w	8004e54 <__kernel_cos+0x12c>
 8004d48:	4642      	mov	r2, r8
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	4639      	mov	r1, r7
 8004d50:	f7fb fbba 	bl	80004c8 <__aeabi_dmul>
 8004d54:	2200      	movs	r2, #0
 8004d56:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <__kernel_cos+0x168>)
 8004d58:	4604      	mov	r4, r0
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	f7fb fbb4 	bl	80004c8 <__aeabi_dmul>
 8004d60:	a33f      	add	r3, pc, #252	; (adr r3, 8004e60 <__kernel_cos+0x138>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	4682      	mov	sl, r0
 8004d68:	468b      	mov	fp, r1
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb fbab 	bl	80004c8 <__aeabi_dmul>
 8004d72:	a33d      	add	r3, pc, #244	; (adr r3, 8004e68 <__kernel_cos+0x140>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f7fb f9f0 	bl	800015c <__adddf3>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	462b      	mov	r3, r5
 8004d80:	f7fb fba2 	bl	80004c8 <__aeabi_dmul>
 8004d84:	a33a      	add	r3, pc, #232	; (adr r3, 8004e70 <__kernel_cos+0x148>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb f9e5 	bl	8000158 <__aeabi_dsub>
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	f7fb fb99 	bl	80004c8 <__aeabi_dmul>
 8004d96:	a338      	add	r3, pc, #224	; (adr r3, 8004e78 <__kernel_cos+0x150>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb f9de 	bl	800015c <__adddf3>
 8004da0:	4622      	mov	r2, r4
 8004da2:	462b      	mov	r3, r5
 8004da4:	f7fb fb90 	bl	80004c8 <__aeabi_dmul>
 8004da8:	a335      	add	r3, pc, #212	; (adr r3, 8004e80 <__kernel_cos+0x158>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb f9d3 	bl	8000158 <__aeabi_dsub>
 8004db2:	4622      	mov	r2, r4
 8004db4:	462b      	mov	r3, r5
 8004db6:	f7fb fb87 	bl	80004c8 <__aeabi_dmul>
 8004dba:	a333      	add	r3, pc, #204	; (adr r3, 8004e88 <__kernel_cos+0x160>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb f9cc 	bl	800015c <__adddf3>
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	f7fb fb7e 	bl	80004c8 <__aeabi_dmul>
 8004dcc:	4622      	mov	r2, r4
 8004dce:	462b      	mov	r3, r5
 8004dd0:	f7fb fb7a 	bl	80004c8 <__aeabi_dmul>
 8004dd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dd8:	4604      	mov	r4, r0
 8004dda:	460d      	mov	r5, r1
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4639      	mov	r1, r7
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	460b      	mov	r3, r1
 8004de6:	4602      	mov	r2, r0
 8004de8:	4629      	mov	r1, r5
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7fb f9b4 	bl	8000158 <__aeabi_dsub>
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <__kernel_cos+0x16c>)
 8004df2:	4680      	mov	r8, r0
 8004df4:	429e      	cmp	r6, r3
 8004df6:	4689      	mov	r9, r1
 8004df8:	dc0e      	bgt.n	8004e18 <__kernel_cos+0xf0>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4650      	mov	r0, sl
 8004e00:	4659      	mov	r1, fp
 8004e02:	f7fb f9a9 	bl	8000158 <__aeabi_dsub>
 8004e06:	4602      	mov	r2, r0
 8004e08:	2000      	movs	r0, #0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4922      	ldr	r1, [pc, #136]	; (8004e98 <__kernel_cos+0x170>)
 8004e0e:	f7fb f9a3 	bl	8000158 <__aeabi_dsub>
 8004e12:	b003      	add	sp, #12
 8004e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e18:	2400      	movs	r4, #0
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <__kernel_cos+0x174>)
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	429e      	cmp	r6, r3
 8004e20:	bfcc      	ite	gt
 8004e22:	4d1f      	ldrgt	r5, [pc, #124]	; (8004ea0 <__kernel_cos+0x178>)
 8004e24:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004e28:	462b      	mov	r3, r5
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	491a      	ldr	r1, [pc, #104]	; (8004e98 <__kernel_cos+0x170>)
 8004e2e:	f7fb f993 	bl	8000158 <__aeabi_dsub>
 8004e32:	4622      	mov	r2, r4
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	462b      	mov	r3, r5
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	f7fb f98b 	bl	8000158 <__aeabi_dsub>
 8004e42:	4642      	mov	r2, r8
 8004e44:	464b      	mov	r3, r9
 8004e46:	f7fb f987 	bl	8000158 <__aeabi_dsub>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4630      	mov	r0, r6
 8004e50:	4639      	mov	r1, r7
 8004e52:	e7dc      	b.n	8004e0e <__kernel_cos+0xe6>
 8004e54:	2000      	movs	r0, #0
 8004e56:	4910      	ldr	r1, [pc, #64]	; (8004e98 <__kernel_cos+0x170>)
 8004e58:	e7db      	b.n	8004e12 <__kernel_cos+0xea>
 8004e5a:	bf00      	nop
 8004e5c:	f3af 8000 	nop.w
 8004e60:	be8838d4 	.word	0xbe8838d4
 8004e64:	bda8fae9 	.word	0xbda8fae9
 8004e68:	bdb4b1c4 	.word	0xbdb4b1c4
 8004e6c:	3e21ee9e 	.word	0x3e21ee9e
 8004e70:	809c52ad 	.word	0x809c52ad
 8004e74:	3e927e4f 	.word	0x3e927e4f
 8004e78:	19cb1590 	.word	0x19cb1590
 8004e7c:	3efa01a0 	.word	0x3efa01a0
 8004e80:	16c15177 	.word	0x16c15177
 8004e84:	3f56c16c 	.word	0x3f56c16c
 8004e88:	5555554c 	.word	0x5555554c
 8004e8c:	3fa55555 	.word	0x3fa55555
 8004e90:	3fe00000 	.word	0x3fe00000
 8004e94:	3fd33332 	.word	0x3fd33332
 8004e98:	3ff00000 	.word	0x3ff00000
 8004e9c:	3fe90000 	.word	0x3fe90000
 8004ea0:	3fd20000 	.word	0x3fd20000

08004ea4 <__kernel_rem_pio2>:
 8004ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004eac:	9308      	str	r3, [sp, #32]
 8004eae:	9101      	str	r1, [sp, #4]
 8004eb0:	4bc0      	ldr	r3, [pc, #768]	; (80051b4 <__kernel_rem_pio2+0x310>)
 8004eb2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004eb4:	f112 0f14 	cmn.w	r2, #20
 8004eb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ebc:	bfa8      	it	ge
 8004ebe:	1ed4      	subge	r4, r2, #3
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9b08      	ldr	r3, [sp, #32]
 8004ec4:	bfb8      	it	lt
 8004ec6:	2400      	movlt	r4, #0
 8004ec8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004ecc:	9306      	str	r3, [sp, #24]
 8004ece:	bfa4      	itt	ge
 8004ed0:	2318      	movge	r3, #24
 8004ed2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004ed6:	f06f 0317 	mvn.w	r3, #23
 8004eda:	fb04 3303 	mla	r3, r4, r3, r3
 8004ede:	eb03 0a02 	add.w	sl, r3, r2
 8004ee2:	9a06      	ldr	r2, [sp, #24]
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	1aa7      	subs	r7, r4, r2
 8004ee8:	eb03 0802 	add.w	r8, r3, r2
 8004eec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004eee:	2500      	movs	r5, #0
 8004ef0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9009      	str	r0, [sp, #36]	; 0x24
 8004efa:	ae20      	add	r6, sp, #128	; 0x80
 8004efc:	4545      	cmp	r5, r8
 8004efe:	dd19      	ble.n	8004f34 <__kernel_rem_pio2+0x90>
 8004f00:	9b08      	ldr	r3, [sp, #32]
 8004f02:	aa20      	add	r2, sp, #128	; 0x80
 8004f04:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004f08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004f0c:	f1c3 0301 	rsb	r3, r3, #1
 8004f10:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	9b07      	ldr	r3, [sp, #28]
 8004f18:	9a04      	ldr	r2, [sp, #16]
 8004f1a:	4443      	add	r3, r8
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	db35      	blt.n	8004f8c <__kernel_rem_pio2+0xe8>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	2200      	movs	r2, #0
 8004f24:	f1a3 0908 	sub.w	r9, r3, #8
 8004f28:	2300      	movs	r3, #0
 8004f2a:	462f      	mov	r7, r5
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f32:	e01f      	b.n	8004f74 <__kernel_rem_pio2+0xd0>
 8004f34:	42ef      	cmn	r7, r5
 8004f36:	d40b      	bmi.n	8004f50 <__kernel_rem_pio2+0xac>
 8004f38:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f40:	f7fb fa58 	bl	80003f4 <__aeabi_i2d>
 8004f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f48:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7d5      	b.n	8004efc <__kernel_rem_pio2+0x58>
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	e7f8      	b.n	8004f48 <__kernel_rem_pio2+0xa4>
 8004f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004f5e:	f7fb fab3 	bl	80004c8 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f6a:	f7fb f8f7 	bl	800015c <__adddf3>
 8004f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f72:	3601      	adds	r6, #1
 8004f74:	9b06      	ldr	r3, [sp, #24]
 8004f76:	3f08      	subs	r7, #8
 8004f78:	429e      	cmp	r6, r3
 8004f7a:	ddec      	ble.n	8004f56 <__kernel_rem_pio2+0xb2>
 8004f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f80:	3508      	adds	r5, #8
 8004f82:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004f86:	f108 0801 	add.w	r8, r8, #1
 8004f8a:	e7c4      	b.n	8004f16 <__kernel_rem_pio2+0x72>
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	aa0c      	add	r2, sp, #48	; 0x30
 8004f90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f96:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004f98:	9f04      	ldr	r7, [sp, #16]
 8004f9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa0:	463e      	mov	r6, r7
 8004fa2:	ab98      	add	r3, sp, #608	; 0x260
 8004fa4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004fa8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fac:	f8cd b008 	str.w	fp, [sp, #8]
 8004fb0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004fb4:	2e00      	cmp	r6, #0
 8004fb6:	dc71      	bgt.n	800509c <__kernel_rem_pio2+0x1f8>
 8004fb8:	4652      	mov	r2, sl
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f000 fbf7 	bl	80057b0 <scalbn>
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	f7fb fa7c 	bl	80004c8 <__aeabi_dmul>
 8004fd0:	f000 fb6e 	bl	80056b0 <floor>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4b78      	ldr	r3, [pc, #480]	; (80051b8 <__kernel_rem_pio2+0x314>)
 8004fd8:	f7fb fa76 	bl	80004c8 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb f8b8 	bl	8000158 <__aeabi_dsub>
 8004fe8:	460d      	mov	r5, r1
 8004fea:	4604      	mov	r4, r0
 8004fec:	f7fb fd06 	bl	80009fc <__aeabi_d2iz>
 8004ff0:	9007      	str	r0, [sp, #28]
 8004ff2:	f7fb f9ff 	bl	80003f4 <__aeabi_i2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb f8ab 	bl	8000158 <__aeabi_dsub>
 8005002:	f1ba 0f00 	cmp.w	sl, #0
 8005006:	4680      	mov	r8, r0
 8005008:	4689      	mov	r9, r1
 800500a:	dd70      	ble.n	80050ee <__kernel_rem_pio2+0x24a>
 800500c:	1e7a      	subs	r2, r7, #1
 800500e:	ab0c      	add	r3, sp, #48	; 0x30
 8005010:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005014:	9c07      	ldr	r4, [sp, #28]
 8005016:	f1ca 0118 	rsb	r1, sl, #24
 800501a:	fa40 f301 	asr.w	r3, r0, r1
 800501e:	441c      	add	r4, r3
 8005020:	408b      	lsls	r3, r1
 8005022:	1ac0      	subs	r0, r0, r3
 8005024:	ab0c      	add	r3, sp, #48	; 0x30
 8005026:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800502a:	f1ca 0317 	rsb	r3, sl, #23
 800502e:	9407      	str	r4, [sp, #28]
 8005030:	fa40 f303 	asr.w	r3, r0, r3
 8005034:	9302      	str	r3, [sp, #8]
 8005036:	9b02      	ldr	r3, [sp, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dd66      	ble.n	800510a <__kernel_rem_pio2+0x266>
 800503c:	2200      	movs	r2, #0
 800503e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005042:	4614      	mov	r4, r2
 8005044:	9b07      	ldr	r3, [sp, #28]
 8005046:	3301      	adds	r3, #1
 8005048:	9307      	str	r3, [sp, #28]
 800504a:	4297      	cmp	r7, r2
 800504c:	f300 809f 	bgt.w	800518e <__kernel_rem_pio2+0x2ea>
 8005050:	f1ba 0f00 	cmp.w	sl, #0
 8005054:	dd07      	ble.n	8005066 <__kernel_rem_pio2+0x1c2>
 8005056:	f1ba 0f01 	cmp.w	sl, #1
 800505a:	f000 80b9 	beq.w	80051d0 <__kernel_rem_pio2+0x32c>
 800505e:	f1ba 0f02 	cmp.w	sl, #2
 8005062:	f000 80bf 	beq.w	80051e4 <__kernel_rem_pio2+0x340>
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d14e      	bne.n	800510a <__kernel_rem_pio2+0x266>
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	2000      	movs	r0, #0
 8005072:	4952      	ldr	r1, [pc, #328]	; (80051bc <__kernel_rem_pio2+0x318>)
 8005074:	f7fb f870 	bl	8000158 <__aeabi_dsub>
 8005078:	4680      	mov	r8, r0
 800507a:	4689      	mov	r9, r1
 800507c:	2c00      	cmp	r4, #0
 800507e:	d044      	beq.n	800510a <__kernel_rem_pio2+0x266>
 8005080:	4652      	mov	r2, sl
 8005082:	2000      	movs	r0, #0
 8005084:	494d      	ldr	r1, [pc, #308]	; (80051bc <__kernel_rem_pio2+0x318>)
 8005086:	f000 fb93 	bl	80057b0 <scalbn>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4640      	mov	r0, r8
 8005090:	4649      	mov	r1, r9
 8005092:	f7fb f861 	bl	8000158 <__aeabi_dsub>
 8005096:	4680      	mov	r8, r0
 8005098:	4689      	mov	r9, r1
 800509a:	e036      	b.n	800510a <__kernel_rem_pio2+0x266>
 800509c:	2200      	movs	r2, #0
 800509e:	4b48      	ldr	r3, [pc, #288]	; (80051c0 <__kernel_rem_pio2+0x31c>)
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb fa10 	bl	80004c8 <__aeabi_dmul>
 80050a8:	f7fb fca8 	bl	80009fc <__aeabi_d2iz>
 80050ac:	f7fb f9a2 	bl	80003f4 <__aeabi_i2d>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b44      	ldr	r3, [pc, #272]	; (80051c4 <__kernel_rem_pio2+0x320>)
 80050b4:	4680      	mov	r8, r0
 80050b6:	4689      	mov	r9, r1
 80050b8:	f7fb fa06 	bl	80004c8 <__aeabi_dmul>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4620      	mov	r0, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	f7fb f848 	bl	8000158 <__aeabi_dsub>
 80050c8:	f7fb fc98 	bl	80009fc <__aeabi_d2iz>
 80050cc:	9b02      	ldr	r3, [sp, #8]
 80050ce:	3e01      	subs	r6, #1
 80050d0:	f843 0b04 	str.w	r0, [r3], #4
 80050d4:	9302      	str	r3, [sp, #8]
 80050d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80050d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80050dc:	4640      	mov	r0, r8
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	4649      	mov	r1, r9
 80050e4:	f7fb f83a 	bl	800015c <__adddf3>
 80050e8:	4604      	mov	r4, r0
 80050ea:	460d      	mov	r5, r1
 80050ec:	e762      	b.n	8004fb4 <__kernel_rem_pio2+0x110>
 80050ee:	d105      	bne.n	80050fc <__kernel_rem_pio2+0x258>
 80050f0:	1e7b      	subs	r3, r7, #1
 80050f2:	aa0c      	add	r2, sp, #48	; 0x30
 80050f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80050f8:	15c3      	asrs	r3, r0, #23
 80050fa:	e79b      	b.n	8005034 <__kernel_rem_pio2+0x190>
 80050fc:	2200      	movs	r2, #0
 80050fe:	4b32      	ldr	r3, [pc, #200]	; (80051c8 <__kernel_rem_pio2+0x324>)
 8005100:	f7fb fc68 	bl	80009d4 <__aeabi_dcmpge>
 8005104:	2800      	cmp	r0, #0
 8005106:	d13f      	bne.n	8005188 <__kernel_rem_pio2+0x2e4>
 8005108:	9002      	str	r0, [sp, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	2300      	movs	r3, #0
 800510e:	4640      	mov	r0, r8
 8005110:	4649      	mov	r1, r9
 8005112:	f7fb fc41 	bl	8000998 <__aeabi_dcmpeq>
 8005116:	2800      	cmp	r0, #0
 8005118:	f000 80b5 	beq.w	8005286 <__kernel_rem_pio2+0x3e2>
 800511c:	1e7c      	subs	r4, r7, #1
 800511e:	4623      	mov	r3, r4
 8005120:	2200      	movs	r2, #0
 8005122:	9904      	ldr	r1, [sp, #16]
 8005124:	428b      	cmp	r3, r1
 8005126:	da64      	bge.n	80051f2 <__kernel_rem_pio2+0x34e>
 8005128:	2a00      	cmp	r2, #0
 800512a:	d078      	beq.n	800521e <__kernel_rem_pio2+0x37a>
 800512c:	ab0c      	add	r3, sp, #48	; 0x30
 800512e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005132:	f1aa 0a18 	sub.w	sl, sl, #24
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80a3 	beq.w	8005282 <__kernel_rem_pio2+0x3de>
 800513c:	4652      	mov	r2, sl
 800513e:	2000      	movs	r0, #0
 8005140:	491e      	ldr	r1, [pc, #120]	; (80051bc <__kernel_rem_pio2+0x318>)
 8005142:	f000 fb35 	bl	80057b0 <scalbn>
 8005146:	46a2      	mov	sl, r4
 8005148:	4606      	mov	r6, r0
 800514a:	460f      	mov	r7, r1
 800514c:	f04f 0800 	mov.w	r8, #0
 8005150:	00e3      	lsls	r3, r4, #3
 8005152:	9306      	str	r3, [sp, #24]
 8005154:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80051c0 <__kernel_rem_pio2+0x31c>
 8005158:	ab70      	add	r3, sp, #448	; 0x1c0
 800515a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800515e:	f1ba 0f00 	cmp.w	sl, #0
 8005162:	f280 80c6 	bge.w	80052f2 <__kernel_rem_pio2+0x44e>
 8005166:	4627      	mov	r7, r4
 8005168:	f04f 0800 	mov.w	r8, #0
 800516c:	2f00      	cmp	r7, #0
 800516e:	f2c0 80f3 	blt.w	8005358 <__kernel_rem_pio2+0x4b4>
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <__kernel_rem_pio2+0x328>)
 8005174:	f04f 0a00 	mov.w	sl, #0
 8005178:	461d      	mov	r5, r3
 800517a:	ab70      	add	r3, sp, #448	; 0x1c0
 800517c:	f04f 0b00 	mov.w	fp, #0
 8005180:	2600      	movs	r6, #0
 8005182:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005186:	e0d9      	b.n	800533c <__kernel_rem_pio2+0x498>
 8005188:	2302      	movs	r3, #2
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	e756      	b.n	800503c <__kernel_rem_pio2+0x198>
 800518e:	f8db 3000 	ldr.w	r3, [fp]
 8005192:	b954      	cbnz	r4, 80051aa <__kernel_rem_pio2+0x306>
 8005194:	b123      	cbz	r3, 80051a0 <__kernel_rem_pio2+0x2fc>
 8005196:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800519a:	f8cb 3000 	str.w	r3, [fp]
 800519e:	2301      	movs	r3, #1
 80051a0:	461c      	mov	r4, r3
 80051a2:	3201      	adds	r2, #1
 80051a4:	f10b 0b04 	add.w	fp, fp, #4
 80051a8:	e74f      	b.n	800504a <__kernel_rem_pio2+0x1a6>
 80051aa:	1acb      	subs	r3, r1, r3
 80051ac:	f8cb 3000 	str.w	r3, [fp]
 80051b0:	4623      	mov	r3, r4
 80051b2:	e7f5      	b.n	80051a0 <__kernel_rem_pio2+0x2fc>
 80051b4:	08005ac0 	.word	0x08005ac0
 80051b8:	40200000 	.word	0x40200000
 80051bc:	3ff00000 	.word	0x3ff00000
 80051c0:	3e700000 	.word	0x3e700000
 80051c4:	41700000 	.word	0x41700000
 80051c8:	3fe00000 	.word	0x3fe00000
 80051cc:	08005a80 	.word	0x08005a80
 80051d0:	1e7a      	subs	r2, r7, #1
 80051d2:	ab0c      	add	r3, sp, #48	; 0x30
 80051d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80051dc:	a90c      	add	r1, sp, #48	; 0x30
 80051de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80051e2:	e740      	b.n	8005066 <__kernel_rem_pio2+0x1c2>
 80051e4:	1e7a      	subs	r2, r7, #1
 80051e6:	ab0c      	add	r3, sp, #48	; 0x30
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80051f0:	e7f4      	b.n	80051dc <__kernel_rem_pio2+0x338>
 80051f2:	a90c      	add	r1, sp, #48	; 0x30
 80051f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	430a      	orrs	r2, r1
 80051fc:	e791      	b.n	8005122 <__kernel_rem_pio2+0x27e>
 80051fe:	3401      	adds	r4, #1
 8005200:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005204:	2a00      	cmp	r2, #0
 8005206:	d0fa      	beq.n	80051fe <__kernel_rem_pio2+0x35a>
 8005208:	9b08      	ldr	r3, [sp, #32]
 800520a:	1c7e      	adds	r6, r7, #1
 800520c:	18fd      	adds	r5, r7, r3
 800520e:	ab20      	add	r3, sp, #128	; 0x80
 8005210:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005214:	443c      	add	r4, r7
 8005216:	42b4      	cmp	r4, r6
 8005218:	da04      	bge.n	8005224 <__kernel_rem_pio2+0x380>
 800521a:	4627      	mov	r7, r4
 800521c:	e6c0      	b.n	8004fa0 <__kernel_rem_pio2+0xfc>
 800521e:	2401      	movs	r4, #1
 8005220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005222:	e7ed      	b.n	8005200 <__kernel_rem_pio2+0x35c>
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	462f      	mov	r7, r5
 8005228:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800522c:	f7fb f8e2 	bl	80003f4 <__aeabi_i2d>
 8005230:	f04f 0b00 	mov.w	fp, #0
 8005234:	f04f 0800 	mov.w	r8, #0
 8005238:	f04f 0900 	mov.w	r9, #0
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8005242:	3b08      	subs	r3, #8
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	9b06      	ldr	r3, [sp, #24]
 8005248:	459b      	cmp	fp, r3
 800524a:	dd07      	ble.n	800525c <__kernel_rem_pio2+0x3b8>
 800524c:	ab70      	add	r3, sp, #448	; 0x1c0
 800524e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005252:	463d      	mov	r5, r7
 8005254:	e9c3 8900 	strd	r8, r9, [r3]
 8005258:	3601      	adds	r6, #1
 800525a:	e7dc      	b.n	8005216 <__kernel_rem_pio2+0x372>
 800525c:	9902      	ldr	r1, [sp, #8]
 800525e:	f10b 0b01 	add.w	fp, fp, #1
 8005262:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005266:	9102      	str	r1, [sp, #8]
 8005268:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800526c:	f7fb f92c 	bl	80004c8 <__aeabi_dmul>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fa ff70 	bl	800015c <__adddf3>
 800527c:	4680      	mov	r8, r0
 800527e:	4689      	mov	r9, r1
 8005280:	e7e1      	b.n	8005246 <__kernel_rem_pio2+0x3a2>
 8005282:	3c01      	subs	r4, #1
 8005284:	e752      	b.n	800512c <__kernel_rem_pio2+0x288>
 8005286:	f1ca 0200 	rsb	r2, sl, #0
 800528a:	4640      	mov	r0, r8
 800528c:	4649      	mov	r1, r9
 800528e:	f000 fa8f 	bl	80057b0 <scalbn>
 8005292:	2200      	movs	r2, #0
 8005294:	4ba5      	ldr	r3, [pc, #660]	; (800552c <__kernel_rem_pio2+0x688>)
 8005296:	4604      	mov	r4, r0
 8005298:	460d      	mov	r5, r1
 800529a:	f7fb fb9b 	bl	80009d4 <__aeabi_dcmpge>
 800529e:	b1f8      	cbz	r0, 80052e0 <__kernel_rem_pio2+0x43c>
 80052a0:	2200      	movs	r2, #0
 80052a2:	4ba3      	ldr	r3, [pc, #652]	; (8005530 <__kernel_rem_pio2+0x68c>)
 80052a4:	4620      	mov	r0, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	f7fb f90e 	bl	80004c8 <__aeabi_dmul>
 80052ac:	f7fb fba6 	bl	80009fc <__aeabi_d2iz>
 80052b0:	4606      	mov	r6, r0
 80052b2:	f7fb f89f 	bl	80003f4 <__aeabi_i2d>
 80052b6:	2200      	movs	r2, #0
 80052b8:	4b9c      	ldr	r3, [pc, #624]	; (800552c <__kernel_rem_pio2+0x688>)
 80052ba:	f7fb f905 	bl	80004c8 <__aeabi_dmul>
 80052be:	460b      	mov	r3, r1
 80052c0:	4602      	mov	r2, r0
 80052c2:	4629      	mov	r1, r5
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7fa ff47 	bl	8000158 <__aeabi_dsub>
 80052ca:	f7fb fb97 	bl	80009fc <__aeabi_d2iz>
 80052ce:	1c7c      	adds	r4, r7, #1
 80052d0:	ab0c      	add	r3, sp, #48	; 0x30
 80052d2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80052d6:	f10a 0a18 	add.w	sl, sl, #24
 80052da:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80052de:	e72d      	b.n	800513c <__kernel_rem_pio2+0x298>
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7fb fb8a 	bl	80009fc <__aeabi_d2iz>
 80052e8:	ab0c      	add	r3, sp, #48	; 0x30
 80052ea:	463c      	mov	r4, r7
 80052ec:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80052f0:	e724      	b.n	800513c <__kernel_rem_pio2+0x298>
 80052f2:	ab0c      	add	r3, sp, #48	; 0x30
 80052f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80052f8:	f7fb f87c 	bl	80003f4 <__aeabi_i2d>
 80052fc:	4632      	mov	r2, r6
 80052fe:	463b      	mov	r3, r7
 8005300:	f7fb f8e2 	bl	80004c8 <__aeabi_dmul>
 8005304:	4642      	mov	r2, r8
 8005306:	e86b 0102 	strd	r0, r1, [fp], #-8
 800530a:	464b      	mov	r3, r9
 800530c:	4630      	mov	r0, r6
 800530e:	4639      	mov	r1, r7
 8005310:	f7fb f8da 	bl	80004c8 <__aeabi_dmul>
 8005314:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	e71f      	b.n	800515e <__kernel_rem_pio2+0x2ba>
 800531e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005322:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005326:	f7fb f8cf 	bl	80004c8 <__aeabi_dmul>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4650      	mov	r0, sl
 8005330:	4659      	mov	r1, fp
 8005332:	f7fa ff13 	bl	800015c <__adddf3>
 8005336:	4682      	mov	sl, r0
 8005338:	468b      	mov	fp, r1
 800533a:	3601      	adds	r6, #1
 800533c:	9b04      	ldr	r3, [sp, #16]
 800533e:	429e      	cmp	r6, r3
 8005340:	dc01      	bgt.n	8005346 <__kernel_rem_pio2+0x4a2>
 8005342:	45b0      	cmp	r8, r6
 8005344:	daeb      	bge.n	800531e <__kernel_rem_pio2+0x47a>
 8005346:	ab48      	add	r3, sp, #288	; 0x120
 8005348:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800534c:	e9c3 ab00 	strd	sl, fp, [r3]
 8005350:	3f01      	subs	r7, #1
 8005352:	f108 0801 	add.w	r8, r8, #1
 8005356:	e709      	b.n	800516c <__kernel_rem_pio2+0x2c8>
 8005358:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800535a:	2b02      	cmp	r3, #2
 800535c:	dc09      	bgt.n	8005372 <__kernel_rem_pio2+0x4ce>
 800535e:	2b00      	cmp	r3, #0
 8005360:	dc34      	bgt.n	80053cc <__kernel_rem_pio2+0x528>
 8005362:	d05e      	beq.n	8005422 <__kernel_rem_pio2+0x57e>
 8005364:	9b07      	ldr	r3, [sp, #28]
 8005366:	f003 0007 	and.w	r0, r3, #7
 800536a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005374:	2b03      	cmp	r3, #3
 8005376:	d1f5      	bne.n	8005364 <__kernel_rem_pio2+0x4c0>
 8005378:	9a06      	ldr	r2, [sp, #24]
 800537a:	ab48      	add	r3, sp, #288	; 0x120
 800537c:	441a      	add	r2, r3
 800537e:	4615      	mov	r5, r2
 8005380:	4692      	mov	sl, r2
 8005382:	46a3      	mov	fp, r4
 8005384:	f1bb 0f00 	cmp.w	fp, #0
 8005388:	dc7a      	bgt.n	8005480 <__kernel_rem_pio2+0x5dc>
 800538a:	46aa      	mov	sl, r5
 800538c:	46a3      	mov	fp, r4
 800538e:	f1bb 0f01 	cmp.w	fp, #1
 8005392:	f300 8094 	bgt.w	80054be <__kernel_rem_pio2+0x61a>
 8005396:	2700      	movs	r7, #0
 8005398:	463e      	mov	r6, r7
 800539a:	2c01      	cmp	r4, #1
 800539c:	f300 80ae 	bgt.w	80054fc <__kernel_rem_pio2+0x658>
 80053a0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80053a4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80053a8:	9b02      	ldr	r3, [sp, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 80b0 	bne.w	8005510 <__kernel_rem_pio2+0x66c>
 80053b0:	4603      	mov	r3, r0
 80053b2:	462a      	mov	r2, r5
 80053b4:	9801      	ldr	r0, [sp, #4]
 80053b6:	e9c0 2300 	strd	r2, r3, [r0]
 80053ba:	4622      	mov	r2, r4
 80053bc:	460b      	mov	r3, r1
 80053be:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80053c2:	463a      	mov	r2, r7
 80053c4:	4633      	mov	r3, r6
 80053c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80053ca:	e7cb      	b.n	8005364 <__kernel_rem_pio2+0x4c0>
 80053cc:	2000      	movs	r0, #0
 80053ce:	9a06      	ldr	r2, [sp, #24]
 80053d0:	ab48      	add	r3, sp, #288	; 0x120
 80053d2:	441a      	add	r2, r3
 80053d4:	4615      	mov	r5, r2
 80053d6:	46a0      	mov	r8, r4
 80053d8:	4601      	mov	r1, r0
 80053da:	f1b8 0f00 	cmp.w	r8, #0
 80053de:	da3c      	bge.n	800545a <__kernel_rem_pio2+0x5b6>
 80053e0:	9b02      	ldr	r3, [sp, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d040      	beq.n	8005468 <__kernel_rem_pio2+0x5c4>
 80053e6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80053ea:	4602      	mov	r2, r0
 80053ec:	462b      	mov	r3, r5
 80053ee:	9d01      	ldr	r5, [sp, #4]
 80053f0:	2601      	movs	r6, #1
 80053f2:	e9c5 2300 	strd	r2, r3, [r5]
 80053f6:	460b      	mov	r3, r1
 80053f8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80053fc:	f7fa feac 	bl	8000158 <__aeabi_dsub>
 8005400:	4684      	mov	ip, r0
 8005402:	460f      	mov	r7, r1
 8005404:	ad48      	add	r5, sp, #288	; 0x120
 8005406:	42b4      	cmp	r4, r6
 8005408:	f105 0508 	add.w	r5, r5, #8
 800540c:	da2e      	bge.n	800546c <__kernel_rem_pio2+0x5c8>
 800540e:	9b02      	ldr	r3, [sp, #8]
 8005410:	b10b      	cbz	r3, 8005416 <__kernel_rem_pio2+0x572>
 8005412:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005416:	4662      	mov	r2, ip
 8005418:	463b      	mov	r3, r7
 800541a:	9901      	ldr	r1, [sp, #4]
 800541c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005420:	e7a0      	b.n	8005364 <__kernel_rem_pio2+0x4c0>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005426:	ab48      	add	r3, sp, #288	; 0x120
 8005428:	441a      	add	r2, r3
 800542a:	4615      	mov	r5, r2
 800542c:	4637      	mov	r7, r6
 800542e:	2c00      	cmp	r4, #0
 8005430:	da09      	bge.n	8005446 <__kernel_rem_pio2+0x5a2>
 8005432:	9b02      	ldr	r3, [sp, #8]
 8005434:	b10b      	cbz	r3, 800543a <__kernel_rem_pio2+0x596>
 8005436:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800543a:	4632      	mov	r2, r6
 800543c:	463b      	mov	r3, r7
 800543e:	9901      	ldr	r1, [sp, #4]
 8005440:	e9c1 2300 	strd	r2, r3, [r1]
 8005444:	e78e      	b.n	8005364 <__kernel_rem_pio2+0x4c0>
 8005446:	4630      	mov	r0, r6
 8005448:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800544c:	4639      	mov	r1, r7
 800544e:	f7fa fe85 	bl	800015c <__adddf3>
 8005452:	3c01      	subs	r4, #1
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	e7e9      	b.n	800542e <__kernel_rem_pio2+0x58a>
 800545a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800545e:	f7fa fe7d 	bl	800015c <__adddf3>
 8005462:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005466:	e7b8      	b.n	80053da <__kernel_rem_pio2+0x536>
 8005468:	460d      	mov	r5, r1
 800546a:	e7be      	b.n	80053ea <__kernel_rem_pio2+0x546>
 800546c:	4660      	mov	r0, ip
 800546e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005472:	4639      	mov	r1, r7
 8005474:	f7fa fe72 	bl	800015c <__adddf3>
 8005478:	3601      	adds	r6, #1
 800547a:	4684      	mov	ip, r0
 800547c:	460f      	mov	r7, r1
 800547e:	e7c2      	b.n	8005406 <__kernel_rem_pio2+0x562>
 8005480:	e9da 6700 	ldrd	r6, r7, [sl]
 8005484:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8005488:	4632      	mov	r2, r6
 800548a:	463b      	mov	r3, r7
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fa fe64 	bl	800015c <__adddf3>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800549c:	4640      	mov	r0, r8
 800549e:	4649      	mov	r1, r9
 80054a0:	f7fa fe5a 	bl	8000158 <__aeabi_dsub>
 80054a4:	4632      	mov	r2, r6
 80054a6:	463b      	mov	r3, r7
 80054a8:	f7fa fe58 	bl	800015c <__adddf3>
 80054ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054b0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80054b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80054b8:	e9ca 2300 	strd	r2, r3, [sl]
 80054bc:	e762      	b.n	8005384 <__kernel_rem_pio2+0x4e0>
 80054be:	e9da 8900 	ldrd	r8, r9, [sl]
 80054c2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f7fa fe45 	bl	800015c <__adddf3>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	f7fa fe3b 	bl	8000158 <__aeabi_dsub>
 80054e2:	4642      	mov	r2, r8
 80054e4:	464b      	mov	r3, r9
 80054e6:	f7fa fe39 	bl	800015c <__adddf3>
 80054ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ee:	e86a 0102 	strd	r0, r1, [sl], #-8
 80054f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80054f6:	e9ca 2300 	strd	r2, r3, [sl]
 80054fa:	e748      	b.n	800538e <__kernel_rem_pio2+0x4ea>
 80054fc:	4638      	mov	r0, r7
 80054fe:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005502:	4631      	mov	r1, r6
 8005504:	f7fa fe2a 	bl	800015c <__adddf3>
 8005508:	3c01      	subs	r4, #1
 800550a:	4607      	mov	r7, r0
 800550c:	460e      	mov	r6, r1
 800550e:	e744      	b.n	800539a <__kernel_rem_pio2+0x4f6>
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005516:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800551a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800551e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005522:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005526:	601d      	str	r5, [r3, #0]
 8005528:	615e      	str	r6, [r3, #20]
 800552a:	e71b      	b.n	8005364 <__kernel_rem_pio2+0x4c0>
 800552c:	41700000 	.word	0x41700000
 8005530:	3e700000 	.word	0x3e700000
 8005534:	00000000 	.word	0x00000000

08005538 <__kernel_sin>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	e9cd 2300 	strd	r2, r3, [sp]
 8005542:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005546:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800554a:	4682      	mov	sl, r0
 800554c:	460c      	mov	r4, r1
 800554e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005550:	da03      	bge.n	800555a <__kernel_sin+0x22>
 8005552:	f7fb fa53 	bl	80009fc <__aeabi_d2iz>
 8005556:	2800      	cmp	r0, #0
 8005558:	d050      	beq.n	80055fc <__kernel_sin+0xc4>
 800555a:	4652      	mov	r2, sl
 800555c:	4623      	mov	r3, r4
 800555e:	4650      	mov	r0, sl
 8005560:	4621      	mov	r1, r4
 8005562:	f7fa ffb1 	bl	80004c8 <__aeabi_dmul>
 8005566:	4606      	mov	r6, r0
 8005568:	460f      	mov	r7, r1
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4650      	mov	r0, sl
 8005570:	4621      	mov	r1, r4
 8005572:	f7fa ffa9 	bl	80004c8 <__aeabi_dmul>
 8005576:	a33e      	add	r3, pc, #248	; (adr r3, 8005670 <__kernel_sin+0x138>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	4680      	mov	r8, r0
 800557e:	4689      	mov	r9, r1
 8005580:	4630      	mov	r0, r6
 8005582:	4639      	mov	r1, r7
 8005584:	f7fa ffa0 	bl	80004c8 <__aeabi_dmul>
 8005588:	a33b      	add	r3, pc, #236	; (adr r3, 8005678 <__kernel_sin+0x140>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa fde3 	bl	8000158 <__aeabi_dsub>
 8005592:	4632      	mov	r2, r6
 8005594:	463b      	mov	r3, r7
 8005596:	f7fa ff97 	bl	80004c8 <__aeabi_dmul>
 800559a:	a339      	add	r3, pc, #228	; (adr r3, 8005680 <__kernel_sin+0x148>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fa fddc 	bl	800015c <__adddf3>
 80055a4:	4632      	mov	r2, r6
 80055a6:	463b      	mov	r3, r7
 80055a8:	f7fa ff8e 	bl	80004c8 <__aeabi_dmul>
 80055ac:	a336      	add	r3, pc, #216	; (adr r3, 8005688 <__kernel_sin+0x150>)
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f7fa fdd1 	bl	8000158 <__aeabi_dsub>
 80055b6:	4632      	mov	r2, r6
 80055b8:	463b      	mov	r3, r7
 80055ba:	f7fa ff85 	bl	80004c8 <__aeabi_dmul>
 80055be:	a334      	add	r3, pc, #208	; (adr r3, 8005690 <__kernel_sin+0x158>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f7fa fdca 	bl	800015c <__adddf3>
 80055c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055cc:	b9dd      	cbnz	r5, 8005606 <__kernel_sin+0xce>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fa ff77 	bl	80004c8 <__aeabi_dmul>
 80055da:	a32f      	add	r3, pc, #188	; (adr r3, 8005698 <__kernel_sin+0x160>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fa fdba 	bl	8000158 <__aeabi_dsub>
 80055e4:	4642      	mov	r2, r8
 80055e6:	464b      	mov	r3, r9
 80055e8:	f7fa ff6e 	bl	80004c8 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4650      	mov	r0, sl
 80055f2:	4621      	mov	r1, r4
 80055f4:	f7fa fdb2 	bl	800015c <__adddf3>
 80055f8:	4682      	mov	sl, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4650      	mov	r0, sl
 80055fe:	4621      	mov	r1, r4
 8005600:	b006      	add	sp, #24
 8005602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005606:	2200      	movs	r2, #0
 8005608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800560c:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <__kernel_sin+0x168>)
 800560e:	f7fa ff5b 	bl	80004c8 <__aeabi_dmul>
 8005612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005616:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fa ff53 	bl	80004c8 <__aeabi_dmul>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800562a:	f7fa fd95 	bl	8000158 <__aeabi_dsub>
 800562e:	4632      	mov	r2, r6
 8005630:	463b      	mov	r3, r7
 8005632:	f7fa ff49 	bl	80004c8 <__aeabi_dmul>
 8005636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800563a:	f7fa fd8d 	bl	8000158 <__aeabi_dsub>
 800563e:	a316      	add	r3, pc, #88	; (adr r3, 8005698 <__kernel_sin+0x160>)
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	4640      	mov	r0, r8
 800564a:	4649      	mov	r1, r9
 800564c:	f7fa ff3c 	bl	80004c8 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4630      	mov	r0, r6
 8005656:	4639      	mov	r1, r7
 8005658:	f7fa fd80 	bl	800015c <__adddf3>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4650      	mov	r0, sl
 8005662:	4621      	mov	r1, r4
 8005664:	f7fa fd78 	bl	8000158 <__aeabi_dsub>
 8005668:	e7c6      	b.n	80055f8 <__kernel_sin+0xc0>
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w
 8005670:	5acfd57c 	.word	0x5acfd57c
 8005674:	3de5d93a 	.word	0x3de5d93a
 8005678:	8a2b9ceb 	.word	0x8a2b9ceb
 800567c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005680:	57b1fe7d 	.word	0x57b1fe7d
 8005684:	3ec71de3 	.word	0x3ec71de3
 8005688:	19c161d5 	.word	0x19c161d5
 800568c:	3f2a01a0 	.word	0x3f2a01a0
 8005690:	1110f8a6 	.word	0x1110f8a6
 8005694:	3f811111 	.word	0x3f811111
 8005698:	55555549 	.word	0x55555549
 800569c:	3fc55555 	.word	0x3fc55555
 80056a0:	3fe00000 	.word	0x3fe00000

080056a4 <fabs>:
 80056a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80056a8:	4770      	bx	lr
 80056aa:	0000      	movs	r0, r0
 80056ac:	0000      	movs	r0, r0
	...

080056b0 <floor>:
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80056b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80056bc:	2e13      	cmp	r6, #19
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4607      	mov	r7, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	4605      	mov	r5, r0
 80056c8:	dc34      	bgt.n	8005734 <floor+0x84>
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	da15      	bge.n	80056fa <floor+0x4a>
 80056ce:	a334      	add	r3, pc, #208	; (adr r3, 80057a0 <floor+0xf0>)
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f7fa fd42 	bl	800015c <__adddf3>
 80056d8:	2200      	movs	r2, #0
 80056da:	2300      	movs	r3, #0
 80056dc:	f7fb f984 	bl	80009e8 <__aeabi_dcmpgt>
 80056e0:	b140      	cbz	r0, 80056f4 <floor+0x44>
 80056e2:	2c00      	cmp	r4, #0
 80056e4:	da59      	bge.n	800579a <floor+0xea>
 80056e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80056ea:	ea57 0503 	orrs.w	r5, r7, r3
 80056ee:	d001      	beq.n	80056f4 <floor+0x44>
 80056f0:	2500      	movs	r5, #0
 80056f2:	4c2d      	ldr	r4, [pc, #180]	; (80057a8 <floor+0xf8>)
 80056f4:	4623      	mov	r3, r4
 80056f6:	462f      	mov	r7, r5
 80056f8:	e025      	b.n	8005746 <floor+0x96>
 80056fa:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <floor+0xfc>)
 80056fc:	fa42 f806 	asr.w	r8, r2, r6
 8005700:	ea01 0208 	and.w	r2, r1, r8
 8005704:	4302      	orrs	r2, r0
 8005706:	d01e      	beq.n	8005746 <floor+0x96>
 8005708:	a325      	add	r3, pc, #148	; (adr r3, 80057a0 <floor+0xf0>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa fd25 	bl	800015c <__adddf3>
 8005712:	2200      	movs	r2, #0
 8005714:	2300      	movs	r3, #0
 8005716:	f7fb f967 	bl	80009e8 <__aeabi_dcmpgt>
 800571a:	2800      	cmp	r0, #0
 800571c:	d0ea      	beq.n	80056f4 <floor+0x44>
 800571e:	2c00      	cmp	r4, #0
 8005720:	bfbe      	ittt	lt
 8005722:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005726:	fa43 f606 	asrlt.w	r6, r3, r6
 800572a:	19a4      	addlt	r4, r4, r6
 800572c:	2500      	movs	r5, #0
 800572e:	ea24 0408 	bic.w	r4, r4, r8
 8005732:	e7df      	b.n	80056f4 <floor+0x44>
 8005734:	2e33      	cmp	r6, #51	; 0x33
 8005736:	dd0a      	ble.n	800574e <floor+0x9e>
 8005738:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800573c:	d103      	bne.n	8005746 <floor+0x96>
 800573e:	f7fa fd0d 	bl	800015c <__adddf3>
 8005742:	4607      	mov	r7, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4638      	mov	r0, r7
 8005748:	4619      	mov	r1, r3
 800574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005752:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005756:	fa22 f808 	lsr.w	r8, r2, r8
 800575a:	ea18 0f00 	tst.w	r8, r0
 800575e:	d0f2      	beq.n	8005746 <floor+0x96>
 8005760:	a30f      	add	r3, pc, #60	; (adr r3, 80057a0 <floor+0xf0>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa fcf9 	bl	800015c <__adddf3>
 800576a:	2200      	movs	r2, #0
 800576c:	2300      	movs	r3, #0
 800576e:	f7fb f93b 	bl	80009e8 <__aeabi_dcmpgt>
 8005772:	2800      	cmp	r0, #0
 8005774:	d0be      	beq.n	80056f4 <floor+0x44>
 8005776:	2c00      	cmp	r4, #0
 8005778:	da02      	bge.n	8005780 <floor+0xd0>
 800577a:	2e14      	cmp	r6, #20
 800577c:	d103      	bne.n	8005786 <floor+0xd6>
 800577e:	3401      	adds	r4, #1
 8005780:	ea25 0508 	bic.w	r5, r5, r8
 8005784:	e7b6      	b.n	80056f4 <floor+0x44>
 8005786:	2301      	movs	r3, #1
 8005788:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800578c:	fa03 f606 	lsl.w	r6, r3, r6
 8005790:	4435      	add	r5, r6
 8005792:	42bd      	cmp	r5, r7
 8005794:	bf38      	it	cc
 8005796:	18e4      	addcc	r4, r4, r3
 8005798:	e7f2      	b.n	8005780 <floor+0xd0>
 800579a:	2500      	movs	r5, #0
 800579c:	462c      	mov	r4, r5
 800579e:	e7a9      	b.n	80056f4 <floor+0x44>
 80057a0:	8800759c 	.word	0x8800759c
 80057a4:	7e37e43c 	.word	0x7e37e43c
 80057a8:	bff00000 	.word	0xbff00000
 80057ac:	000fffff 	.word	0x000fffff

080057b0 <scalbn>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	4617      	mov	r7, r2
 80057bc:	460b      	mov	r3, r1
 80057be:	b996      	cbnz	r6, 80057e6 <scalbn+0x36>
 80057c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057c4:	4303      	orrs	r3, r0
 80057c6:	d039      	beq.n	800583c <scalbn+0x8c>
 80057c8:	4b35      	ldr	r3, [pc, #212]	; (80058a0 <scalbn+0xf0>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	f7fa fe7c 	bl	80004c8 <__aeabi_dmul>
 80057d0:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <scalbn+0xf4>)
 80057d2:	4604      	mov	r4, r0
 80057d4:	429f      	cmp	r7, r3
 80057d6:	460d      	mov	r5, r1
 80057d8:	da0f      	bge.n	80057fa <scalbn+0x4a>
 80057da:	a32d      	add	r3, pc, #180	; (adr r3, 8005890 <scalbn+0xe0>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa fe72 	bl	80004c8 <__aeabi_dmul>
 80057e4:	e006      	b.n	80057f4 <scalbn+0x44>
 80057e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80057ea:	4296      	cmp	r6, r2
 80057ec:	d10a      	bne.n	8005804 <scalbn+0x54>
 80057ee:	4602      	mov	r2, r0
 80057f0:	f7fa fcb4 	bl	800015c <__adddf3>
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	e020      	b.n	800583c <scalbn+0x8c>
 80057fa:	460b      	mov	r3, r1
 80057fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005800:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005804:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005808:	19b9      	adds	r1, r7, r6
 800580a:	4291      	cmp	r1, r2
 800580c:	dd0e      	ble.n	800582c <scalbn+0x7c>
 800580e:	a322      	add	r3, pc, #136	; (adr r3, 8005898 <scalbn+0xe8>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005818:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800581c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005820:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005824:	4820      	ldr	r0, [pc, #128]	; (80058a8 <scalbn+0xf8>)
 8005826:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800582a:	e7d9      	b.n	80057e0 <scalbn+0x30>
 800582c:	2900      	cmp	r1, #0
 800582e:	dd08      	ble.n	8005842 <scalbn+0x92>
 8005830:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005838:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800583c:	4620      	mov	r0, r4
 800583e:	4629      	mov	r1, r5
 8005840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005842:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005846:	da16      	bge.n	8005876 <scalbn+0xc6>
 8005848:	f24c 3350 	movw	r3, #50000	; 0xc350
 800584c:	429f      	cmp	r7, r3
 800584e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005852:	dd08      	ble.n	8005866 <scalbn+0xb6>
 8005854:	4c15      	ldr	r4, [pc, #84]	; (80058ac <scalbn+0xfc>)
 8005856:	4814      	ldr	r0, [pc, #80]	; (80058a8 <scalbn+0xf8>)
 8005858:	f363 74df 	bfi	r4, r3, #31, #1
 800585c:	a30e      	add	r3, pc, #56	; (adr r3, 8005898 <scalbn+0xe8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	4621      	mov	r1, r4
 8005864:	e7bc      	b.n	80057e0 <scalbn+0x30>
 8005866:	4c12      	ldr	r4, [pc, #72]	; (80058b0 <scalbn+0x100>)
 8005868:	4812      	ldr	r0, [pc, #72]	; (80058b4 <scalbn+0x104>)
 800586a:	f363 74df 	bfi	r4, r3, #31, #1
 800586e:	a308      	add	r3, pc, #32	; (adr r3, 8005890 <scalbn+0xe0>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	e7f5      	b.n	8005862 <scalbn+0xb2>
 8005876:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800587a:	3136      	adds	r1, #54	; 0x36
 800587c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005880:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005884:	4620      	mov	r0, r4
 8005886:	4629      	mov	r1, r5
 8005888:	2200      	movs	r2, #0
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <scalbn+0x108>)
 800588c:	e7a8      	b.n	80057e0 <scalbn+0x30>
 800588e:	bf00      	nop
 8005890:	c2f8f359 	.word	0xc2f8f359
 8005894:	01a56e1f 	.word	0x01a56e1f
 8005898:	8800759c 	.word	0x8800759c
 800589c:	7e37e43c 	.word	0x7e37e43c
 80058a0:	43500000 	.word	0x43500000
 80058a4:	ffff3cb0 	.word	0xffff3cb0
 80058a8:	8800759c 	.word	0x8800759c
 80058ac:	7e37e43c 	.word	0x7e37e43c
 80058b0:	01a56e1f 	.word	0x01a56e1f
 80058b4:	c2f8f359 	.word	0xc2f8f359
 80058b8:	3c900000 	.word	0x3c900000

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
